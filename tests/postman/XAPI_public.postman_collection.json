{
	"info": {
		"_postman_id": "211203e1-3b81-4c33-b85d-0aa4838ca813",
		"name": "XAPI_public",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7012418"
	},
	"item": [
		{
			"name": "Ready_for_CI",
			"item": [
				{
					"name": "X-profile",
					"item": [
						{
							"name": "GetToken [ID]",
							"item": [
								{
									"name": "Get admin token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set admin token\", function () {\r",
													"   \r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "grand_type",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=password&scope=offline_access&username={{adminUserName}}&password={{adminPassword}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{url}}/connect/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PrepareTestData",
							"item": [
								{
									"name": "CreateCatalog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"catalogQA\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"TestCatalogPostman\",\r\n  \"isVirtual\": false,\r\n  \"outerId\": null,\r\n  \"defaultLanguage\": {\r\n    \"catalogId\": null,\r\n    \"isDefault\": true,\r\n    \"languageCode\": \"en-US\",\r\n    \"id\": null\r\n  },\r\n  \"languages\": [\r\n    {\r\n      \"catalogId\": null,\r\n      \"isDefault\": true,\r\n      \"languageCode\": \"en-US\",\r\n      \"id\": null\r\n    }\r\n  ],\r\n  \"properties\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/catalogs",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": null,\r\n  \"code\": \"3cd53\",\r\n  \"name\": \"TestCategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateSubCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId2\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": \"{{categoryId}}\",\r\n  \"code\": \"d0d3b\",\r\n  \"name\": \"TestSubcategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateStore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"storeId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"validationRuleCodePattern\": \"^[a-zA-Z0-9_-]*$\",\r\n  \"id\": \"TestStorePostman\",\r\n  \"name\": \"TestStorePostman\",\r\n  \"catalog\": \"{{catalogQA}}\",\r\n  \"url\": \"https://someurl.com\",\r\n  \"email\": \"noreply@mail.com\",\r\n  \"adminEmail\": \"noreply@mail.com\",\r\n  \"defaultLanguage\": \"en-US\",\r\n  \"defaultCurrency\": \"USD\",\r\n  \"storeState\": \"Open\",\r\n  \"languages\": [\r\n    \"en-US\"\r\n  ],\r\n  \"currencies\": [\r\n    \"USD\"\r\n  ],\r\n  \"mainFulfillmentCenterId\":\"{{ffcId1Postman}}\",\r\n  \"additionalFulfillmentCenterIds\": [\r\n    \"{{ffcId1PostmanAvailable}}\"\r\n  ],\r\n   \"mainReturnsFulfillmentCenterId\": \"{{ffcId1Postman}}\",\r\n  \"returnsFulfillmentCenterIds\": [\r\n    \"{{ffcId1PostmanAvailable}}\"\r\n  ],\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.TaxCalculationEnabled\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.AllowAnonymousUsers\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.IsSpa\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.EmailVerificationEnabled\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.EnablePriceRoundingForTotalsCalculation\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"Collapsed\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|SEO\",\r\n         \"name\":\"Stores.SeoLinksType\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            \"None\",\r\n            \"Short\",\r\n            \"Collapsed\",\r\n            \"Long\"\r\n         ],\r\n         \"defaultValue\":\"Collapsed\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"{{storeCompanyStatus}}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Customer|Statuses\",\r\n         \"name\":\"Customer.OrganizationDefaultStatus\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"{{storeCustomerStatus}}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Customer|Statuses\",\r\n         \"name\":\"Customer.ContactDefaultStatus\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.CustomerOrderNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.PaymentInNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.ShipmentNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes|Quotes\",\r\n         \"name\":\"Quotes.QuoteRequestNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes|Quotes\",\r\n         \"name\":\"Quotes.EnableQuotes\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.EnableTracking\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleTagManagerId\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleAnalyticsTrackingId\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.CreateECommerceTransaction\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.ReverseECommerceTransaction\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Return\",\r\n         \"groupName\":\"Return|Return\",\r\n         \"name\":\"Return.ReturnNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions|Subscriptions\",\r\n         \"name\":\"Subscription.EnableSubscriptions\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions|Subscriptions\",\r\n         \"name\":\"Subscription.SubscriptionNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabled\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabledForAnonymous\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|Product Reviews\",\r\n         \"name\":\"CustomerReviews.CanSubmitReviewWhenHasOrder\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"Average\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews|General\",\r\n         \"name\":\"CustomerReviews.Calculation.Method\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            \"Average\",\r\n            \"Wilson\"\r\n         ],\r\n         \"defaultValue\":\"Average\",\r\n         \"isDictionary\":false\r\n      }\r\n   ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/stores",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get pricelistId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"   pm.collectionVariables.set(\"pricelistId\", jsonData.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"productPrices\":[],\"assignments\":[],\"name\":\"TestPriceListPostman\",\"currency\":\"USD\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/pricelists",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelistAssignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"pricelistAssignmentId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"storeId\": null,\r\n  \"pricelistId\": \"{{pricelistId}}\",\r\n  \"pricelist\": null,\r\n  \"name\": \"TestPricelistAssignmentPostman\",\r\n  \"description\": null,\r\n  \"priority\": 1,\r\n  \"startDate\": null,\r\n  \"endDate\": null,\r\n  \"dynamicExpression\": {\r\n    \"all\": true,\r\n    \"not\": false,\r\n    \"id\": \"PriceConditionTree\",\r\n    \"children\": [\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockPricingCondition\",\r\n        \"children\": []\r\n      }\r\n    ]\r\n  },\r\n  \"outerId\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null,\r\n  \"$promise\": {},\r\n  \"$resolved\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/assignments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create role organization mainainer",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Organization maintainer\",\r\n  \"permissions\": [\r\n    {\r\n      \"id\": \"storefront:user:view\",\r\n      \"name\": \"storefront:user:view\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"storefront:user:create\",\r\n      \"name\": \"storefront:user:create\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"storefront:organization:view\",\r\n      \"name\": \"storefront:organization:view\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"storefront:user:delete\",\r\n      \"name\": \"storefront:user:delete\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"storefront:organization:edit\",\r\n      \"name\": \"storefront:organization:edit\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"storefront:user:edit\",\r\n      \"name\": \"storefront:user:edit\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"storefront:user:invite\",\r\n      \"name\": \"storefront:user:invite\",\r\n      \"moduleId\": null,\r\n      \"groupName\": null,\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"xapi:my_organization:edit\",\r\n      \"name\": \"xapi:my_organization:edit\",\r\n      \"moduleId\": null,\r\n      \"groupName\": \"Xapi\",\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    },\r\n    {\r\n      \"id\": \"platform:security:loginOnBehalf\",\r\n      \"name\": \"platform:security:loginOnBehalf\",\r\n      \"moduleId\": null,\r\n      \"groupName\": \"Platform\",\r\n      \"assignedScopes\": [],\r\n      \"availableScopes\": []\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/platform/security/roles",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"platform",
												"security",
												"roles"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Auth token [ID]",
							"item": [
								{
									"name": "Expired token > Run mutation with required token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"C301997 Expired token > Run mutation with required token\", function () {\r",
													"      var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.be.not.null;\r",
													"    pm.expect(jsonData.errors[0].message).to.include(\"AuthorizationError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expired token > Run query with required token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"C301998 Expired token > Run query with required token\", function () {\r",
													"      var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.not.empty;\r",
													"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact ( $id: String!) {\r\n    contact (id: $id) {\r\n  id\r\n    dynamicProperties\r\n    {\r\n      dictionaryItem\r\n      {\r\n       id\r\n      label\r\n      }\r\n      name\r\n      value\r\n    }\r\n  }\r\n    }\r\n",
												"variables": "{\r\n  \"id\": \"{{contactId2}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove token > Run mutations",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"C301999 Remove token > Run mutations\", function () {\r",
													"      var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.include(\"AuthorizationError\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove token > Run query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"C302000 Remove token > Run query\", function () {\r",
													"      var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.not.empty;\r",
													"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact ( $id: String!) {\r\n    contact (id: $id) {\r\n  id\r\n    dynamicProperties\r\n    {\r\n      dictionaryItem\r\n      {\r\n       id\r\n      label\r\n      }\r\n      name\r\n      value\r\n    }\r\n  }\r\n    }\r\n",
												"variables": "{\r\n  \"id\": \"{{contactId2}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.cookies.clear()"
										]
									}
								}
							]
						},
						{
							"name": "New Customer Registration [ID]",
							"item": [
								{
									"name": "Main logic",
									"item": [
										{
											"name": "Customer registration",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C340953 customer registered\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.true;\r",
															"    pm.expect(jsonData.data.requestRegistration.result.errors).to.be.empty;\r",
															"});\r",
															"pm.test(\"Check Customer status (contact and user)\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.requestRegistration.contact.status).to.be.eql(pm.collectionVariables.get(\"storeCustomerStatus\"));\r",
															"    pm.expect(jsonData.data.requestRegistration.account.status).to.be.eql(pm.collectionVariables.get(\"storeCustomerStatus\"));\r",
															"});\r",
															"\r",
															"pm.test(\"Set all variables\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"/* Contact information */\r",
															"pm.collectionVariables.set(\"firstName1\",jsonData.data.requestRegistration.contact.firstName);\r",
															"pm.collectionVariables.set(\"lastName1\",jsonData.data.requestRegistration.contact.lastName);\r",
															"pm.collectionVariables.set(\"contactId1\",jsonData.data.requestRegistration.contact.id);\r",
															"pm.collectionVariables.set(\"phoneNumber1\",jsonData.data.requestRegistration.contact.phoneNumber);\r",
															"pm.collectionVariables.set(\"middleName1\",jsonData.data.requestRegistration.contact.middleName);\r",
															"pm.collectionVariables.set(\"city1\",jsonData.data.requestRegistration.contact.address.city);\r",
															"\r",
															"\r",
															"\r",
															"/* User information */\r",
															"pm.collectionVariables.set(\"userName1\",jsonData.data.requestRegistration.account.username);\r",
															"pm.collectionVariables.set(\"userId1\",jsonData.data.requestRegistration.account.id);\r",
															"pm.collectionVariables.set(\"customerEmail1\",jsonData.data.requestRegistration.account.email);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      middleName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n      birthdate\r\n     \r\n      address{\r\n          city\r\n          countryName\r\n          line1\r\n          regionName\r\n      }\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n        description\r\n        parameter\r\n        code\r\n    }\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\",\r\n      \"middleName\":\"{{$randomFirstName}}\",\r\n      \"birthdate\":\"{{date1}}\",\r\n      \"address\":{\r\n\"addressType\": 2,\r\n\"city\": \"{{$randomCity}}\",\r\n\"countryCode\": \"USA\",\r\n\"countryName\": \"United States\",\r\n\"email\": \"alivemenone@gmail.com\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\",\r\n\"line1\": \"1888, colgate dr\",\r\n\"name\": \"Steven Woodward 1888, colgate dr Thousand oaks California 91360 United States\",\r\n\"postalCode\": \"91360\",\r\n\"regionId\": \"CA\",\r\n\"regionName\": \"California\"\r\n},\r\n\"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Decimal_0_0_0\",\r\n          \"value\": {{decimal1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_0_0\",\r\n          \"value\": \"{{html1}}\"\r\n        },         \r\n            {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": {{int1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": {{int2}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_0_0_0\",\r\n          \"value\": {{int3}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"{{html3}}\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"{{html1}}\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"{{html2}}\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Boolean_0_0_0\",\r\n          \"value\": {{bool1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_DateTime_0_0_0\",\r\n          \"value\": \"{{data1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": {{decimal2}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": {{decimal3}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_0_0\",\r\n          \"value\": \"{{long1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_0\",\r\n          \"value\": \"{{short1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Image_0_0_0\",\r\n          \"value\": \"{{image}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_1_0\",\r\n          \"value\": \"{{long2}}\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_1\",\r\n          \"value\": \"{{short2}}\"          \r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"{{short3}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n         \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"{{short6}}\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"{{short4}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n          {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"{{short5}}\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n       {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"{{short7}}\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"{{short8}}\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"{{short12}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"{{short13}}\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"{{short14}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_1\",\r\n          \"value\": \"{{short15}}\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        }\r\n  \t]\r\n      \r\n      \r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{userName1}}\",\r\n    \"password\": \"{{userName1}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index contact",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check created contact and user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C340942 check created user and contact\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact.id).to.be.eql(pm.collectionVariables.get(\"contactId1\"));\r",
															"    pm.expect(jsonData.data.contact.firstName).to.be.eql(pm.collectionVariables.get(\"firstName1\"));\r",
															"    pm.expect(jsonData.data.contact.lastName).to.be.eql(pm.collectionVariables.get(\"lastName1\"));\r",
															"    pm.expect(jsonData.data.contact.phones[0]).to.be.eql(pm.collectionVariables.get(\"phoneNumber1\"))\r",
															"    pm.expect(jsonData.data.contact.birthDate).to.be.eql(pm.collectionVariables.get(\"date1\"))\r",
															"    pm.expect(jsonData.data.contact.middleName).to.be.eql(pm.collectionVariables.get(\"middleName1\"))\r",
															"\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].id).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].userName).to.be.eql(pm.collectionVariables.get(\"userName1\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C342061 check email\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact.emails[0]).to.be.eql(pm.collectionVariables.get(\"customerEmail1\"));\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].email).to.be.eql(pm.collectionVariables.get(\"customerEmail1\"));\r",
															"});\r",
															"pm.test(\"C343369 check address\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact.addresses.items[0].city).to.be.eql(pm.collectionVariables.get(\"city1\"))\r",
															"});\r",
															"\r",
															"pm.test(\"C341491 check contact status\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact.status).to.be.eql(pm.collectionVariables.get(\"storeCustomerStatus\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C343368 check dynamic properties\", function(){\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C341029 check user creator\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].createdBy).to.be.eql(pm.environment.get(\"adminUserName\"));\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C341490 check user storeId\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].storeId).to.be.eql(pm.collectionVariables.get(\"storeId\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 3000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\ncontact (id: \"{{contactId1}}\") {\r\n    firstName\r\n    lastName\r\n    id\r\n    emails\r\n    status\r\n    phones\r\n    birthDate\r\n    middleName\r\n    addresses{\r\n        items{\r\n            city\r\n        }\r\n        }\r\n    securityAccounts{\r\n        id\r\n        userName\r\n        createdBy\r\n        email\r\n        storeId\r\n    }\r\n    dynamicProperties{\r\n        name\r\n        value\r\n    }\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    \r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C341032 Get user token\", function () {\r",
															"   \r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.access_token).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "grand_type",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{url}}/connect/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check email notification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C342105 registration notification sent\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"customerEmail1\"));\r",
															"\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"notificationType\": \"RegistrationEmailNotification\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/notifications/journal",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"notifications",
														"journal"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Validation",
									"item": [
										{
											"name": "Owner",
											"item": [
												{
													"name": "Empty firstName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"C340937 error 'empty First Name' \", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"'First Name' must not be empty.\");\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"NotEmptyValidator\");\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n        description\r\n        parameter\r\n        code\r\n    }\r\n    }\r\n\r\n}\r\n}",
																"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Empty lastName",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"C340938 error 'empty Last Name'\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"'Last Name' must not be empty.\");\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"NotEmptyValidator\");\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          parameter\r\n          code\r\n      }\r\n    }\r\n\r\n}\r\n}",
																"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomfirstName}}\",\r\n      \"lastName\": \"\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Auth",
											"item": [
												{
													"name": "Username",
													"item": [
														{
															"name": "Empty",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C340939 error 'NotEmptyValidator: 'User Name' must not be empty' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"'User Name' must not be empty.\");\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"NotEmptyValidator\");\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          parameter\r\n          code\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Duplicated",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341018 error 'DuplicateUserName: Username is already taken' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.not.empty;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"DuplicateUserName\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description   \r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{userName1}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Invalid format: \".\"",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"Customer is not registered, Incorrect userName \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.not.empty;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"Incorrect username\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"postman.setNextRequest();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \".\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Email",
													"item": [
														{
															"name": "Empty",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C340949 error 'NotEmptyValidator: 'Email' must not be empty' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"\r",
																			"pm.expect(pm.response.text()).to.include(\"'Email' must not be empty.\");\r",
																			"pm.expect(pm.response.text()).to.include(\"Invalid email format\");\r",
																			"pm.expect(pm.response.text()).to.include(\"NotEmptyValidator\");\r",
																			"pm.expect(pm.response.text()).to.include(\"PredicateValidator\");  \r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Duplicated",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341026 error 'DuplicateEmail: Email is already taken' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.not.empty;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"DuplicateEmail\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{customerEmail1}}\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Invalid format: without \"@\"",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341027 error 'PredicateValidator: Invalid email format' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Invalid email format in the account\");\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"PredicateValidator\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"text\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Invalid format: only \"@\"",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341826 error 'PredicateValidator: Invalid email format' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Invalid email format in the account\");\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"PredicateValidator\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"@\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Invalid format: \"text@\"",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341827 error 'PredicateValidator: Invalid email format' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Invalid email format in the account\");\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"PredicateValidator\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"text@\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Invalid format: \"@text\"",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341828 error 'PredicateValidator: Invalid email format' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Invalid email format in the account\");\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"PredicateValidator\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"@text\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Invalid format: \"text@.text\"",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"\r",
																			"pm.test(\"C341829 error 'PredicateValidator: Invalid email format' \", function(){\r",
																			"var jsonData = pm.response.json();\r",
																			"\r",
																			"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Invalid email format in the account\");\r",
																			"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"PredicateValidator\");\r",
																			"\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "graphql",
																	"graphql": {
																		"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																		"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"{{storeId}}\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"text@.text\"\r\n  }\r\n  }\r\n\r\n}"
																	}
																},
																"url": {
																	"raw": "{{url}}/graphql",
																	"host": [
																		"{{url}}"
																	],
																	"path": [
																		"graphql"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "StoreId",
											"item": [
												{
													"name": "Empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"C347140 error 'Store  has not been found' \", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Store  has not been found\");\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"Store not found\");\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n   requestRegistration(command:$command){\r\n    contact{\r\n      firstName\r\n      lastName\r\n      id\r\n      status\r\n      createdBy\r\n      phoneNumber\r\n    }\r\n\r\naccount{\r\n  id\r\n  username\r\n  email\r\n  status\r\n  createdBy\r\n}\r\nresult{\r\n      succeeded\r\n      errors{\r\n          description\r\n          code\r\n          parameter\r\n      }\r\n    }\r\n\r\n}\r\n}",
																"variables": "{\r\n\"command\": {\r\n  \"storeId\":\"\",\r\n  \"contact\":{\r\n      \"firstName\": \"{{$randomFirstName}}\",\r\n      \"lastName\": \"{{$randomLastName}}\",\r\n      \"phoneNumber\":\"{{$randomPhoneNumber}}\"\r\n  },\r\n  \"account\": {\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"email\":\"{{$randomEmail}}\"\r\n  }\r\n  }\r\n\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete store, contact and user",
									"item": [
										{
											"name": "Delete user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"deleteUsers\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName1}}\"\n]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Check delete contact\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "New Company Registration [ID]",
							"item": [
								{
									"name": "Main logic",
									"item": [
										{
											"name": "Company registration with email in address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C340934 company registered\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.true;\r",
															"    pm.expect(jsonData.data.requestRegistration.result.errors).to.be.empty;\r",
															"    pm.expect(jsonData.data.requestRegistration.organization).to.be.not.empty;\r",
															"    pm.expect(jsonData.data.requestRegistration.contact).to.be.not.empty;\r",
															"    pm.expect(jsonData.data.requestRegistration.account).to.be.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Check status (organization, contact and user)\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.requestRegistration.contact.status).to.be.eql(pm.collectionVariables.get(\"storeCustomerStatus\"));\r",
															"    pm.expect(jsonData.data.requestRegistration.account.status).to.be.eql(pm.collectionVariables.get(\"storeCustomerStatus\"));\r",
															"    pm.expect(jsonData.data.requestRegistration.organization.status).to.be.eql(pm.collectionVariables.get(\"storeCompanyStatus\"));\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Set all variables\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"/* Contact information */\r",
															"pm.collectionVariables.set(\"contactId1\",jsonData.data.requestRegistration.contact.id);\r",
															"\r",
															"/* User information */\r",
															"pm.collectionVariables.set(\"userName1\",jsonData.data.requestRegistration.account.username);\r",
															"pm.collectionVariables.set(\"userId1\",jsonData.data.requestRegistration.account.id);\r",
															"pm.collectionVariables.set(\"customerEmail1\",jsonData.data.requestRegistration.account.email);\r",
															"\r",
															"/*Company information*/\r",
															"pm.collectionVariables.set(\"organizationName1\",jsonData.data.requestRegistration.organization.name);\r",
															"pm.collectionVariables.set(\"organizationId1\",jsonData.data.requestRegistration.organization.id);\r",
															"pm.collectionVariables.set(\"organizationDescription1\",jsonData.data.requestRegistration.organization.description);\r",
															"pm.collectionVariables.set(\"companyEmail1\",jsonData.data.requestRegistration.organization.address.email);\r",
															"pm.collectionVariables.set(\"city1\",jsonData.data.requestRegistration.organization.address.city);\r",
															"\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n    requestRegistration(command:$command){\r\n        organization{\r\n            name\r\n            id\r\n            description\r\n            status\r\n            createdBy\r\n            address{\r\n                city\r\n                countryName\r\n                email\r\n            }\r\n            dynamicProperties{\r\n                name\r\n                value\r\n            }\r\n            }\r\n            \r\n            contact{\r\n            firstName\r\n            lastName\r\n            id\r\n            status\r\n            createdBy\r\n        }\r\n\r\n        account{\r\n            id\r\n            username\r\n            email\r\n            status\r\n            createdBy\r\n            \r\n            }\r\n\r\n        \r\n\r\n        result{\r\n            succeeded\r\n            errors{\r\n                description\r\n                code\r\n                parameter\r\n            }\r\n        }\r\n    \r\n  }\r\n}\r\n",
														"variables": "{\r\n\"command\": {\r\n    \"storeId\":\"{{storeId}}\",\r\n    \"organization\": {\r\n        \"name\": \"{{$randomCompanyName}}\",\r\n        \"description\": \"{{comment}}\",\r\n        \"address\": {\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"countryCode\":\"{{$randomCountryCode}}\",\r\n            \"email\":\"{{$randomEmail}}\",\r\n            \"countryName\":\"{{$randomCountry}}\",\r\n            \"firstName\":\"first121\",\r\n            \"lastName\":\"las4244t\",\r\n            \"line1\":\"line1\",\r\n            \"postalCode\":\"123654\"\r\n    \r\n        },\r\n        \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Organization_Decimal_0_0_0\",\r\n          \"value\":{{decimal1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_0_0\",\r\n          \"value\": \"{{html1}}\"\r\n        }, \r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_0_0_0\",\r\n          \"value\":{{int1}}\r\n        },          \r\n            {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\":{{int2}}\r\n        },\r\n            \r\n        {\r\n            \"name\":\"CustomerModule_Organization_Boolean_0_0_0\",\r\n            \"value\":{{bool1}}\r\n        },\r\n        {\r\n            \"name\":\"CustomerModule_Organization_DateTime_0_0_0\",\r\n            \"value\":\"{{data1}}\"\r\n        },\r\n        {\r\n            \"name\":\"CustomerModule_Organization_ShortText_0_0_0\",\r\n            \"value\":\"{{short1}}\"\r\n        },\r\n        {\r\n            \"name\":\"CustomerModule_Organization_ShortText_0_0_0\",\r\n            \"value\":\"{{long1}}\"\r\n        },\r\n        {\r\n            \"name\":\"CustomerModule_Organization_Image_0_0_0\",\r\n            \"value\":\"{{image}}\"\r\n        }\r\n  \t]\r\n    },\r\n    \"contact\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n        },\r\n    \"account\": {\r\n        \"username\": \"{{$randomUserName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"password\":\"{{$randomPassword}}\"\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index Contact, Company",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}}\", \"{{organizationId1}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check  created company",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C341492 check created company\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.organization.id).to.be.eql(pm.collectionVariables.get(\"organizationId1\"));\r",
															"    pm.expect(jsonData.data.organization.name).to.be.eql(pm.collectionVariables.get(\"organizationName1\"));\r",
															"    pm.expect(jsonData.data.organization.ownerId).to.be.eql(pm.collectionVariables.get(\"contactId1\"));\r",
															"    pm.expect(jsonData.data.organization.description).to.be.eql(pm.collectionVariables.get(\"comment\"));\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C343367 check addresses\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.organization.addresses.items[0].city).to.be.eql(pm.collectionVariables.get(\"city1\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C343366 Check dynamic properties\", function(){\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															";\r",
															"   \r",
															"}); \r",
															"\r",
															"\r",
															"pm.test(\"C341851 check email\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.organization.emails[0]).to.be.eql(pm.collectionVariables.get(\"companyEmail1\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C341497 check organization status\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.organization.status).to.be.eql(pm.collectionVariables.get(\"storeCompanyStatus\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 3000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n        id\n        ownerId\n        description\n        name\n        emails\n        status\n        addresses{\n            items{\n                city\n                countryName\n                }\n        \n        }\n        dynamicProperties{\n            name\n            value\n            valueType\n        }\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId1}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check created contact and user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C343339 check created user and contact\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    /*check contact*/\r",
															"    pm.expect(jsonData.data.contact.id).to.be.eql(pm.collectionVariables.get(\"contactId1\"));\r",
															"    pm.expect(jsonData.data.contact.emails[0]).to.be.eql(pm.collectionVariables.get(\"customerEmail1\"));\r",
															"    pm.expect(jsonData.data.contact.status).to.be.eql(pm.collectionVariables.get(\"storeCustomerStatus\"));\r",
															"\r",
															"    /*check user*/\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].id).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].email).to.be.eql(pm.collectionVariables.get(\"customerEmail1\"));\r",
															"    pm.expect(jsonData.data.contact.securityAccounts[0].storeId).to.be.eql(pm.collectionVariables.get(\"storeId\"));\r",
															"\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 3000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\ncontact (id: \"{{contactId1}}\") {\r\n    firstName\r\n    lastName\r\n    id\r\n    emails\r\n    status\r\n    phones\r\n    addresses{\r\n        totalCount\r\n        }\r\n    securityAccounts{\r\n        id\r\n        userName\r\n        createdBy\r\n        email\r\n        storeId\r\n        roles{name id}\r\n    }\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check email notification (Company)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C341485 registration notification sent\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"companyEmail1\"));\r",
															"\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"notificationType\": \"RegisterCompanyEmailNotification\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/notifications/journal",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"notifications",
														"journal"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"deleteUsers\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName1}}\"\n]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check delete contact\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete organization",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/organizations?ids={{organizationId1}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"organizations"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{organizationId1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Company registration without email in address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Company registered\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.true;\r",
															"    pm.expect(jsonData.data.requestRegistration.result.errors).to.be.empty;\r",
															"    pm.expect(jsonData.data.requestRegistration.organization).to.be.not.empty;\r",
															"    pm.expect(jsonData.data.requestRegistration.contact).to.be.not.empty;\r",
															"    pm.expect(jsonData.data.requestRegistration.account).to.be.not.empty;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Set all variables\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"/* Contact information */\r",
															"pm.collectionVariables.set(\"contactId1\",jsonData.data.requestRegistration.contact.id);\r",
															"\r",
															"/* User information */\r",
															"pm.collectionVariables.set(\"userName1\",jsonData.data.requestRegistration.account.username);\r",
															"pm.collectionVariables.set(\"userId1\",jsonData.data.requestRegistration.account.id);\r",
															"pm.collectionVariables.set(\"customerEmail1\",jsonData.data.requestRegistration.account.email);\r",
															"\r",
															"/*Company information*/\r",
															"pm.collectionVariables.set(\"organizationName1\",jsonData.data.requestRegistration.organization.name);\r",
															"pm.collectionVariables.set(\"organizationId1\",jsonData.data.requestRegistration.organization.id);\r",
															"pm.collectionVariables.set(\"organizationDescription1\",jsonData.data.requestRegistration.organization.description);\r",
															"pm.collectionVariables.set(\"companyEmail1\",jsonData.data.requestRegistration.account.email);\r",
															"\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n    requestRegistration(command:$command){\r\n        organization{\r\n            name\r\n            id\r\n            description\r\n            status\r\n            createdBy\r\n            address{\r\n                city\r\n                countryName\r\n                email\r\n            }\r\n            dynamicProperties{\r\n                name\r\n                value\r\n            }\r\n            }\r\n            \r\n            contact{\r\n            firstName\r\n            lastName\r\n            id\r\n            status\r\n            createdBy\r\n        }\r\n\r\n        account{\r\n            id\r\n            username\r\n            email\r\n            status\r\n            createdBy\r\n            }\r\n\r\n        \r\n\r\n        result{\r\n            succeeded\r\n            errors{\r\n                parameter\r\n                description\r\n                code\r\n            }\r\n        }\r\n    \r\n  }\r\n}\r\n",
														"variables": "{\r\n\"command\": {\r\n    \"storeId\":\"{{storeId}}\",\r\n    \"organization\": {\r\n        \"name\": \"{{$randomCompanyName}}\",\r\n        \"description\": \"{{comment}}\",\r\n        \"address\": {\r\n            \"city\": \"{{$randomCity}}\",\r\n            \"countryCode\":\"{{$randomCountryCode}}\",\r\n            \"countryName\":\"{{$randomCountry}}\",\r\n            \"firstName\":\"first121\",\r\n            \"lastName\":\"las4244t\",\r\n            \"line1\":\"line1\",\r\n            \"postalCode\":\"123654\"\r\n    \r\n        }\r\n    },\r\n    \"contact\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n        },\r\n    \"account\": {\r\n        \"username\": \"{{$randomUserName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"password\":\"{{$randomPassword}}\"\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index Contact, Company Copy",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}}\", \"{{organizationId1}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check email notification (Company)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C343365 registration notification sent\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"companyEmail1\"));\r",
															"\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 3000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"notificationType\": \"RegisterCompanyEmailNotification\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/notifications/journal",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"notifications",
														"journal"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Validation",
									"item": [
										{
											"name": "Organization Name",
											"item": [
												{
													"name": "Empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"C340936 error 'empty organization Name' \", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"'Name' must not be empty.\");\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"NotEmptyValidator\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n    requestRegistration(command:$command){\r\n        organization{\r\n            name\r\n            id\r\n            description\r\n            status\r\n            createdBy\r\n            }\r\n            \r\n            contact{\r\n            firstName\r\n            lastName\r\n            id\r\n            status\r\n            createdBy\r\n        }\r\n\r\n        account{\r\n            id\r\n            username\r\n            email\r\n            status\r\n            createdBy\r\n            }\r\n\r\n        \r\n\r\n        result{\r\n            succeeded\r\n            errors{\r\n                description\r\n                code\r\n                parameter\r\n            }\r\n        }\r\n  }\r\n}\r\n",
																"variables": "{\r\n\"command\": {\r\n    \"storeId\":\"{{storeId}}\",\r\n    \"organization\": {\r\n        \"name\": \"\",\r\n        \"description\": \"{{long2}}\"\r\n        },\r\n    \"contact\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n        },\r\n    \"account\": {\r\n        \"username\": \"{{$randomUserName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"password\":\"{{$randomPassword}}\"\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "StoreId",
											"item": [
												{
													"name": "Empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"C340935 error 'Store  has not been found' \", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.expect(jsonData.data.requestRegistration.contact).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.account).to.be.null;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.succeeded).to.be.false;\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].description).to.be.eql(\"Store  has not been found\");\r",
																	"pm.expect(jsonData.data.requestRegistration.result.errors[0].code).to.be.eql(\"Store not found\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation requestRegistration($command: InputRequestRegistrationType!){\r\n    requestRegistration(command:$command){\r\n        organization{\r\n            name\r\n            id\r\n            description\r\n            status\r\n            createdBy\r\n            }\r\n            \r\n            contact{\r\n            firstName\r\n            lastName\r\n            id\r\n            status\r\n            createdBy\r\n        }\r\n\r\n        account{\r\n            id\r\n            username\r\n            email\r\n            status\r\n            createdBy\r\n            }\r\n\r\n        \r\n\r\n        result{\r\n            succeeded\r\n            errors{\r\n                description\r\n                code\r\n                parameter\r\n            }\r\n        }\r\n  }\r\n}\r\n",
																"variables": "{\r\n\"command\": {\r\n    \"storeId\":\"\",\r\n    \"organization\": {\r\n        \"name\": \"{{$randomCompanyName}}\",\r\n        \"description\": \"{{long2}}\"\r\n        },\r\n    \"contact\": {\r\n        \"firstName\": \"{{$randomFirstName}}\",\r\n        \"lastName\": \"{{$randomLastName}}\"\r\n        },\r\n    \"account\": {\r\n        \"username\": \"{{$randomUserName}}\",\r\n        \"email\": \"{{$randomEmail}}\",\r\n        \"password\":\"{{$randomPassword}}\"\r\n        }\r\n    }\r\n  }\r\n\r\n\r\n  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Delete  organization, contact and user",
									"item": [
										{
											"name": "Delete user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"deleteUsers\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName1}}\"\n]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check delete contact\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete organization",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/organizations?ids={{organizationId1}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"organizations"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{organizationId1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Anon",
							"item": [
								{
									"name": "Organization Anonymous [ID]",
									"item": [
										{
											"name": "Create Organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261610 Organization created\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"organizationId\", jsonData.data.createOrganization.id);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"Organization_Anonymous\",\n\"addresses\": []\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261593 Access denied, User not assigned to organization \", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261611 Access denied, User not assigned to organization\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"authorizationErrorAnonim\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n\t\t\t\t\t\t\t\t\t\t}\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{organizationId}}\",\n\"name\": \"OrganizationxApiReg_Updat2e1\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Contact Anonymous [ID]",
									"item": [
										{
											"name": "Сreate Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261614 Contact created\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"Contact22\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\"\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261594 Access denied\", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n    dynamicProperties\n    {\n      dictionaryItem\n      {\n       id\n      label\n      }\n      name\n      value\n    }\n  }\n    }\n",
														"variables": "{\n  \"id\": \"{{contactId2}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Try to update Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261609 Access denied\", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\naddresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }}\n}\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{contactId2}}\",\n\"name\": \"Contact22\",\n\"memberType\": \"Contact22\",\n\"addresses\": [],\n\"fullName\": \"Contact22\",\n\"firstName\": \"Contact22\",\n\"lastName\": \"Contact22\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Try to update Contact address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261599 Access denied\", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
															"});\r",
															"\r",
															"  "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId2}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 2221\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemyuenone@gmail.com\",\r\n        \"firstName\": \"Steven\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Try to delete Сontact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261619 Access denied\", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"authorizationErrorAnonim\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "GetToken [ID]",
									"item": [
										{
											"name": "Get admin token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    \r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set admin token\", function () {\r",
															"   \r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												},
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "grand_type",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "grant_type=password&scope=offline_access&username={{adminUserName}}&password={{adminPassword}}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{url}}/connect/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Organization [admin]",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/organizations?ids={{organizationId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"organizations"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{organizationId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "CRUD by Anonymous",
									"item": [
										{
											"name": "Create user (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"createUser (without token)\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.createUser.succeeded).to.equal(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
														"variables": "{\n\"command\": {\n\"applicationUser\": { \n//\"id\":\"{{userId3}}\",      \n\"createdBy\": \"anonimAutoTest\",\n\"email\": \"{{$randomEmail}}\",\n\"password\":\"{{$randomPassword}}\",\n\"userName\": \"{{userName3}}\",\n\"userType\": \"Customer\",\n\"storeId\":\"{{storeId}}\"\n}\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add user_3 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
														"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"Password1\",\n    \"userName\": \"{{userName3}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get user (without token)\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"  //  pm.expect(jsonData.errors).to.be.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
															"  });\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.cookies.clear()"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.cookies.clear()"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query user(\n  $id: String\n  $userName: String\n  $email: String\n  $loginProvider: String\n  $providerKey: String\n) {\n  user(\n    id: $id\n    userName: $userName\n    email: $email\n    loginProvider: $loginProvider\n    providerKey: $providerKey\n  ) {\n    id\n    isAdministrator\n        userName\n    email\n    storeId\n    userName\n    userType\n    roles{\n      id\n      name\n      description\n      permissions\n    }\n  }\n}",
														"variables": "{\n\"id\": \"\",\n\"userName\": \"{{userName3}}\",\n\"loginProvider\":\"\",\n\"providerKey\": \"\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update user (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"updateUser (without token)\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"   // pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"forbiddenError\"));\r",
															"  });\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.cookies.clear()"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateUser ($command: InputUpdateUserType!) {\n    updateUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "\n{\n\"command\":{\n   \"applicationUser\":{\n\"userType\": \"Customer\",\n\"roles\": [],\n\"id\": \"{{userId3}}\",\n\"userName\": \"{{userName3}}\",\n\"email\": \"testqa3@mail.com\",\n\"securityStamp\": \"RandomData\",\n\"storeId\":\"{{storeId}}\"\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"DeleteUser\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"  //  pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(pm.collectionVariables.get(\"authorizationErrorAnonim\"));\r",
															"  });\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName3}}\"\n]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"deleteUsers\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.cookies.clear()"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.cookies.clear()"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName3}}\"\n]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "User",
							"item": [
								{
									"name": "Contact User [ID]",
									"item": [
										{
											"name": "Prepare",
											"item": [
												{
													"name": "Delete users [admin]",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName3}}\"\r\n    ]\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Organization [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set organizationId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign\",\n\"addresses\": []\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Contact_1 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add User_1 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"createUser = true\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"true\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
																"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"Password1\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check added User_1 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check user\", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"pm.test(\"Set userId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId1\", jsonData.data.contact.securityAccounts.id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for User_1 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password=Password1",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "User",
											"item": [
												{
													"name": "Create Contact_2 by User_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
																	"});\r",
																	"pm.test(\"C261613 User_1 can create Contact_2\", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.createContact).to.be.not.empty;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index Contacts [admin]",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}},{{contactId2}}\"]}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index Organization [admin]",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId1}}\"]}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Contact_1 by User_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261591 Get user's contact by contact id. User assigned to contact\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.contact.fullName).to.be.not.empty;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n        organizationId\r\n        \r\n    }\r\n    }\r\n\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Contact_2 by User_1 (in the same organization)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261677 Get Contact_2, User_1 not assigned to contact. Contact in the same organization \", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.contact.fullName).to.be.not.empty;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        organizationId\r\n        \r\n    }\r\n    }\r\n\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Contact_2 address by User_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261678 Address updated, User not assigned to contact. Contacts in the same organization \", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.updateMemberAddresses.addresses).to.be.not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"  "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId2}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Steven\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Contact_2 by User_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261679 Name updated, User not assigned to contact. User in the same organization \", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.updateContact.fullName).to.be.equal(\"Contact22\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"  \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"id\": \"{{contactId2}}\",\r\n    \"name\": \"UserA\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [],\r\n    \"fullName\": \"Contact22\",\r\n    \"firstName\": \"Contact22\",\r\n    \"lastName\": \"Contact22\",\r\n    \"organizations\": \"{{organizationId1}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Try to delete Contact_2 by User_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Access denied, User in the same organization. No permission\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check delete [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261615 Contact_2 not deleted by User_1(without permission and in the same organization)\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.contact.fullName).to.not.empty;\r",
																	"});\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add role \"organization manager\" [admin]",
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\"description\":\"1\",\"permissions\":[{\"id\":\"customer:read\",\"name\":\"customer:read\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:create\",\"name\":\"customer:create\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:access\",\"name\":\"customer:access\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:update\",\"name\":\"customer:update\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:delete\",\"name\":\"customer:delete\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[]},{\"id\":\"xapi:my_organization:edit\",\"name\":\"xapi:my_organization:edit\",\"moduleId\":null,\"groupName\":\"Xapi\",\"assignedScopes\":[],\"availableScopes\":[],\"$selected\":false}],\"userRoles\":null,\"id\":\"{{roleId}}\",\"name\":\"{{roleName}}\",\"normalizedName\":\"{{roleNormName}}\",\"concurrencyStamp\":\"163d200c-069a-4df2-bf2e-a3defd22d719\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/platform/security/roles",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"platform",
																"security",
																"roles"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Contact_3 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId3\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact3\",\n\"memberType\": \"Contac3\",\n\"addresses\": [],\n\"fullName\": \"Contact3\",\n\"firstName\": \"Contact3\",\n\"lastName\": \"Contact3\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add User_3 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"createUser = true\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"true\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n    \n        errors {\n            code\n        }\n        succeeded\n    }\n}\n\n",
																"variables": "{\"command\":{\n\"applicationUser\":{\n  \"userType\": \"Customer\",\n  \"roles\": [{   \n           \"name\":\"{{roleName}}\",\n           \"id\":\"{{roleId}}\",\n           \"permissions\":[]\n        }],\n\n  \"storeId\":\"{{storeId}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"userName\":\"{{userName3}}\",\n  \"memberId\":\"{{contactId3}}\",\n  \"password\":\"Password1234\"\n\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check added User_3 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check user\", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"pm.test(\"Set userId3\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId3\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId3}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n      id\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index Contacts [admin]",
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId3}}\"]}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for User_3 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token3\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														},
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName3}}&password=Password1234",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Try to delete Contact_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check delete [admin] Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261618 Contact_2  deleted by User_3 (with permission and in the same organization)\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.contact.fullName).to.be.not.empty;\r",
																	"});\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Contact_3 [User_3]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261604 Contact_3 can update himself\", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.updateContact.fullName).to.be.equal(\"Contact33\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"  \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n        organizationId\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n\"name\": \"Contact3\",\r\n\"memberType\": \"Contact\",\r\n\"addresses\": [],\r\n\"fullName\": \"Contact33\",\r\n\"firstName\": \"Contact3\",\r\n\"lastName\": \"Contact3\",\r\n\"id\": \"{{contactId3}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Contact_3 address [User_3]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261597 Address updated\", function () {\r",
																	"    var data = pm.response.json();\r",
																	" pm.expect(data.data.updateMemberAddresses.addresses).to.be.not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"  "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId3}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Steven\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Organization 2 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set organizationId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"organizationId2\", jsonData.data.createOrganization.id);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign2\",\n\"addresses\": []\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Contact_4  another organization [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId4\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact4\",\n\"memberType\": \"Contac4\",\n\"addresses\": [],\n\"fullName\": \"Contact4\",\n\"firstName\": \"Contact4\",\n\"lastName\": \"Contact4\",\n\"organizations\": \"{{organizationId2}}\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index Contacts [admin]",
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId4}}\"]}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Contact_4 by User_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261608 Access denied, Contact_4 in another organization\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});\r",
																	"\r",
																	"  \r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"id\": \"{{contactId4}}\",\r\n    \"name\": \"UserA\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [],\r\n    \"fullName\": \"Contact44\",\r\n    \"firstName\": \"Contact44\",\r\n    \"lastName\": \"Contact44\",\r\n    \"organizations\": \"{{organizationId2}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Contact_4 address by User_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261598 Access denied, Contact_4 in another organization\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});\r",
																	"\r",
																	"  "
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId4}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Steven\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Contact_4 by User_1 (in the same organization) Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261592 Access denied, User_3 in another organization\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});\r",
																	"\r",
																	"  "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId4}}\") {\r\n        fullName\r\n        id\r\n        organizationId\r\n        \r\n    }\r\n    }\r\n\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Try to delete Contact_4 by User_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Access denied, Contact_4 in another organization\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token3}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId4}}\"\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check delete [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261617 Contact_4  not deleted by User_3 (with permission and not in the same organization)\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.contact.fullName).to.be.not.empty;\r",
																	"});\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId4}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Clear all",
											"item": [
												{
													"name": "Delete users [admin]",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName3}}\"\r\n    ]\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Contact_1 [admin]",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Contact_2 [admin]",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Contact_3 [admin]",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId3}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Contact_4 [admin]",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId4}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete organization [admin]",
													"request": {
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/api/members?ids={{organizationId1}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{organizationId1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete organization  2[admin]",
													"request": {
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/api/members?ids={{organizationId2}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{organizationId2}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Admin delete role",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/platform/security/roles?ids={{roleId}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"platform",
																"security",
																"roles"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{roleId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Organization User [ID]",
									"item": [
										{
											"name": "Delete users [admin]",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Contact_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set contactId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\"\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add User_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n    \n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
														"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check added User_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check user\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Set userId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"userId1\", jsonData.data.contact.securityAccounts.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n        id\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index Contact [admin]",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Token for User_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set Token1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "grand_type",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{url}}/connect/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set organizationId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
															"\r",
															"});\r",
															"pm.test(\"T669348 User can create organization\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.createOrganization).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign1\",\n\"addresses\": []\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index Organization [admin]",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId1}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"T669330 Access denied, User not assigned to organization \", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
															"    console.log(jsonData.errors[0].message);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization {\n  organization(id: \"{{organizationId1}}\") {\n    id\n    name\n    businessCategory\n    description\n    outerId\n    emails\n    groups\n    contacts {\n      items {\n        id\n        name\n        fullName\n        firstName\n        lastName\n        phones\n        securityAccounts {\n          userName\n          email\n          createdDate\n          permissions\n          roles {\n            id\n            description\n            name\n            permissions\n          }\n        }\n      }\n    }\n  }\n}",
														"variables": "{\n  \"id\": \"{{organizationId1}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Organization (without permission, not assigned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"T669339 Access denied, User not assigned to organization and no permission\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
															"    console.log(jsonData.errors[0].message);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\r\n    updateOrganization (command: $command) {\r\n        businessCategory\r\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\r\n            edges {\r\n                cursor\r\n                node {\r\n                    birthDate\r\n                    firstName\r\n                    fullName\r\n                    id\r\n                    lastName\r\n                    memberType\r\n                    middleName\r\n                    name\r\n                    organizationId\r\n                    organizations {\r\n\t\t\t\t\t\t\t\t\t\titems{\r\n                        businessCategory\r\n                        description\r\n                        emails\r\n                        groups\r\n                        id\r\n                        memberType\r\n                        name\r\n                        outerId\r\n                        ownerId\r\n                        parentId\r\n                        phones\r\n                        seoObjectType\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                    }\r\n                    organizationsIds\r\n                    outerId\r\n                    phones\r\n                    securityAccounts {\r\n                        accessFailedCount\r\n                        createdBy\r\n                        createdDate\r\n                        email\r\n                        emailConfirmed\r\n                        id\r\n                        isAdministrator\r\n                        lockoutEnabled\r\n                        lockoutEnd\r\n                        memberId\r\n                        modifiedBy\r\n                        modifiedDate\r\n                        normalizedEmail\r\n                        normalizedUserName\r\n                        passwordExpired\r\n                        permissions\r\n                        phoneNumber\r\n                        phoneNumberConfirmed\r\n                        photoUrl\r\n                        securityStamp\r\n                        storeId\r\n                        twoFactorEnabled\r\n                        userName\r\n                        userType\r\n                    }\r\n                }\r\n            }\r\n            items {\r\n                birthDate\r\n                firstName\r\n                fullName\r\n                id\r\n                lastName\r\n                memberType\r\n                middleName\r\n                name\r\n                organizationId\r\n                organizations {\r\n\t\t\t\t\t\t\t\t\t\titems{\r\n                    businessCategory\r\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\r\n                        totalCount\r\n                    }\r\n                    description\r\n                    emails\r\n                    groups\r\n                    id\r\n                    memberType\r\n                    name\r\n                    outerId\r\n                    ownerId\r\n                    parentId\r\n                    phones\r\n                    seoObjectType\r\n                }}\r\n                organizationsIds\r\n                outerId\r\n                phones\r\n                securityAccounts {\r\n                    accessFailedCount\r\n                    contact {\r\n                        birthDate\r\n                        firstName\r\n                        fullName\r\n                        id\r\n                        lastName\r\n                        memberType\r\n                        middleName\r\n                        name\r\n                        organizationId\r\n                        organizationsIds\r\n                        outerId\r\n                        phones\r\n                    }\r\n                    createdBy\r\n                    createdDate\r\n                    email\r\n                    emailConfirmed\r\n                    id\r\n                    isAdministrator\r\n                    lockoutEnabled\r\n                    lockoutEnd\r\n                    memberId\r\n                    modifiedBy\r\n                    modifiedDate\r\n                    normalizedEmail\r\n                    normalizedUserName\r\n                    passwordExpired\r\n                    permissions\r\n                    phoneNumber\r\n                    phoneNumberConfirmed\r\n                    photoUrl\r\n                    roles {\r\n                        description\r\n                        id\r\n                        name\r\n                        normalizedName\r\n                        permissions\r\n                    }\r\n                    securityStamp\r\n                    storeId\r\n                    twoFactorEnabled\r\n                    userName\r\n                    userType\r\n                }\r\n            }\r\n            pageInfo {\r\n                endCursor\r\n                hasNextPage\r\n                hasPreviousPage\r\n                startCursor\r\n            }\r\n            totalCount\r\n        }\r\n        description\r\n        emails\r\n        groups\r\n        id\r\n        memberType\r\n        name\r\n        outerId\r\n        ownerId\r\n        parentId\r\n        phones\r\n        seoObjectType\r\n    }\r\n}",
														"variables": "{\r\n\"command\": {\r\n\"id\": \"{{organizationId1}}\",\r\n\"name\": \"Organizati\"\r\n}\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Contact_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Contact_1 assigned to organization\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateContact.id).to.eql(pm.collectionVariables.get(\"contactId1\"));\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\norganizationId\naddresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }}\n}\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{contactId1}}\",\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\",\n\"organizations\":\"{{organizationId1}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Organization (without permission, assigned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C328380 Access denied, no permission\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
															"    console.log(jsonData.errors[0].message);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\r\n    updateOrganization (command: $command) {\r\n        businessCategory\r\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\r\n            edges {\r\n                cursor\r\n                node {\r\n                    birthDate\r\n                    firstName\r\n                    fullName\r\n                    id\r\n                    lastName\r\n                    memberType\r\n                    middleName\r\n                    name\r\n                    organizationId\r\n                    organizations {\r\n\t\t\t\t\t\t\t\t\t\titems{\r\n                        businessCategory\r\n                        description\r\n                        emails\r\n                        groups\r\n                        id\r\n                        memberType\r\n                        name\r\n                        outerId\r\n                        ownerId\r\n                        parentId\r\n                        phones\r\n                        seoObjectType\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                    }\r\n                    organizationsIds\r\n                    outerId\r\n                    phones\r\n                    securityAccounts {\r\n                        accessFailedCount\r\n                        createdBy\r\n                        createdDate\r\n                        email\r\n                        emailConfirmed\r\n                        id\r\n                        isAdministrator\r\n                        lockoutEnabled\r\n                        lockoutEnd\r\n                        memberId\r\n                        modifiedBy\r\n                        modifiedDate\r\n                        normalizedEmail\r\n                        normalizedUserName\r\n                        passwordExpired\r\n                        permissions\r\n                        phoneNumber\r\n                        phoneNumberConfirmed\r\n                        photoUrl\r\n                        securityStamp\r\n                        storeId\r\n                        twoFactorEnabled\r\n                        userName\r\n                        userType\r\n                    }\r\n                }\r\n            }\r\n            items {\r\n                birthDate\r\n                firstName\r\n                fullName\r\n                id\r\n                lastName\r\n                memberType\r\n                middleName\r\n                name\r\n                organizationId\r\n                organizations {\r\n\t\t\t\t\t\t\t\t\t\titems{\r\n                    businessCategory\r\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\r\n                        totalCount\r\n                    }\r\n                    description\r\n                    emails\r\n                    groups\r\n                    id\r\n                    memberType\r\n                    name\r\n                    outerId\r\n                    ownerId\r\n                    parentId\r\n                    phones\r\n                    seoObjectType\r\n                }}\r\n                organizationsIds\r\n                outerId\r\n                phones\r\n                securityAccounts {\r\n                    accessFailedCount\r\n                    contact {\r\n                        birthDate\r\n                        firstName\r\n                        fullName\r\n                        id\r\n                        lastName\r\n                        memberType\r\n                        middleName\r\n                        name\r\n                        organizationId\r\n                        organizationsIds\r\n                        outerId\r\n                        phones\r\n                    }\r\n                    createdBy\r\n                    createdDate\r\n                    email\r\n                    emailConfirmed\r\n                    id\r\n                    isAdministrator\r\n                    lockoutEnabled\r\n                    lockoutEnd\r\n                    memberId\r\n                    modifiedBy\r\n                    modifiedDate\r\n                    normalizedEmail\r\n                    normalizedUserName\r\n                    passwordExpired\r\n                    permissions\r\n                    phoneNumber\r\n                    phoneNumberConfirmed\r\n                    photoUrl\r\n                    roles {\r\n                        description\r\n                        id\r\n                        name\r\n                        normalizedName\r\n                        permissions\r\n                    }\r\n                    securityStamp\r\n                    storeId\r\n                    twoFactorEnabled\r\n                    userName\r\n                    userType\r\n                }\r\n            }\r\n            pageInfo {\r\n                endCursor\r\n                hasNextPage\r\n                hasPreviousPage\r\n                startCursor\r\n            }\r\n            totalCount\r\n        }\r\n        description\r\n        emails\r\n        groups\r\n        id\r\n        memberType\r\n        name\r\n        outerId\r\n        ownerId\r\n        parentId\r\n        phones\r\n        seoObjectType\r\n    }\r\n}",
														"variables": "{\r\n\"command\": {\r\n\"id\": \"{{organizationId1}}\",\r\n\"name\": \"Organization\"\r\n}\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add role \"organization manager\" [admin]",
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"description\":\"1\",\"permissions\":[{\"id\":\"customer:read\",\"name\":\"customer:read\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:create\",\"name\":\"customer:create\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:access\",\"name\":\"customer:access\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:update\",\"name\":\"customer:update\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"label\":null,\"scope\":\"{{userId}}\"}]},{\"id\":\"customer:delete\",\"name\":\"customer:delete\",\"moduleId\":null,\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[]},{\"id\":\"xapi:my_organization:edit\",\"name\":\"xapi:my_organization:edit\",\"moduleId\":null,\"groupName\":\"Xapi\",\"assignedScopes\":[],\"availableScopes\":[],\"$selected\":false}],\"userRoles\":null,\"id\":\"{{roleId}}\",\"name\":\"{{roleName}}\",\"normalizedName\":\"{{roleNormName}}\",\"concurrencyStamp\":\"163d200c-069a-4df2-bf2e-a3defd22d719\"}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/platform/security/roles",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"platform",
														"security",
														"roles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Contact_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set contactId2\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\"\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add User_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n    \n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
														"variables": "{\"command\":{\n\"applicationUser\":{\n  \"userType\": \"Customer\",\n  \"roles\": [{   \n           \"name\":\"{{roleName}}\",\n           \"id\":\"{{roleId}}\",\n           \"permissions\":[]\n        }],\n\n  \"storeId\":\"Electronics\",\n  \"id\":\"{{userId2}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"userName\":\"{{userName2}}\",\n  \"memberId\":\"{{contactId2}}\",\n  \"password\":\"{{userName2}}\"\n\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check added User_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check user\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Set userId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"userId2\", jsonData.data.contact.securityAccounts[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n        id\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Token for User_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set Token1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"Token2\", jsonData.access_token);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "grand_type",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "grant_type=password&scope=offline_access&username={{userName2}}&password={{userName2}}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{url}}/connect/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Organization (with permission, not assigned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"T669341 Access denied, With permission, but not assigned\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
															"    console.log(jsonData.errors[0].message);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n\t\t\t\t\t\t\t\t\t\t}\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{organizationId1}}\",\n\"name\": \"OrganizationxApiReg_Updat2e122\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Contact_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Contact_2 assigned to organization\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateContact.id).to.eql(pm.collectionVariables.get(\"contactId2\"));\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\norganizationId\naddresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }}\n}\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{contactId2}}\",\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\",\n\"organizations\":\"{{organizationId1}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index Contact2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId2}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Organization (user assigned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"T669329 Get organization\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.organization).to.not.eql(null);\r",
															"    pm.expect(json.data.organization).to.be.an(\"object\");\r",
															"    pm.expect(json.data.organization.id).to.be.a(\"string\");\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId1}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update Organization (with permission, assigned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"CheckId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateOrganization.id).to.eql(pm.collectionVariables.get(\"organizationId1\"));\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"T669340 Organization updated\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateOrganization.name).to.eql(\"OrganizationxApiReg_Updat_Update1\");\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n\t\t\t\t\t\t\t\t\t\t}\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{organizationId1}}\",\n\"name\": \"OrganizationxApiReg_Updat_Update1\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete users [admin]",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contact_1 [admin]",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contact_2 [admin]",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Admin delete role",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/platform/security/roles?ids={{roleId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"platform",
														"security",
														"roles"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{roleId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete organization [admin]",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/members?ids={{organizationId1}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"members"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{organizationId1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Admin",
							"item": [
								{
									"name": "Contact Admin [ID]",
									"item": [
										{
											"name": "Create contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261668 Set contactId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"UserA\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA\",\n\"firstName\": \"UserA\",\n\"lastName\": \"UserA\"\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//var jsonData = pm.response.json();\r",
															"//if(pm.expect(jsonData.errors[0].message).to.be.not.empty) {\r",
															"///    postman.setNextRequest(null)\r",
															"//}\r",
															"//if(pm.expect(jsonData.errors[0].message).to.be.not.empty) {\r",
															"//    postman.setNextRequest('Index Contact')\r",
															"//}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"CheckId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateContact.id).to.eql(pm.collectionVariables.get(\"contactId\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C261667 Check changes\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateContact.fullName).to.eql(\"UserA111\");\r",
															"    pm.expect(jsonData.data.updateContact.lastName).to.eql(\"UserB2\");\r",
															"    pm.expect(jsonData.data.updateContact.name).to.eql(\"UserA111\");\r",
															"});\r",
															"\r",
															"pm.test(\"Address is empty\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateContact.addresses.items).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\naddresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }}\n}\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{contactId}}\",\n\"name\": \"UserB2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA111\",\n\"firstName\": \"UserB2\",\n\"lastName\": \"UserB2\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update addresses",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261666 Address was add\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateContact.addresses.items).to.not.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateContact ($command: InputUpdateContactType!) {\n    updateContact (command: $command) {\n         addresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }\n        }\n        }\n    }",
														"variables": "{\n\"command\": {\n\"id\":\"{{contactId}}\",\n\"firstName\":\"UserB2\",\n\"lastName\":\"UserB2\",\n\"addresses\": [{\n\"addressType\": 2,\n\"city\": \"1Thousand oaks 25\",\n\"countryCode\": \"VUT\",\n\"countryName\": \"United States\",\n\"email\": \"alivemenone@gmail.com\",\n\"firstName\": \"Steven\",\n\"lastName\": \"Woodward\",\n\"line1\": \"1888, colgate dr\",\n\"name\": \"Steven Woodward 1888, colgate dr Thousand oaks California 91360 United States\",\n\"postalCode\": \"91360\",\n\"regionId\": \"CA\",\n\"regionName\": \"California\"\n}]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261665 Get user's contact by contact id\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.contact).to.not.eql(null);\r",
															"    pm.expect(json.data.contact).to.be.an(\"object\");\r",
															"    pm.expect(json.data.contact.id).to.be.a(\"string\");\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n    dynamicProperties\n    {\n      dictionaryItem\n      {\n       id\n      label\n      }\n      name\n      value\n    }\n  }\n    }\n",
														"variables": "{\n  \"id\": \"{{contactId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Search orders\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"after\": \"0\",\r\n\"first\": 20,\r\n\"sort\": \"name:desc\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update contact dynamic property",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C315776 Update contact dynamic property\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateMemberDynamicProperties.dynamicProperties).to.not.empty;\r",
															"    pm.expect(pm.response.text()).to.include(\"CustomerModule_Contact_ShortText_1_0_0\");\r",
															"   });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname\r\n            id\r\n        dynamicProperties {\r\n          name value\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"{{contactId}}\",\r\n    \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Decimal_0_0_0\",\r\n          \"value\": {{decimal1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_0_0\",\r\n          \"value\": \"{{html1}}\"\r\n        },\r\n        {\r\n         \"name\": \"Sex\",\r\n          \"value\": \"{{Sex}}\"\r\n        },\r\n        {\r\n        \"name\": \"occupation\",\r\n        \"value\":\"{{occupation}}\"\r\n        }, \r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"{{Defaultship}}\"\r\n        },            \r\n            {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": {{int1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": {{int2}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_0_0_0\",\r\n          \"value\": {{int3}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"{{html3}}\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"{{html1}}\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"{{html2}}\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Boolean_0_0_0\",\r\n          \"value\": {{bool1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_DateTime_0_0_0\",\r\n          \"value\": \"{{data1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": {{decimal2}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": {{decimal3}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_0_0\",\r\n          \"value\": \"{{long1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_0\",\r\n          \"value\": \"{{short1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Image_0_0_0\",\r\n          \"value\": \"{{image}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_1_0\",\r\n          \"value\": \"{{long2}}\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_1\",\r\n          \"value\": \"{{short2}}\"          \r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"{{short3}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n         \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"{{short6}}\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"{{short4}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n          {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"{{short5}}\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n       {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"{{short7}}\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"{{short8}}\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"{{short12}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"{{short13}}\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"{{short14}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_1\",\r\n          \"value\": \"{{short15}}\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        } \r\n  \t]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties after update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C327960 Check dynamic properties after update short\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327961 Check dynamic properties after update datetime\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															" });\r",
															" pm.test(\"C327962 Check dynamic properties after update int\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327963 Check dynamic properties after update decimal\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															" });\r",
															" pm.test(\"C327964 Check dynamic properties after update long text\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327965 Check dynamic properties after update html\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															" });\r",
															" pm.test(\"C327966 Check dynamic properties after update empty\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(\"Default shipping address\");\r",
															" });\r",
															"pm.test(\"C327967 Check dynamic properties after update multivalue\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															" });\r",
															" pm.test(\"C327968 Check dynamic properties after update Multilingual\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															" });\r",
															"  pm.test(\"C328695 Check dynamic properties after update image\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															" });\r",
															"  pm.test(\"C328696 Check dynamic properties after update boolean\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															" });\r",
															"\r",
															" \r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"/*pm.test(\"Check dynamic properties after update\", function () {\r",
															"    \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short15\"));\r",
															"\r",
															" });*/\r",
															" \r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  name\n    dynamicProperties\n    {\n      dictionaryItem\n      {\n       id\n      label\n      }\n      name\n      value\n    }\n  }\n    }\n",
														"variables": "{\n  \"id\": \"{{contactId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index Contact",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by bool",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C284231 Search Contact by value from Dynamic properties\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"C289839 Search contacts by bool\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 8000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Boolean_0_0_0:{{bool1}}\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by short text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289834 Search contacts by short text\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \r\n\"\\\"CustomerModule_Contact_ShortText_0_0_0\\\":\\\"{{short1}}\\\"\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by long text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289835 Search contacts by long text\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_LongText_0_0_0\\\":\\\"{{long1}}\\\"\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by integer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289836 Search contacts by integer\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Integer_1_0_0:{{int1}}\"\r\n      }\r\n\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by decimal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289837 Search contacts by decimal\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Decimal_0_0_0:{{decimal1}}\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289838 Search contacts by date\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_Datetime_0_0_0\\\":\\\"{{data1}}\\\"\", \r\n\"cultureName\": \"en-US\"\r\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C328691 Search contacts by image\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_Image_0_0_0\\\":\\\"{{image}}\\\"\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Contacts by html",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C328692 Search contacts by html\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \r\n\"\\\"CustomerModule_Contact_Html_0_1_0\\\":\\\"{{html1}}\\\"\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check delete contact\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261670 Contact deleted\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.contact).to.be.null;\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\n    contact (id: \"{{contactId}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Contact with dynamic properies",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set contactId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"{{contactName}}\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"ContactwithDynamic\",\n\"firstName\": \"ContactwithDynamic\",\n\"lastName\": \"ContactwithDynamic\",\n\"dynamicProperties\": [\n         {\n          \"name\": \"CustomerModule_Contact_Decimal_0_0_0\",\n          \"value\": {{decimal1}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Html_0_0_0\",\n          \"value\": \"{{html1}}\"\n        },\n        {\n        \"name\": \"occupation\",\n        \"value\":\"{{occupation}}\"\n        }, \n        {\n          \"name\": \"Default shipping address\",\n          \"value\": \"{{Defaultship}}\"\n        },            \n            {\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\n          \"value\": {{int1}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\n          \"value\": {{int2}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Integer_0_0_0\",\n          \"value\": {{int3}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\n          \"value\": \"{{html3}}\",\n          \"cultureName\":\"de-DE\"\n        },\n         {\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\n          \"value\": \"{{html1}}\",\n          \"cultureName\":\"en-US\"\n        },\n         {\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\n          \"value\": \"{{html2}}\",\n          \"cultureName\":\"fr-FR\"\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Boolean_0_0_0\",\n          \"value\": {{bool1}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_DateTime_0_0_0\",\n          \"value\": \"{{data1}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\n          \"value\": {{decimal2}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\n          \"value\": {{decimal3}}\n        },\n        {\n          \"name\": \"CustomerModule_Contact_LongText_0_0_0\",\n          \"value\": \"{{long1}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_0\",\n          \"value\": \"{{short1}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Contact_Image_0_0_0\",\n          \"value\": \"{{image}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Contact_LongText_0_1_0\",\n          \"value\": \"{{long2}}\"\n        },              \n        {\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_1\",\n          \"value\": \"{{short2}}\"          \n        },\n         {\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\n          \"value\": \"{{short3}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n        {\n         \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\n          \"value\": \"{{short6}}\",\n\t\t\t\t\t\"cultureName\": \"de-DE\"\n        },        \n        {\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\n          \"value\": \"{{short4}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n          {\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\n          \"value\": \"{{short5}}\",\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\n        },\n       {\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\n          \"value\": \"{{short7}}\"\n        },\n {\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\n          \"value\": \"{{short8}}\"\n},\n        {\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\n          \"value\": \"{{short12}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n    {\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\n          \"value\": \"{{short13}}\",\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\n        },\n    {\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\n          \"value\": \"{{short14}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n        {\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_1\",\n          \"value\": \"{{short15}}\",\n\t\t    \"cultureName\": \"en-US\"\n        }\n  \t]\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C315775 Check Created Contact with dynamic properies\", function () {\r",
															"    \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short15\"));\r",
															"\r",
															" });\r",
															" \r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n    dynamicProperties\n    {\n      dictionaryItem\n      {\n       id\n      label\n      }\n      name\n      value\n    }\n  }\n    }\n",
														"variables": "{\n  \"id\": \"{{contactId2}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact created with dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check delete contact\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Contact emails [ID]",
									"item": [
										{
											"name": "Create contact with emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set contactId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\nemails\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"{{contactName}}\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserWithEmail\",\n\"firstName\": \"UserWithEmail\",\n\"lastName\": \"UserWithEmail\",\n\"emails\": [\"email2@a\",\"email1@a\"]\n\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get contact emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C315278 emails added\", function () {\r",
															"    var data = pm.response.json();\r",
															"   pm.expect(data.data.contact.emails).to.include(\"email2@a\",\"email1@a\")\r",
															"} \r",
															");\r",
															"pm.test(\"C315277 get emails\", function () {\r",
															"    var data = pm.response.json();\r",
															"   pm.expect(data.data.contact.emails).to.include(\"email2@a\",\"email1@a\")\r",
															"} \r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\n  contact (id: \"{{contactId}}\") {\r\n        fullName\r\n        id\r\n        emails\r\n\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Emails updated\", function () {\r",
															"    var data = pm.response.json();\r",
															"   pm.expect(data.data.updateContact.emails).to.include(\"email3@a\",\"email4@a\")\r",
															"} \r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateContact ( $command: InputUpdateContactType!) {\n    updateContact (command: $command) {\n       fullName\n        id\n        lastName\n        name\n        emails\n    }\n}\n\n\n\n\n\n",
														"variables": "{\n  \"command\": {\n    \"id\": \"{{contactId}}\",\n    \"name\": \"UserWithEmail\",\n    \"memberType\": \"Contact\",\n    \"addresses\": [],\n    \"fullName\": \"UserWithEmail\",\n    \"firstName\": \"UserWithEmail\",\n    \"lastName\": \"UserWithEmail\",\n    \"emails\": [\"email3@a\",\"email3@4\"]\n  }\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get contact emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C315279 emails updated\", function () {\r",
															"    var data = pm.response.json();\r",
															"   pm.expect(data.data.contact.emails).to.include(\"email3@a\",\"email4@a\")\r",
															"} \r",
															");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\n  contact (id: \"{{contactId}}\") {\r\n        fullName\r\n        id\r\n        emails\r\n\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact with emails",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\n    deleteContact (command: $command)\n}",
														"variables": "{\n  \"command\": {\n    \"contactId\": \"{{contactId}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create contact without emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set contactId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"{{contactName}}\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserWithoutEmail\",\n\"firstName\": \"UserWithoutEmail\",\n\"lastName\": \"UserWithoutEmail\"\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get contact emails",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Email not added\", function () {\r",
															"    var data = pm.response.json();\r",
															"     pm.expect(data.data.contact.emails).to.be.empty\r",
															"        pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query contact {\r\n  contact (id: \"{{contactId}}\") {\r\n        fullName\r\n        id\r\n        emails\r\n\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact without emails",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\n    deleteContact (command: $command)\n}",
														"variables": "{\n  \"command\": {\n    \"contactId\": \"{{contactId}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Organization Admin [ID]",
									"item": [
										{
											"name": "Create organization with dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Organization created - set organizationId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"organizationId\", jsonData.data.createOrganization.id);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\n    createOrganization (command: $command) {\n        id\n        name\n       dynamicProperties {\n          name value\n          }\n    }\n}",
														"variables": "{\n  \"command\": {\n    \"name\": \"Test_org1\",\n    \"dynamicProperties\": [\n         {\n          \"name\": \"CustomerModule_Organization_Decimal_0_0_0\",\n          \"value\":{{decimal1}}\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Html_0_0_0\",\n          \"value\": \"{{html1}}\"\n        }, \n        {\n          \"name\": \"Default shipping address\",\n          \"value\": \"\"\n        },  \n        {\n          \"name\": \"CustomerModule_Organization_Integer_0_0_0\",\n          \"value\":{{int1}}\n        },          \n            {\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\n          \"value\":{{int2}}\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\n          \"value\":{{int3}}\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\n          \"value\": \"{{html2}}\",\n          \"cultureName\":\"en-US\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\n          \"value\": \"{{html3}}\",\n          \"cultureName\":\"de-DE\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\n          \"value\": \"{{html4}}\",\n          \"cultureName\":\"fr-FR\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Boolean_0_0_0\",\n          \"value\": {{bool1}}\n        },\n        {\n          \"name\": \"CustomerModule_Organization_DateTime_0_0_0\",\n          \"value\": \"{{data1}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\n          \"value\": {{decimal2}}\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\n          \"value\": {{decimal3}}\n        },\n        {\n          \"name\": \"CustomerModule_Organization_LongText_0_0_0\",\n          \"value\": \"{{long1}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_0\",\n          \"value\": \"{{short1}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_Image_0_0_0\",\n          \"value\": \"{{image}}\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_LongText_0_1_0\",\n          \"value\": \"{{long2}}\",\n                   \"cultureName\":\"fr-FR\"\n        },              \n        {\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_1\",\n          \"value\": \"{{short2}}\"         \n        },\n           {\n         \"name\": \"CustomerModule_Organization_ShortText_0_1_1\",\n          \"value\": \"{{short3}}\",\n\t\t\t\t\t\"cultureName\": \"de-DE\"\n        },        \n        {\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\n          \"value\": \"{{short4}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\n           \"value\": \"{{short5}}\",\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\n          \"value\": \"{{short6}}\"\n        },\n {\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\n          \"value\": \"{{short7}}\"\n},\n        {\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\n          \"value\": \"{{short8}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n    {\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\n          \"value\": \"{{short9}}\",\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\n        },\n    {\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\n          \"value\": \"{{short10}}\",\n\t\t\t\t\t\"cultureName\": \"en-US\"\n        },\n        {\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\n          \"value\": \"{{short11}}\",\n\t\t    \"cultureName\": \"en-US\"\n        },\n         {\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\n          \"value\": \"{{short12}}\",\n\t\t    \"cultureName\": \"de-DE\"\n        },\n            {\n           \"name\":\"CustomerModule_Organization_ShortText_1_0_1\",\n           \"value\":\"{{short13}}\"\n        },\n        {\n            \"name\":\"CustomerModule_Organization_ShortText_1_0_1\",\n            \"value\":\"{{short14}}\"\n        },\n        {\n          \"name\":\"CustomerModule_Organization_ShortText_1_0_1\",\n           \"value\":\"{{short15}}\"  \n        }\n  \t\n\n    ]\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check created organization with dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C315773 Check Create organization with dynamic properties\", function () {\r",
															"\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short10\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short11\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short15\"));\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete organization",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/organizations?ids={{organizationId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"organizations"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{organizationId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Сreate organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261664 Organization created - set organizationId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"organizationId\", jsonData.data.createOrganization.id);\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"OrganizationxApiReg\",\n\"addresses\": []\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"CheckId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateOrganization.id).to.eql(pm.collectionVariables.get(\"organizationId\"));\r",
															"});\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261663 Check changes\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateOrganization.name).to.eql(pm.collectionVariables.get(\"organizationName1\"));\r",
															"\r",
															"\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n\t\t\t\t\t\t\t\t\t\t}\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n\"command\": {\n\"id\": \"{{organizationId}}\",\n\"name\": \"{{organizationName1}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update organization dynamic property",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C315774 Update_organizatiom_dynamic_property\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.updateMemberDynamicProperties.dynamicProperties).to.not.empty;\r",
															"pm.expect(pm.response.text()).to.include(\"CustomerModule_Organization_ShortText_0_0_1\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname \r\n        dynamicProperties {\r\n          name value \r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"{{organizationId}}\",\r\n    \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Organization_Decimal_0_0_0\",\r\n          \"value\":{{decimal1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_0_0\",\r\n          \"value\": \"{{html1}}\"\r\n        }, \r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"\"\r\n        },  \r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_0_0_0\",\r\n          \"value\":{{int1}}\r\n        },          \r\n            {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\":{{int2}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\":{{int3}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"{{html2}}\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"{{html3}}\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"{{html4}}\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Boolean_0_0_0\",\r\n          \"value\": {{bool1}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_DateTime_0_0_0\",\r\n          \"value\": \"{{data1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\r\n          \"value\": {{decimal2}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\r\n          \"value\": {{decimal3}}\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_LongText_0_0_0\",\r\n          \"value\": \"{{long1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_0\",\r\n          \"value\": \"{{short1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Image_0_0_0\",\r\n          \"value\": \"{{image}}\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_LongText_0_1_0\",\r\n          \"value\": \"{{long2}}\",\r\n                   \"cultureName\":\"fr-FR\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_1\",\r\n          \"value\": \"{{short2}}\"         \r\n        },\r\n           {\r\n         \"name\": \"CustomerModule_Organization_ShortText_0_1_1\",\r\n          \"value\": \"{{short3}}\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\r\n          \"value\": \"{{short4}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\r\n           \"value\": \"{{short5}}\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\r\n          \"value\": \"{{short6}}\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\r\n          \"value\": \"{{short7}}\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"{{short8}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"{{short9}}\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"{{short10}}\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"{{short11}}\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"{{short12}}\",\r\n\t\t    \"cultureName\": \"de-DE\"\r\n        },\r\n            {\r\n           \"name\":\"CustomerModule_Organization_ShortText_1_0_1\",\r\n           \"value\":\"{{short13}}\"\r\n        },\r\n        {\r\n            \"name\":\"CustomerModule_Organization_ShortText_1_0_1\",\r\n            \"value\":\"{{short14}}\"\r\n        },\r\n        {\r\n          \"name\":\"CustomerModule_Organization_ShortText_1_0_1\",\r\n           \"value\":\"{{short15}}\"  \r\n        }\r\n  \t]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's organization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C261662 Get user's organization\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.organization).to.not.eql(null);\r",
															"    pm.expect(json.data.organization).to.be.an(\"object\");\r",
															"    pm.expect(json.data.organization.id).to.be.a(\"string\");\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties after update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C289491 Check updated short text\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289492 Check updated datetime\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289493 Check updated integer\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289494 Check updated decimal\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289495 Check updated long text\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289496 Check updated html\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289497 Check updated empty\", function () {\r",
															"pm.expect(pm.response.text()).to.include(\"Default shipping address\");\r",
															"});\r",
															"\r",
															"pm.test(\"C289498 Check updated multivalue property\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C289499 Check updated multilingual property\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"});\r",
															"\r",
															"pm.test(\"C328695 Check dynamic properties after update image\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"});\r",
															"pm.test(\"C328696 Check dynamic properties after update boolean\", function () { \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"/*pm.test(\"Check dynamic properties after update\", function () {\r",
															"\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short10\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short11\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short15\"));\r",
															"\r",
															"});*/\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index organization",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get all organizations\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"after\": \"0\",\r\n    \"first\": 20,\r\n    \"sort\": \"name:desc\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by bool",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C284232 Search organizations by value from Dynamic properties\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"C289845 Search organizations by bool\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Boolean_0_0_0:{{bool1}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by integer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289842 Search organizations by integer\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n     \"searchPhrase\": \"CustomerModule_Organization_Integer_0_0_0:{{int1}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by decimal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289843 Search organizations by decimal\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Decimal_0_0_0:{{decimal1}}\"\r\n\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by short text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289840 Search organizations by short text\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_ShortText_0_0_0\\\":\\\"{{short1}}\\\"\"\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by long text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289841 Search organizations by long text\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"\\\"CustomerModule_Organization_LongText_0_0_0\\\":\\\"{{long1}}\\\"\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C289844 Search organizations by date\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_DateTime_0_0_0\\\":\\\"{{data1}}\\\"\", \r\n\"cultureName\": \"en-US\"\r\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by html",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C328359 Search organizations by html\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Html_0_0_0:{{html1}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Organizations by image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C328360 Search organizations by image\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_Image_0_0_0\\\":\\\"{{image}}\\\"\"\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete organization",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/organizations?ids={{organizationId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"organizations"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{organizationId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check after delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check organization after delete\", function () {\r",
															"    var data = pm.response.json();\r",
															" pm.expect(data.data.organization).to.be.null\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
														"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get User [ID]",
									"item": [
										{
											"name": "Сreate гser",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"CreateUser\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.createUser).to.not.empty;\r",
															"    pm.expect(jsonData.data.createUser.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n        \n      \n    }\n}",
														"variables": "{\n\"command\": {\n\"applicationUser\": {\n\"createdBy\": \"exp1\",\n\"email\": \"{{email}}\",\n\"password\":\"{{$randomPassword}}\",\n\"userName\": \"{{userName1}}\",\n\"userType\": \"Customer\",\n\"storeId\":\"{{storeId}}\"\n}\n}\n}\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's information by username",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Set Id\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"email\", jsonData.data.user.email);\r",
															"    pm.collectionVariables.set(\"userId1\", jsonData.data.user.id);\r",
															"});\r",
															"pm.test(\"C261782 Get user's information by username\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.user.userName).to.be.eql(pm.collectionVariables.get(\"userName1\"));\r",
															"    pm.expect(jsonData.data.user.id).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
															"    pm.expect(jsonData.data.user.email).to.be.eql(pm.collectionVariables.get(\"email\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query user(\r\n$id: String\r\n$userName: String\r\n$email: String\r\n$loginProvider: String\r\n$providerKey: String\r\n) {\r\nuser(\r\nid: $id\r\nuserName: $userName\r\nemail: $email\r\nloginProvider: $loginProvider\r\nproviderKey: $providerKey\r\n) {\r\nid\r\nisAdministrator\r\n    userName\r\nemail\r\nstoreId\r\nuserName\r\nuserType\r\nroles{\r\n  id\r\n  name\r\n  description\r\n  permissions\r\n}\r\ncontact {\r\n    id\r\n  name\r\n  firstName\r\n  lastName\r\n  fullName\r\n  name\r\n  memberType\r\n  phones\r\n  addresses{\r\n    items{\r\n    key\r\n    addressType\r\n    city\r\n    firstName\r\n    lastName\r\n    regionId\r\n    regionName\r\n  }\r\n  }\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"userName\": \"{{userName1}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's information by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261784 Get user's information by id\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.user.userName).to.be.eql(pm.collectionVariables.get(\"userName1\"));\r",
															"    pm.expect(jsonData.data.user.id).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
															"    pm.expect(jsonData.data.user.email).to.be.eql(pm.collectionVariables.get(\"email\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query user(\r\n$id: String\r\n$userName: String\r\n$email: String\r\n$loginProvider: String\r\n$providerKey: String\r\n) {\r\nuser(\r\nid: $id\r\nuserName: $userName\r\nemail: $email\r\nloginProvider: $loginProvider\r\nproviderKey: $providerKey\r\n) {\r\nid\r\nisAdministrator\r\n    userName\r\nemail\r\nstoreId\r\nuserName\r\nuserType\r\nroles{\r\n  id\r\n  name\r\n  description\r\n  permissions\r\n}\r\ncontact {\r\n    id\r\n  name\r\n  firstName\r\n  lastName\r\n  fullName\r\n  name\r\n  memberType\r\n  phones\r\n  addresses{\r\n    items{\r\n    key\r\n    addressType\r\n    city\r\n    firstName\r\n    lastName\r\n    regionId\r\n    regionName\r\n  }\r\n  }\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"id\": \"{{userId1}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's information by email",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261785 Get user's information by email\", function () {\r",
															"   pm.response.to.have.status(200);\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.user.userName).to.be.eql(pm.collectionVariables.get(\"userName1\"));\r",
															"    pm.expect(jsonData.data.user.id).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
															"    pm.expect(jsonData.data.user.email).to.be.eql(pm.collectionVariables.get(\"email\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query user(\r\n$id: String\r\n$userName: String\r\n$email: String\r\n$loginProvider: String\r\n$providerKey: String\r\n) {\r\nuser(\r\nid: $id\r\nuserName: $userName\r\nemail: $email\r\nloginProvider: $loginProvider\r\nproviderKey: $providerKey\r\n) {\r\nid\r\nisAdministrator\r\n    userName\r\nemail\r\nstoreId\r\nuserName\r\nuserType\r\nroles{\r\n  id\r\n  name\r\n  description\r\n  permissions\r\n}\r\ncontact {\r\n    id\r\n  name\r\n  firstName\r\n  lastName\r\n  fullName\r\n  name\r\n  memberType\r\n  phones\r\n  addresses{\r\n    items{\r\n    key\r\n    addressType\r\n    city\r\n    firstName\r\n    lastName\r\n    regionId\r\n    regionName\r\n  }\r\n  }\r\n}\r\n}\r\n}",
														"variables": "{\r\n\"email\": \"{{email}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's information by all fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261783 Get user's information by all fields\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.user.userName).to.be.eql(pm.collectionVariables.get(\"userName1\"));\r",
															"    pm.expect(jsonData.data.user.id).to.be.eql(pm.collectionVariables.get(\"userId1\"));\r",
															"    pm.expect(jsonData.data.user.email).to.be.eql(pm.collectionVariables.get(\"email\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query user(\r\n$id: String\r\n$userName: String\r\n$email: String\r\n$loginProvider: String\r\n$providerKey: String\r\n) {\r\nuser(\r\nid: $id\r\nuserName: $userName\r\nemail: $email\r\nloginProvider: $loginProvider\r\nproviderKey: $providerKey\r\n) {\r\nid\r\nisAdministrator\r\n    userName\r\nemail\r\nstoreId\r\nuserName\r\nuserType\r\nroles{\r\n  id\r\n  name\r\n  description\r\n  permissions\r\n}\r\ncontact {\r\n    id\r\n  name\r\n  firstName\r\n  lastName\r\n  fullName\r\n  name\r\n  memberType\r\n  phones\r\n  addresses{\r\n    items{\r\n    key\r\n    addressType\r\n    city\r\n    firstName\r\n    lastName\r\n    regionId\r\n    regionName\r\n  }\r\n  }\r\n}\r\n}\r\n}",
														"variables": "\r\n{\r\n\"id\": \"{{userId1}}\",\r\n\"userName\": \"{{userName1}}\",\r\n\"email\": \"{{email}}\",\r\n\"loginProvider\":\"\",\r\n\"providerKey\": \"\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"deleteUsers\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
														"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName1}}\"\n]\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Default address [ID]",
									"item": [
										{
											"name": "Organization",
											"item": [
												{
													"name": "Create organization",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Organization created - set organizationId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
																	"    pm.collectionVariables.set(\"organizationName1\", jsonData.data.createOrganization.name);\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const rnd = (len, chars='abcdefghijklmnopqrstuvwxyz0123456789') => [...Array(len)].map(() => chars.charAt(Math.floor(Math.random() * chars.length))).join('')\r",
																	"\r",
																	"\r",
																	"pm.collectionVariables.set(\"shippingAddressId1\", rnd(36))\r",
																	"pm.collectionVariables.set(\"shippingAddressId2\", rnd(36))\r",
																	"pm.collectionVariables.set(\"billingAddressId1\", rnd(36))\r",
																	"pm.collectionVariables.set(\"billingAddressId2\", rnd(36))\r",
																	"pm.collectionVariables.set(\"BillingAndShippingId1\", rnd(36))\r",
																	"\r",
																	"\r",
																	"console.log(pm.collectionVariables.get(\"shippingAddressId1\"))\r",
																	"console.log(pm.collectionVariables.get(\"shippingAddressId2\"))\r",
																	"console.log(pm.collectionVariables.get(\"billingAddressId1\"))\r",
																	"console.log(pm.collectionVariables.get(\"billingAddressId2\"))\r",
																	"console.log(pm.collectionVariables.get(\"BillingAndShippingId1\"))\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n\n}\n}\n",
																"variables": "{\n\"command\": {\n\"name\": \"{{$randomCompanyName}}\"\n\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set isDefault=true for shipAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Organization\",\r\n    \"name\": \"{{organizationName1}}\",\r\n    \"memberType\": \"Organization\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"Shipping\",\r\n            \"key\": \"{{shippingAddressId1}}\",\r\n            \"id\": \"{{shippingAddressId1}}\",\r\n            \"name\": \"HU, Buda, Budapest, 2323, Avenue\",\r\n            \"countryCode\": \"HU\",\r\n            \"countryName\": \"Hungary\",\r\n            \"city\": \"Budapest\",\r\n            \"postalCode\": \"2389\",\r\n            \"line1\": \"2323, Avenue\",\r\n            \"regionId\": \"Buda\",\r\n            \"regionName\": \"Buda\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\": false\r\n        },\r\n        {\r\n            \"addressType\": \"Shipping\",\r\n            \"key\": \"{{shippingAddressId2}}\",\r\n            \"id\": \"{{shippingAddressId2}}\",\r\n            \"name\": \"Tester Woody, Street 15\",\r\n            \"countryCode\": \"De\",\r\n            \"countryName\": \"Germany\",\r\n            \"city\": \"Berlin\",\r\n            \"postalCode\": \"8789\",\r\n            \"line1\": \"Street 15\",\r\n            \"regionId\": \"Munchin\",\r\n            \"regionName\": \"Bavaria\",\r\n            \"firstName\": \"Tester\",\r\n            \"lastName\": \"Woody\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\": true\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"Organization\",\r\n    \"seoInfos\": [],\r\n    \"createdDate\": \"2022-07-13T07:01:05.1437724Z\",\r\n    \"modifiedDate\": \"2022-07-13T07:01:05.1437724Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{organizationId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get default shipAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C317749 Default address = true for billAddress_2, billAddress_1 existed\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"shippingAddressId1\"));\r",
																	"pm.expect(jsonData.data.organization.defaultShippingAddress.id).to.eql(pm.collectionVariables.get(\"shippingAddressId2\"));\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query organization {\r\n  organization(id: \"{{organizationId1}}\") {\r\n    id\r\n    name\r\n    defaultShippingAddress{\r\n      id\r\n      isDefault\r\n    }\r\n\r\n     addresses{\r\n      items{\r\n        isDefault\r\n        id\r\n        key\r\n        city\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        name\r\n        organization\r\n        postalCode\r\n        regionId\r\n        addressType\r\n      }\r\n    }\r\n       }\r\n  }",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set isDefault = true for billAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Organization\",\r\n    \"name\": \"{{organizationName1}}\",\r\n    \"memberType\": \"Organization\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"Billing\",\r\n            \"key\": \"{{billingAddressId1}}\",\r\n            \"id\": \"{{billingAddressId1}}\",\r\n            \"name\": \"HU, Buda, Budapest, 2323, Avenue\",\r\n            \"countryCode\": \"HU\",\r\n            \"countryName\": \"Hungary\",\r\n            \"city\": \"Budapest\",\r\n            \"postalCode\": \"2389\",\r\n            \"line1\": \"2323, Avenue\",\r\n            \"regionId\": \"Buda\",\r\n            \"regionName\": \"Buda\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\": false\r\n        },\r\n        {\r\n            \"addressType\": \"Billing\",\r\n            \"key\": \"{{billingAddressId2}}\",\r\n            \"id\": \"{{billingAddressId2}}\",\r\n            \"name\": \"Tester Woody, Street 15\",\r\n            \"countryCode\": \"De\",\r\n            \"countryName\": \"Germany\",\r\n            \"city\": \"Berlin\",\r\n            \"postalCode\": \"8789\",\r\n            \"line1\": \"Street 15\",\r\n            \"regionId\": \"Munchin\",\r\n            \"regionName\": \"Bavaria\",\r\n            \"firstName\": \"Tester\",\r\n            \"lastName\": \"Woody\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\": true\r\n        }\r\n    ],\r\n    \"dynamicProperties\": [],\r\n    \"seoObjectType\": \"Organization\",\r\n    \"seoInfos\": [],\r\n    \"createdDate\": \"2022-07-13T07:01:05.1437724Z\",\r\n    \"modifiedDate\": \"2022-07-13T09:06:30.9729662Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{organizationId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get default billAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C317763 Default address = true for billAddress_2, billAddress_1 existed\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"billingAddressId1\"));\r",
																	"pm.expect(jsonData.data.organization.defaultBillingAddress.id).to.eql(pm.collectionVariables.get(\"billingAddressId2\"));\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query organization {\r\n  organization(id: \"{{organizationId1}}\") {\r\n    id\r\n    name\r\n    defaultShippingAddress{\r\n      id\r\n      isDefault\r\n    }\r\n    defaultBillingAddress{\r\n      id\r\n      isDefault\r\n    }\r\n     addresses{\r\n      items{\r\n        isDefault\r\n        id\r\n        key\r\n        city\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        name\r\n        organization\r\n        postalCode\r\n        regionId\r\n        addressType\r\n      }\r\n    }\r\n       }\r\n  }",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set billing&shipping address as default",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Bad Request\", function () {\r",
																	"    pm.response.to.have.status(\"Bad Request\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error: BillingAndShipping address cannot be set as default\", function () {\r",
																	"    pm.expect(pm.response.text()).to.include(\"BillingAndShipping address cannot be set as default\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Organization\",\r\n    \"name\": \"{{organizationName1}}\",\r\n    \"memberType\": \"Organization\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"BillingAndShipping\",\r\n            \"key\": \"{{BillingAndShippingId1}}\",\r\n            \"id\": \"{{BillingAndShippingId1}}\",\r\n            \"name\": \"HU, Buda, Budapest, 2323, Avenue\",\r\n            \"countryCode\": \"HU\",\r\n            \"countryName\": \"Hungary\",\r\n            \"city\": \"Budapest\",\r\n            \"postalCode\": \"2389\",\r\n            \"line1\": \"2323, Avenue\",\r\n            \"regionId\": \"Buda\",\r\n            \"regionName\": \"Buda\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\":true\r\n        }\r\n    ],\r\n    \"dynamicProperties\": [],\r\n    \"seoObjectType\": \"Organization\",\r\n    \"seoInfos\": [],\r\n    \"createdDate\": \"2022-07-13T07:01:05.1437724Z\",\r\n    \"modifiedDate\": \"2022-07-13T09:06:30.9729662Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{organizationId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add billing&shipping address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Organization\",\r\n    \"name\": \"{{organizationName1}}\",\r\n    \"memberType\": \"Organization\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"BillingAndShipping\",\r\n            \"key\": \"{{BillingAndShippingId1}}\",\r\n            \"id\": \"{{BillingAndShippingId1}}\",\r\n            \"name\": \"HU, Buda, Budapest, 2323, Avenue\",\r\n            \"countryCode\": \"HU\",\r\n            \"countryName\": \"Hungary\",\r\n            \"city\": \"Budapest\",\r\n            \"postalCode\": \"2389\",\r\n            \"line1\": \"2323, Avenue\",\r\n            \"regionId\": \"Buda\",\r\n            \"regionName\": \"Buda\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\":false\r\n        }\r\n    ],\r\n    \"dynamicProperties\": [],\r\n    \"seoObjectType\": \"Organization\",\r\n    \"seoInfos\": [],\r\n    \"createdDate\": \"2022-07-13T07:01:05.1437724Z\",\r\n    \"modifiedDate\": \"2022-07-13T09:06:30.9729662Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{organizationId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get billing&shipping",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C317770 Default address = false for Billing&Shipping_1\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.organization.addresses.items[0].isDefault).to.eql(false);\r",
																	"pm.expect(jsonData.data.organization.addresses.items[0].addressType).to.eql(3);\r",
																	"pm.expect(jsonData.data.organization.addresses.items[0].id).to.eql(pm.collectionVariables.get(\"BillingAndShippingId1\"));\r",
																	"})\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query organization {\r\n  organization(id: \"{{organizationId1}}\") {\r\n    id\r\n    name\r\n    businessCategory\r\n    description\r\n    outerId\r\n    emails\r\n    groups\r\n    addresses{\r\n      items{\r\n        isDefault\r\n        id\r\n        key\r\n        city\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        name\r\n        organization\r\n        postalCode\r\n        regionId\r\n        addressType\r\n      }\r\n    }\r\n       }\r\n  }",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete organization",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/organizations?ids={{organizationId1}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"organizations"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{organizationId1}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Contact",
											"item": [
												{
													"name": "Create contact",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
																	"    pm.collectionVariables.set(\"contactName1\", jsonData.data.createContact.name);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const rnd = (len, chars='abcdefghijklmnopqrstuvwxyz0123456789') => [...Array(len)].map(() => chars.charAt(Math.floor(Math.random() * chars.length))).join('')\r",
																	"\r",
																	"\r",
																	"pm.collectionVariables.set(\"shippingAddressId1\", rnd(36))\r",
																	"pm.collectionVariables.set(\"shippingAddressId2\", rnd(36))\r",
																	"pm.collectionVariables.set(\"billingAddressId1\", rnd(36))\r",
																	"pm.collectionVariables.set(\"billingAddressId2\", rnd(36))\r",
																	"pm.collectionVariables.set(\"BillingAndShippingId1\", rnd(36))\r",
																	"\r",
																	"\r",
																	"console.log(pm.collectionVariables.get(\"shippingAddressId1\"))\r",
																	"console.log(pm.collectionVariables.get(\"shippingAddressId2\"))\r",
																	"console.log(pm.collectionVariables.get(\"billingAddressId1\"))\r",
																	"console.log(pm.collectionVariables.get(\"billingAddressId2\"))\r",
																	"console.log(pm.collectionVariables.get(\"BillingAndShippingId1\"))\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\r\ncreateContact (command: $command) {\r\nfullName\r\nid\r\n  firstName\r\nlastName\r\nname\r\n addresses{\r\n  items{\r\n    id\r\n    key\r\n    isDefault\r\n    city\r\n    countryCode\r\n    countryName\r\n    email\r\n    firstName\r\n    lastName\r\n    line1\r\n    line2\r\n    postalCode\r\n    regionId\r\n    regionName\r\n    zip\r\n    addressType\r\n  }\r\n}\r\n}\r\n}",
																"variables": "{\r\n\"command\": {\r\n\"name\": \"{{$randomFirstName}}\",\r\n\"memberType\": \"Contact\",\r\n\"fullName\": \"{{$randomUserName}}\",\r\n\"firstName\": \"{{$randomFirstName}}\",\r\n\"lastName\": \"{{$randomLastName}}\"\r\n}\r\n}\r\n\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set IsDefault = true for shipAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"fullName\": \"{{contactName1}}\",\r\n    \"firstName\": \"{{contactName1}}\",\r\n    \"lastName\": \"{{contactName1}}\",\r\n    \"organizations\": [],\r\n    \"associatedOrganizations\": [],\r\n    \"isAnonymized\": false,\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n    \"securityAccounts\": [],\r\n    \"name\": \"{{contactName1}}\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"Shipping\",\r\n            \"key\": \"{{shippingAddressId1}}\",\r\n            \"name\": \"HU, Buda, Budapest, 2323, Avenue\",\r\n            \"countryCode\": \"HU\",\r\n            \"countryName\": \"Hungary\",\r\n            \"city\": \"Budapest\",\r\n            \"postalCode\": \"2389\",\r\n            \"line1\": \"2323, Avenue\",\r\n            \"regionId\": \"Buda\",\r\n            \"regionName\": \"Buda\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\":false\r\n        },\r\n        {\r\n            \"addressType\": \"Shipping\",\r\n            \"key\": \"{{shippingAddressId2}}\",\r\n            \"name\": \"Steven Woodward 1888, colgate dr Thousand oaks California 91360 United States\",\r\n            \"countryCode\": \"VUT\",\r\n            \"countryName\": \"United States\",\r\n            \"city\": \"1Thousand oaks 25\",\r\n            \"postalCode\": \"91360\",\r\n            \"line1\": \"1888, colgate dr\",\r\n            \"regionId\": \"CA\",\r\n            \"regionName\": \"California\",\r\n            \"firstName\": \"Steven\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"alivemenone@gmail.com\",\r\n            \"isDefault\":true\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"Contact\",\r\n    \"createdDate\": \"2022-07-12T12:15:08.1724101Z\",\r\n    \"modifiedDate\": \"2022-07-12T12:15:08.1724101Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{contactId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get default shipAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C317751 Default address = true for shipAddress_2, shipAddress_1 existed\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"shippingAddressId1\"));\r",
																	"pm.expect(jsonData.data.contact.defaultShippingAddress.id).to.eql(pm.collectionVariables.get(\"shippingAddressId2\"));\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact{\r\n  contact(id:\"{{contactId1}}\"){\r\n      name\r\n  firstName\r\n    lastName\r\n    id\r\n    memberType\r\n      defaultShippingAddress{\r\n      id\r\n      isDefault\r\n    }\r\n    addresses{\r\n      items{\r\n        isDefault\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        lastName\r\n        firstName\r\n        line1\r\n        line2\r\n        name\r\n        organization\r\n        postalCode\r\n        regionName\r\n        postalCode\r\n        addressType\r\n        }\r\n    }\r\n}\r\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set IsDefault = true for billAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"fullName\": \"{{contactName1}}\",\r\n    \"firstName\": \"{{contactName1}}\",\r\n    \"lastName\": \"{{contactName1}}\",\r\n    \"organizations\": [],\r\n    \"associatedOrganizations\": [],\r\n    \"isAnonymized\": false,\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n    \"securityAccounts\": [],\r\n    \"name\": \"{{contactName1}}\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"Billing\",\r\n            \"key\": \"{{billingAddressId1}}\",\r\n            \"name\": \"RU, Moskovskay, Moscow, Lenina 220\",\r\n            \"countryCode\": \"RU\",\r\n            \"countryName\": \"Russia\",\r\n            \"city\": \"Moscow\",\r\n            \"postalCode\": \"19086\",\r\n            \"line1\": \"Lenina 220\",\r\n            \"regionId\": \"MO\",\r\n            \"regionName\": \"Moskovskay\",\r\n            \"firstName\": \"Steven\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"alivemenone@gmail.com\",\r\n            \"isDefault\": false\r\n        },\r\n        {\r\n            \"addressType\": \"Billing\",\r\n            \"key\": \"{{billingAddressId2}}\",\r\n            \"name\": \"User Woodward Vienna Austria, 2323 Avenue\",\r\n            \"countryCode\": \"AU\",\r\n            \"countryName\": \"Austria\",\r\n            \"city\": \"Vienna\",\r\n            \"postalCode\": \"998086\",\r\n            \"line1\": \"2323, Avenue\",\r\n            \"regionId\": \"Dudde\",\r\n            \"regionName\": \"Dudda\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\",\r\n            \"isDefault\": true\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"Contact\",\r\n    \"seoInfos\": [],\r\n    \"createdDate\": \"2022-07-12T15:41:56.1948364Z\",\r\n    \"modifiedDate\": \"2022-07-12T15:42:02.2392083Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{contactId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get default billAddress_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C317782 Default address = true for billAddress_2, billAddress_1 existed\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"billingAddressId1\"));\r",
																	"pm.expect(jsonData.data.contact.defaultBillingAddress.id).to.eql(pm.collectionVariables.get(\"billingAddressId2\"));\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact{\r\n  contact(id:\"{{contactId1}}\"){\r\n  firstName\r\n    lastName\r\n    id\r\n    memberType\r\n         defaultShippingAddress{\r\n      id\r\n      isDefault\r\n    }\r\n    defaultBillingAddress{\r\n      id\r\n      isDefault\r\n    }\r\n    addresses{\r\n      items{\r\n        isDefault\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        lastName\r\n        firstName\r\n        line1\r\n        line2\r\n        name\r\n        organization\r\n        postalCode\r\n        regionName\r\n        postalCode\r\n        addressType\r\n        }\r\n    }\r\n}\r\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add Billing&Shipping_2 address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"fullName\": \"{{contactName1}}\",\r\n    \"firstName\": \"{{contactName1}}\",\r\n    \"lastName\": \"{{contactName1}}\",\r\n    \"organizations\": [],\r\n    \"associatedOrganizations\": [],\r\n    \"isAnonymized\": false,\r\n    \"objectType\": \"VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n    \"securityAccounts\": [],\r\n    \"name\": \"{{contactName1}}\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [\r\n        {\r\n            \"addressType\": \"BillingAndShipping\",\r\n            \"key\": \"{{BillingAndShippingId1}}\",\r\n            \"id\":\"{{BillingAndShippingId1}}\",\r\n            \"name\": \"User Woodward Vienna Austria, 2323 Avenue\",\r\n            \"countryCode\": \"DE\",\r\n            \"countryName\": \"Germany\",\r\n            \"city\": \"Berlin\",\r\n            \"postalCode\": \"54534\",\r\n            \"line1\": \"565 Street\",\r\n            \"regionId\": \"Berlinska\",\r\n            \"regionName\": \"Berlinska\",\r\n            \"firstName\": \"User\",\r\n            \"lastName\": \"Woodward\",\r\n            \"email\": \"testqa1@gmail.com\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"Contact\",\r\n    \"seoInfos\": [],\r\n    \"createdDate\": \"2022-07-12T16:25:00.4814736Z\",\r\n    \"modifiedDate\": \"2022-07-12T16:38:33.5184512Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{contactId1}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/members",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"members"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get billing&shipping address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C317783 Default address = false for Billing&Shipping_1\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.contact.addresses.items[0].isDefault).to.eql(false);\r",
																	"pm.expect(jsonData.data.contact.addresses.items[0].addressType).to.eql(3);\r",
																	"pm.expect(jsonData.data.contact.addresses.items[0].id).to.eql(pm.collectionVariables.get(\"BillingAndShippingId1\"));\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact{\r\n  contact(id:\"{{contactId1}}\"){\r\n  firstName\r\n    lastName\r\n    id\r\n    memberType\r\n    addresses{\r\n      items{\r\n        isDefault\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        lastName\r\n        firstName\r\n        line1\r\n        line2\r\n        name\r\n        organization\r\n        postalCode\r\n        regionName\r\n        postalCode\r\n        addressType\r\n        }\r\n    }\r\n}\r\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete contact",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check delete contact\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Auth token 2 [ID]",
							"item": [
								{
									"name": "Create contact",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Contact created\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"contactId3\", jsonData.data.createContact.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\"\n}\n}\n\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Correct token > Run query",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"C302001 Correct token > Run query\", function () {\r",
													"    var data = pm.response.json();\r",
													"    pm.expect(data.data.contact).to.be.not.null;\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact ( $id: String!) {\r\n    contact (id: $id) {\r\n  id\r\n    dynamicProperties\r\n    {\r\n      dictionaryItem\r\n      {\r\n       id\r\n      label\r\n      }\r\n      name\r\n      value\r\n    }\r\n  }\r\n    }\r\n",
												"variables": "{\r\n  \"id\": \"{{contactId3}}\"\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Correct token > Run mutation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"C302002 Correct token > Run mutation\", function () {\r",
													"    var data = pm.response.json();\r",
													"    pm.expect(data.data.deleteContact).to.be.true;\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId3}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FinishBlocks",
							"item": [
								{
									"name": "DeleteCatalog",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/catalogs/{{catalogQA}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs",
												"{{catalogQA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCategory",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"objectIds\":[\"{{categoryQA}}\"]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/listentries/delete",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"listentries",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteStore",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/stores?ids={{storeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{storeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelist",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/pricelists?ids={{pricelistId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelistAssignment",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/assignments?ids={{pricelistAssignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistAssignmentId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "X-catalog",
					"item": [
						{
							"name": "GetToken [ID]",
							"item": [
								{
									"name": "Get admin token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set admin token\", function () {\r",
													"   \r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "grand_type",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=password&scope=offline_access&username={{adminUserName}}&password={{adminPassword}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{url}}/connect/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PrepareTestData",
							"item": [
								{
									"name": "CreateCatalog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"catalogQA\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"TestCatalogPostman\",\r\n  \"isVirtual\": false,\r\n  \"outerId\": null,\r\n  \"defaultLanguage\": {\r\n    \"catalogId\": null,\r\n    \"isDefault\": true,\r\n    \"languageCode\": \"en-US\",\r\n    \"id\": null\r\n  },\r\n  \"languages\": [\r\n    {\r\n      \"catalogId\": null,\r\n      \"isDefault\": true,\r\n      \"languageCode\": \"en-US\",\r\n      \"id\": null\r\n    }\r\n  ],\r\n  \"properties\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/catalogs",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": null,\r\n  \"code\": \"3cd53\",\r\n  \"name\": \"TestCategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateSubCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId2\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": \"{{categoryId}}\",\r\n  \"code\": \"d0d3b\",\r\n  \"name\": \"TestSubcategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateStore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"storeId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"validationRuleCodePattern\": \"^[a-zA-Z0-9_-]*$\",\r\n  \"id\": \"TestStorePostman\",\r\n  \"name\": \"TestStorePostman\",\r\n  \"catalog\": \"{{catalogQA}}\",\r\n  \"defaultLanguage\": \"en-US\",\r\n  \"defaultCurrency\": \"USD\",\r\n  \"storeState\": \"Open\",\r\n  \"languages\": [\r\n    \"en-US\"\r\n  ],\r\n  \"currencies\": [\r\n    \"USD\"\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/stores",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get pricelistId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"   pm.collectionVariables.set(\"pricelistId\", jsonData.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"productPrices\":[],\"assignments\":[],\"name\":\"TestPriceListPostman\",\"currency\":\"USD\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/pricelists",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelistAssignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"pricelistAssignmentId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"storeId\": null,\r\n  \"pricelistId\": \"{{pricelistId}}\",\r\n  \"pricelist\": null,\r\n  \"name\": \"TestPricelistAssignmentPostman\",\r\n  \"description\": null,\r\n  \"priority\": 1,\r\n  \"startDate\": null,\r\n  \"endDate\": null,\r\n  \"dynamicExpression\": {\r\n    \"all\": true,\r\n    \"not\": false,\r\n    \"id\": \"PriceConditionTree\",\r\n    \"children\": [\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockPricingCondition\",\r\n        \"children\": []\r\n      }\r\n    ]\r\n  },\r\n  \"outerId\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null,\r\n  \"$promise\": {},\r\n  \"$resolved\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/assignments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Products",
							"item": [
								{
									"name": "Create product_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId1\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId1\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct1\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code1\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"Bread1\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":1000,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Set ProductId1\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"VariationId1\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"BYR-41043129\",\r\n   \"name\":\"Bread11\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"titularItemId\":\"{{ProductId1}}\",\r\n   \"mainProductId\":\"{{ProductId1}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":1000,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:11:34.3568415Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[\r\n      {\r\n         \"semanticUrl\":\"bread11\",\r\n         \"objectId\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n         \"objectType\":\"CatalogProduct\",\r\n         \"isActive\":true,\r\n         \"languageCode\":\"en-US\",\r\n         \"id\":\"8dd50d3f-8db0-40ea-bf52-deb5073984c1\"\r\n      }\r\n   ],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread11\",\r\n                     \"objectId\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"8dd50d3f-8db0-40ea-bf52-deb5073984c1\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread11\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:11:34.3609666Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:11:34.3609666Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create product_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId2\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId2\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct2\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code2\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-234304561\",\r\n    \"name\": \"Bread2\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":1000,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 3,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"PQW-27615071\",\r\n   \"name\":\"Bread22\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"categoryId\":\"{{categoryId}}\",\r\n   \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n   \"path\":\"Cell phones\",\r\n   \"titularItemId\":\"{{ProductId2}}\",\r\n   \"mainProductId\":\"{{ProductId2}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":1000,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:37:47.8328736Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Color\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":true,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Color\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Farber\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Deep\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Deep\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a5e64e80-2484-496a-aff5-c8df9c75fbbe\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Display_size\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Bildschirmgröße\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Display size\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Front_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Internal_Storage_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Memory_Card_Slot\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"NFC\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Operating_system\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Pixels_Per_Inch_ppi\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Processor_Core_GHz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"RAM_Memory_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Rear_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"SIM_Card_Slots\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Two_SIM_cards\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Video_Recording\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Waterproof\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Weight_oz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Year_Released\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[\r\n      {\r\n         \"semanticUrl\":\"bread22\",\r\n         \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n         \"objectType\":\"CatalogProduct\",\r\n         \"isActive\":true,\r\n         \"languageCode\":\"en-US\",\r\n         \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n      }\r\n   ],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n               \"seoObjectType\":\"Category\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"cell-phones\",\r\n                     \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                     \"objectType\":\"Category\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                  }\r\n               ],\r\n               \"name\":\"Cell phones\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread22\",\r\n                     \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread22\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId2}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create product_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId3\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId3\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct3\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code3\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-2343045621\",\r\n    \"name\": \"Bread3\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryId2}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":4,\r\n    \"maxQuantity\":1000,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 1,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"PQW-27615071\",\r\n   \"name\":\"Bread22\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"categoryId\":\"{{categoryId}}\",\r\n   \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n   \"path\":\"Cell phones\",\r\n   \"titularItemId\":\"{{ProductId3}}\",\r\n   \"mainProductId\":\"{{ProductId3}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":1000,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:37:47.8328736Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId2}}\",\r\n         \"name\":\"Color\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":true,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Color\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Farber\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Deep\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Deep\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a5e64e80-2484-496a-aff5-c8df9c75fbbe\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Display_size\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Bildschirmgröße\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Display size\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Front_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Internal_Storage_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Memory_Card_Slot\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"NFC\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Operating_system\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Pixels_Per_Inch_ppi\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Processor_Core_GHz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"RAM_Memory_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Rear_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"SIM_Card_Slots\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Two_SIM_cards\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Video_Recording\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Waterproof\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Weight_oz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Year_Released\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n               \"seoObjectType\":\"Category\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"cell-phones\",\r\n                     \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                     \"objectType\":\"Category\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                  }\r\n               ],\r\n               \"name\":\"Cell phones\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread22\",\r\n                     \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread22\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId3}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId1}}\",\r\n      \"list\": {{ProductPrice1}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"TestCatalogPostman\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId1}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId1}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId2}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId2}}\",\r\n      \"list\": {{ProductPrice2}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"TestCatalogPostman\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId2}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId2}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId3}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId3}}\",\r\n      \"list\": {{ProductPrice3}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"TestCatalogPostman\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId3}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId3}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId1}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId2}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId3}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Check Index\", function(){\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect (jsonData.errorCount).to.be.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId1}}\", \"{{ProductId2}}\",\"{{ProductId3}}\", \"{{variationId1}}\", \"{{variationId2}}\", \"{{variationId3}}\"\r\n        ]\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Breadcrumb [ID]",
							"item": [
								{
									"name": "Breadcrumb",
									"item": [
										{
											"name": "Product does not contains category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C279165 Product does not contains category\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.product.breadcrumbs).length(1);\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 3000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": " query { product(id: \"{{ProductId1}}\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\n }\r\n} ",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Product contain one category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C279168 Product contain one category\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.product.breadcrumbs).length(2);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": " query { product(id: \"{{ProductId2}}\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") \r\n { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Product contains several nested categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C279169 Product contains several nested categories\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.product.breadcrumbs).length(3); \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": " query { product(id: \"{{ProductId3}}\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Variation. Product does not contains category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C279172 Product does not contains category\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.product.breadcrumbs).length(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": " query { product(id: \"{{variationId1}}\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Variation. Product contain one category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C279171 Variation. Product contain one category\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.product.breadcrumbs).length(2);\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": " query { product(id: \"{{variationId2}}\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Variation. Parent product contains several nested categories",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C279170 Variation. Parent product contains several nested categories\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.product.breadcrumbs).length(1);\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": " query { product(id: \"{{variationId3}}\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Sort products",
							"item": [
								{
									"name": "Products sort by name:asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265324 first product = 1first_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
													"\r",
													" \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 5000); "
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"name:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n\n}}}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"name:asc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by name:desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265324 first product = zlast_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct3\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"name:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n\n}}}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"name:desc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by price:asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265337 first product = 0\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"   pm.expect(jsonData.data.products.items[0].price.list.amount).to.equal(101.000);\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"price:asc\"\nfirst: 60\n) {\ntotalCount\nitems {\nid\nname\n price\n {\n     list\n {\n     amount\n     currency{\n         code\n     }\n     }}\n\n}}}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"price:asc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by price:desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265337 first product = xFold CINEMA X12 RTF U7, amount =  23638.0\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"price:desc\"\nfirst: 60\n) {\ntotalCount\nitems {\nid\nname\n price\n {\n     list\n {\n     amount\n     currency{code}\n     }}\n\n}}}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"EUR\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"price:desc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by createdDate:asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265338 first product = 1first_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\n\nstoreId: \"{{storeId}}\",\nsort:\"createdDate:asc\"\n\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by createdDate:desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265338 first product = zlast_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct3\"));\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nstoreId: \"{{storeId}}\"\nsort:\"createdDate:desc\"\n){\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by priority:asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265336 first product = 1first_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"priority:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"priority:asc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by priority:desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265336 first product = zlast_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"priority:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by sku:asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265335 first product = 1first_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"sku:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"sku:asc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Products sort by sku:desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"C265335 first product = zlast_product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													" pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct3\"));\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"sku:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
												"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"sku:desc\",\n  \"productIds\": [ \n  ]\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get product discount [ID]",
							"item": [
								{
									"name": "Check product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.product.id).to.eql(pm.collectionVariables.get(\"ProductId1\"));\r",
													"    pm.expect(jsonData.data.product.name).to.eql(\"Bread1\");\r",
													"     pm.expect(jsonData.data.product.code).to.eql(pm.collectionVariables.get(\"Code1\"));      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  product(id: \"{{ProductId1}}\", storeId: \"{{storeId}}\") {\r\n    id\r\n    name\r\n    code\r\n    variations{\r\n      id\r\n      code\r\n    }\r\n    description {\r\n      id\r\n      languageCode\r\n      reviewType\r\n      content\r\n    }\r\n    descriptions{\r\n      id\r\n      languageCode\r\n      reviewType\r\n      content\r\n    }\r\n    properties{\r\n      name\r\n      value\r\n    }\r\n    images {\r\n      url\r\n      relativeUrl\r\n    }\r\n    assets {\r\n      id\r\n      name\r\n      cultureName\r\n    }\r\n    seoInfo {\r\n      name\r\n      semanticUrl\r\n      metaKeywords\r\n      metaDescription\r\n    }\r\n    price {\r\n      pricelistId\r\n      list {\r\n        amount\r\n      }\r\n      sale {\r\n        amount\r\n      }\r\n      discountAmount {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Promo added\", function () {\r",
													"var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"promotionId\"));\r",
													";\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isAllowCombiningWithSelf\": false,\r\n  \"dynamicExpression\": {\r\n    \"all\": true,\r\n    \"not\": false,\r\n    \"id\": \"PromotionConditionAndRewardTree\",\r\n    \"availableChildren\": [\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockCustomerCondition\",\r\n        \"availableChildren\": [\r\n          {\r\n            \"id\": \"ConditionIsRegisteredUser\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"ConditionIsEveryone\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"ConditionIsFirstTimeBuyer\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"UserGroupsContainsCondition\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          }\r\n        ],\r\n        \"children\": []\r\n      },\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockCatalogCondition\",\r\n        \"availableChildren\": [\r\n          {\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": [],\r\n            \"id\": \"ConditionCategoryIs\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"ConditionCodeContains\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"ConditionCurrencyIs\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"ConditionEntryIs\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"quantity\": 0,\r\n            \"quantitySecond\": 0,\r\n            \"compareCondition\": \"AtLeast\",\r\n            \"id\": \"ConditionInStockQuantity\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"id\": \"ConditionHasNoSalePrice\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          }\r\n        ],\r\n        \"children\": []\r\n      },\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockCartCondition\",\r\n        \"availableChildren\": [\r\n          {\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": [],\r\n            \"numItem\": 0,\r\n            \"numItemSecond\": 0,\r\n            \"compareCondition\": \"AtLeast\",\r\n            \"id\": \"ConditionAtNumItemsInCart\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"numItem\": 0,\r\n            \"numItemSecond\": 0,\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": [],\r\n            \"compareCondition\": \"AtLeast\",\r\n            \"id\": \"ConditionAtNumItemsInCategoryAreInCart\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"numItem\": 0,\r\n            \"numItemSecond\": 0,\r\n            \"compareCondition\": \"AtLeast\",\r\n            \"id\": \"ConditionAtNumItemsOfEntryAreInCart\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"subTotal\": 0,\r\n            \"subTotalSecond\": 0,\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": [],\r\n            \"compareCondition\": \"AtLeast\",\r\n            \"id\": \"ConditionCartSubtotalLeast\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          }\r\n        ],\r\n        \"children\": []\r\n      },\r\n      {\r\n        \"id\": \"BlockReward\",\r\n        \"availableChildren\": [\r\n          {\r\n            \"amount\": 0,\r\n            \"id\": \"RewardCartGetOfAbsSubtotal\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardCartGetOfRelSubtotal\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"numItem\": 0,\r\n            \"id\": \"RewardItemGetFreeNumItemOfProduct\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"id\": \"RewardItemGetOfAbs\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"numItem\": 0,\r\n            \"id\": \"RewardItemGetOfAbsForNum\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardItemGetOfRel\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"numItem\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardItemGetOfRelForNum\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"quantity\": 0,\r\n            \"id\": \"RewardItemGiftNumItem\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"id\": \"RewardShippingGetOfAbsShippingMethod\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardShippingGetOfRelShippingMethod\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"id\": \"RewardPaymentGetOfAbs\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardPaymentGetOfRel\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"amount\": 0,\r\n            \"product\": {},\r\n            \"forNthQuantity\": 0,\r\n            \"inEveryNthQuantity\": 0,\r\n            \"itemLimit\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardItemForEveryNumInGetOfRel\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          },\r\n          {\r\n            \"conditionalProduct\": {},\r\n            \"amount\": 0,\r\n            \"product\": {},\r\n            \"forNthQuantity\": 0,\r\n            \"inEveryNthQuantity\": 0,\r\n            \"itemLimit\": 0,\r\n            \"maxLimit\": 0,\r\n            \"id\": \"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n            \"availableChildren\": [],\r\n            \"children\": []\r\n          }\r\n        ],\r\n        \"children\": []\r\n      }\r\n    ],\r\n    \"children\": [\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockCustomerCondition\",\r\n        \"children\": [\r\n          {\r\n            \"id\": \"ConditionIsEveryone\",\r\n            \"children\": [],\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": []\r\n          }\r\n        ],\r\n        \"excludingCategoryIds\": [],\r\n        \"excludingProductIds\": []\r\n      },\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockCatalogCondition\",\r\n        \"children\": [\r\n          {\r\n            \"id\": \"ConditionEntryIs\",\r\n            \"children\": [],\r\n            \"productIds\": [\r\n              \"{{ProductId1}}\"\r\n            ],\r\n            \"productNames\": [\r\n              \"{{Nameofproduct1}}\"\r\n            ],\r\n            \"productCodes\": [\r\n              \"{{Code1}}\"\r\n            ],\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": []\r\n          }\r\n        ],\r\n        \"excludingCategoryIds\": [],\r\n        \"excludingProductIds\": []\r\n      },\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockCartCondition\",\r\n        \"children\": [],\r\n        \"excludingCategoryIds\": [],\r\n        \"excludingProductIds\": []\r\n      },\r\n      {\r\n        \"id\": \"BlockReward\",\r\n        \"children\": [\r\n          {\r\n            \"amount\": 50,\r\n            \"numItem\": \"1\",\r\n            \"id\": \"RewardItemGetOfAbsForNum\",\r\n            \"children\": [],\r\n            \"productId\": \"{{ProductId1}}\",\r\n            \"productName\": \"{{Nameofproduct1}}\",\r\n            \"productCode\": \"{{Code1}}\",\r\n            \"excludingCategoryIds\": [],\r\n            \"excludingProductIds\": []\r\n          }\r\n        ],\r\n        \"excludingCategoryIds\": [],\r\n        \"excludingProductIds\": []\r\n      }\r\n    ]\r\n  },\r\n  \"type\": \"DynamicPromotion\",\r\n  \"isActive\": true,\r\n  \"priority\": 0,\r\n  \"isExclusive\": true,\r\n  \"hasCoupons\": false,\r\n  \"maxUsageCount\": 0,\r\n  \"maxUsageOnOrder\": 0,\r\n  \"maxPersonalUsageCount\": 0,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"coupons\": [],\r\n  \"name\": \"{{Nameofproduct1}}\",\r\n  \"startDate\": \"2022-01-16T23:00:00.000Z\",\r\n  \"storeIds\": [\r\n    \"{{storeId}}\"\r\n  ],\r\n    \"modifiedDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{promotionId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/marketing/promotions",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"marketing",
												"promotions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get product discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"C260933 Check product discount\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"   pm.expect(jsonData.data.product.prices[0].discountAmount.amount).to.eql(50);\r",
													"   pm.expect(jsonData.data.product.prices[0].discounts[0].amount).to.eql(50);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query {\r\n  product(id: \"{{ProductId1}}\", storeId: \"{{storeId}}\") {\r\n    id\r\n    code\r\n    prices {\r\n      pricelistId\r\n      discountAmount {\r\n        amount\r\n      }\r\n      list {\r\n        amount\r\n      }\r\n      sale{\r\n        amount\r\n      }\r\n      discounts {\r\n        amount\r\n        amountWithTax\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete promo",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"marketing",
												"promotions"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{promotionId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get products [ID]",
							"item": [
								{
									"name": "Search",
									"item": [
										{
											"name": "Index product",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check Index\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect (jsonData.errorCount).to.be.eql(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId1}}\"\r\n        ]\r\n    }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get search result filtered by price",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C265387 Get search result filtered by price\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"ProductId1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\nproducts(\r\nquery: \"\"\r\nstoreId: \"{{storeId}}\"\r\nfilter: \"price.usd:(1 TO 9999]\"\r\nfirst: 100\r\n) {\r\ntotalCount\r\nitems {\r\n  id\r\n  name\r\n  imgSrc\r\n  slug\r\n  price {\r\n    pricelistId\r\n    actual {\r\n      amount\r\n    }\r\n    list {\r\n      amount\r\n    }\r\n    sale {\r\n      amount\r\n    }\r\n  }\r\n  properties {\r\n    name\r\n  }\r\n  seoInfo {\r\n    semanticUrl\r\n    metaKeywords\r\n    metaDescription\r\n  }\r\n}\r\n}\r\n}\r\n\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get products by query",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261142 Get products by query. \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"ProductId2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\nproducts(\r\nquery: \"{{Nameofproduct2}}\"\r\nstoreId: \"{{storeId}}\"\r\nfirst: 100\r\n) {\r\ntotalCount\r\nitems {\r\n  id\r\n  name\r\n  imgSrc\r\n  slug\r\n  price {\r\n    pricelistId\r\n    actual {\r\n      amount\r\n    }\r\n    list {\r\n      amount\r\n    }\r\n    sale {\r\n      amount\r\n    }\r\n  }\r\n  properties {\r\n    name\r\n  }\r\n  seoInfo {\r\n    semanticUrl\r\n    metaKeywords\r\n    metaDescription\r\n  }\r\n}\r\n}\r\n}\r\n\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get search result filtered by category",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261143 Get search result filtered by category\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"ProductId2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\nproducts(\r\nquery: \"\"\r\nstoreId: \"{{storeId}}\"\r\nfilter: \"status:hidden,visible is:variation,product category.path:{{catalogQA}}/{{categoryId}}\"\r\nfirst: 100\r\n) {\r\ntotalCount\r\nitems {\r\n  id\r\n  name\r\n  imgSrc\r\n  slug\r\n  price {\r\n    pricelistId\r\n    actual {\r\n      amount\r\n    }\r\n    list {\r\n      amount\r\n    }\r\n    sale {\r\n      amount\r\n    }\r\n  }\r\n  properties {\r\n    name\r\n  }\r\n  seoInfo {\r\n    semanticUrl\r\n    metaKeywords\r\n    metaDescription\r\n  }\r\n}\r\n}\r\n}\r\n\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get concrete category by category id and store id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C260932 Check name of category\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.category.name).to.equal(\"TestCategoryPostman\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\ncategory(id: \"{{categoryId}}\", storeId: \"{{storeId}}\") {\nname\ncode\n}\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Clear all",
							"item": [
								{
									"name": "Delete property_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/properties?doDeleteValues=true&id={{propertyId1}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"properties"
											],
											"query": [
												{
													"key": "doDeleteValues",
													"value": "true"
												},
												{
													"key": "id",
													"value": "{{propertyId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete property_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/properties?doDeleteValues=true&id={{propertyId2}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"properties"
											],
											"query": [
												{
													"key": "doDeleteValues",
													"value": "true"
												},
												{
													"key": "id",
													"value": "{{propertyId2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete property_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/properties?doDeleteValues=true&id={{propertyId3}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"properties"
											],
											"query": [
												{
													"key": "doDeleteValues",
													"value": "true"
												},
												{
													"key": "id",
													"value": "{{propertyId3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete property_4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/properties?doDeleteValues=true&id={{propertyId4}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"properties"
											],
											"query": [
												{
													"key": "doDeleteValues",
													"value": "true"
												},
												{
													"key": "id",
													"value": "{{propertyId4}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete property_5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/properties?doDeleteValues=true&id={{propertyId5}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"properties"
											],
											"query": [
												{
													"key": "doDeleteValues",
													"value": "true"
												},
												{
													"key": "id",
													"value": "{{propertyId5}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FinishBlocks",
							"item": [
								{
									"name": "DeleteCatalog",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/catalogs/{{catalogQA}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs",
												"{{catalogQA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCategory",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"objectIds\":[\"{{categoryQA}}\"]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/listentries/delete",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"listentries",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteStore",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/stores?ids={{storeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{storeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelist",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/pricelists?ids={{pricelistId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelistAssignment",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/assignments?ids={{pricelistAssignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistAssignmentId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "X-cart",
					"item": [
						{
							"name": "GetToken [ID] Copy",
							"item": [
								{
									"name": "Get admin token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set admin token\", function () {\r",
													"   \r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "grand_type",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=password&scope=offline_access&username={{adminUserName}}&password={{adminPassword}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{url}}/connect/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PrepareTestData",
							"item": [
								{
									"name": "CreateCatalog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"catalogQA\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"TestCatalogPostman\",\r\n  \"isVirtual\": false,\r\n  \"outerId\": null,\r\n  \"defaultLanguage\": {\r\n    \"catalogId\": null,\r\n    \"isDefault\": true,\r\n    \"languageCode\": \"en-US\",\r\n    \"id\": null\r\n  },\r\n  \"languages\": [\r\n    {\r\n      \"catalogId\": null,\r\n      \"isDefault\": true,\r\n      \"languageCode\": \"en-US\",\r\n      \"id\": null\r\n    }\r\n  ],\r\n  \"properties\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/catalogs",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": null,\r\n  \"code\": \"3cd53\",\r\n  \"name\": \"TestCategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateSubCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId2\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": \"{{categoryId}}\",\r\n  \"code\": \"d0d3b\",\r\n  \"name\": \"TestSubcategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add FFC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"ffcName1Postman\", jsonData.name);\r",
													"    \r",
													"    pm.collectionVariables.set(\"ffcId1Postman\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"maxReleasesPerPickBatch\":20,\"pickDelay\":30,\"name\":\"TestFFCPostman\"}"
										},
										"url": {
											"raw": "{{url}}/api/inventory/fulfillmentcenters",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"fulfillmentcenters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add FFC Available",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"ffcName1PostmanAvailable\", jsonData.name);\r",
													"    \r",
													"    pm.collectionVariables.set(\"ffcId1PostmanAvailable\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"maxReleasesPerPickBatch\":20,\"pickDelay\":30,\"name\":\"TestFFCPostmanAvailable\"}"
										},
										"url": {
											"raw": "{{url}}/api/inventory/fulfillmentcenters",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"fulfillmentcenters"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateStore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"storeId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"validationRuleCodePattern\": \"^[a-zA-Z0-9_-]*$\",\r\n  \"id\": \"TestStorePostman\",\r\n  \"name\": \"TestStorePostman\",\r\n  \"catalog\": \"{{catalogQA}}\",\r\n  \"defaultLanguage\": \"en-US\",\r\n  \"defaultCurrency\": \"USD\",\r\n  \"storeState\": \"Open\",\r\n  \"languages\": [\r\n    \"en-US\"\r\n  ],\r\n  \"currencies\": [\r\n    \"USD\"\r\n  ],\r\n  \"mainFulfillmentCenterId\":\"{{ffcId1Postman}}\",\r\n  \"additionalFulfillmentCenterIds\": [\r\n    \"{{ffcId1PostmanAvailable}}\"\r\n  ],\r\n   \"mainReturnsFulfillmentCenterId\": \"{{ffcId1Postman}}\",\r\n  \"returnsFulfillmentCenterIds\": [\r\n    \"{{ffcId1PostmanAvailable}}\"\r\n  ],\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.TaxCalculationEnabled\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.AllowAnonymousUsers\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.IsSpa\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.EmailVerificationEnabled\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.EnablePriceRoundingForTotalsCalculation\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"Collapsed\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|SEO\",\r\n         \"name\":\"Stores.SeoLinksType\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            \"None\",\r\n            \"Short\",\r\n            \"Collapsed\",\r\n            \"Long\"\r\n         ],\r\n         \"defaultValue\":\"Collapsed\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"{{storeCompanyStatus}}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Customer|Statuses\",\r\n         \"name\":\"Customer.OrganizationDefaultStatus\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"{{storeCustomerStatus}}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Customer|Statuses\",\r\n         \"name\":\"Customer.ContactDefaultStatus\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.CustomerOrderNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.PaymentInNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.ShipmentNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes|Quotes\",\r\n         \"name\":\"Quotes.QuoteRequestNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes|Quotes\",\r\n         \"name\":\"Quotes.EnableQuotes\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.EnableTracking\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleTagManagerId\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleAnalyticsTrackingId\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.CreateECommerceTransaction\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.ReverseECommerceTransaction\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Return\",\r\n         \"groupName\":\"Return|Return\",\r\n         \"name\":\"Return.ReturnNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions|Subscriptions\",\r\n         \"name\":\"Subscription.EnableSubscriptions\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions|Subscriptions\",\r\n         \"name\":\"Subscription.SubscriptionNewNumberTemplate\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabled\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabledForAnonymous\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|Product Reviews\",\r\n         \"name\":\"CustomerReviews.CanSubmitReviewWhenHasOrder\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"12345\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"Average\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews|General\",\r\n         \"name\":\"CustomerReviews.Calculation.Method\",\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            \"Average\",\r\n            \"Wilson\"\r\n         ],\r\n         \"defaultValue\":\"Average\",\r\n         \"isDictionary\":false\r\n      }\r\n   ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/stores",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get pricelistId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"   pm.collectionVariables.set(\"pricelistId\", jsonData.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"productPrices\":[],\"assignments\":[],\"name\":\"TestPriceListPostman\",\"currency\":\"USD\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/pricelists",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelistAssignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"pricelistAssignmentId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"storeId\": null,\r\n  \"pricelistId\": \"{{pricelistId}}\",\r\n  \"pricelist\": null,\r\n  \"name\": \"TestPricelistAssignmentPostman\",\r\n  \"description\": null,\r\n  \"priority\": 1,\r\n  \"startDate\": null,\r\n  \"endDate\": null,\r\n  \"dynamicExpression\": {\r\n    \"all\": true,\r\n    \"not\": false,\r\n    \"id\": \"PriceConditionTree\",\r\n    \"children\": [\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockPricingCondition\",\r\n        \"children\": []\r\n      }\r\n    ]\r\n  },\r\n  \"outerId\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null,\r\n  \"$promise\": {},\r\n  \"$resolved\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/assignments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "CreateProducts",
							"item": [
								{
									"name": "Create product_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId1\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId1\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct1\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code1\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"Bread1\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":1000,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Set ProductId1\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"VariationId1\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"BYR-41043129\",\r\n   \"name\":\"Bread11\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"titularItemId\":\"{{ProductId1}}\",\r\n   \"mainProductId\":\"{{ProductId1}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":1000,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:11:34.3568415Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[\r\n      {\r\n         \"semanticUrl\":\"bread11\",\r\n         \"objectId\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n         \"objectType\":\"CatalogProduct\",\r\n         \"isActive\":true,\r\n         \"languageCode\":\"en-US\",\r\n         \"id\":\"8dd50d3f-8db0-40ea-bf52-deb5073984c1\"\r\n      }\r\n   ],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread11\",\r\n                     \"objectId\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"8dd50d3f-8db0-40ea-bf52-deb5073984c1\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread11\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:11:34.3609666Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:11:34.3609666Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create product_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId2\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId2\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct2\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code2\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-234304561\",\r\n    \"name\": \"Bread2\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryId}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":1000,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 3,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"PQW-27615071\",\r\n   \"name\":\"Bread22\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"categoryId\":\"{{categoryId}}\",\r\n   \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n   \"path\":\"Cell phones\",\r\n   \"titularItemId\":\"{{ProductId2}}\",\r\n   \"mainProductId\":\"{{ProductId2}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":1000,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:37:47.8328736Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Color\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":true,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Color\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Farber\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Deep\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Deep\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a5e64e80-2484-496a-aff5-c8df9c75fbbe\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Display_size\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Bildschirmgröße\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Display size\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Front_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Internal_Storage_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Memory_Card_Slot\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"NFC\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Operating_system\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Pixels_Per_Inch_ppi\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Processor_Core_GHz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"RAM_Memory_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Rear_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"SIM_Card_Slots\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Two_SIM_cards\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Video_Recording\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Waterproof\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Weight_oz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Year_Released\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[\r\n      {\r\n         \"semanticUrl\":\"bread22\",\r\n         \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n         \"objectType\":\"CatalogProduct\",\r\n         \"isActive\":true,\r\n         \"languageCode\":\"en-US\",\r\n         \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n      }\r\n   ],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n               \"seoObjectType\":\"Category\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"cell-phones\",\r\n                     \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                     \"objectType\":\"Category\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                  }\r\n               ],\r\n               \"name\":\"Cell phones\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread22\",\r\n                     \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread22\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId2}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create product_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId3\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId3\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct3\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code3\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-2343045621\",\r\n    \"name\": \"Bread3\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryId2}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":4,\r\n    \"maxQuantity\":1000,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 1,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"PQW-27615071\",\r\n   \"name\":\"Bread22\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"categoryId\":\"{{categoryId}}\",\r\n   \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n   \"path\":\"Cell phones\",\r\n   \"titularItemId\":\"{{ProductId3}}\",\r\n   \"mainProductId\":\"{{ProductId3}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":1000,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:37:47.8328736Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId2}}\",\r\n         \"name\":\"Color\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":true,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Color\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Farber\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Deep\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Deep\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a5e64e80-2484-496a-aff5-c8df9c75fbbe\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Display_size\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Bildschirmgröße\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Display size\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Front_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Internal_Storage_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Memory_Card_Slot\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"NFC\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Operating_system\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Pixels_Per_Inch_ppi\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Processor_Core_GHz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"RAM_Memory_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Rear_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"SIM_Card_Slots\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Two_SIM_cards\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Video_Recording\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Waterproof\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Weight_oz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Year_Released\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n               \"seoObjectType\":\"Category\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"cell-phones\",\r\n                     \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                     \"objectType\":\"Category\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                  }\r\n               ],\r\n               \"name\":\"Cell phones\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread22\",\r\n                     \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread22\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId3}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId1}}\",\r\n      \"list\": {{ProductPrice1}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"TestCatalogPostman\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId1}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId1}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId2}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId2}}\",\r\n      \"list\": {{ProductPrice2}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"TestCatalogPostman\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId2}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId2}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId3}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId3}}\",\r\n      \"list\": {{ProductPrice3}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"TestCatalogPostman\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId3}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId3}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"{{ffcId1Postman}}\",\r\n  \"fulfillmentCenterName\": \"{{ffcName1Postman}}\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId1}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"{{ffcId1Postman}}\",\r\n  \"fulfillmentCenterName\": \"{{ffcName1Postman}}\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId2}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId2}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"{{ffcId1Postman}}\",\r\n  \"fulfillmentCenterName\": \"{{ffcName1Postman}}\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId3}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId3}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Check Index\", function(){\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect (jsonData.errorCount).to.be.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId1}}\", \"{{ProductId2}}\",\"{{ProductId3}}\", \"{{variationId1}}\", \"{{variationId2}}\", \"{{variationId3}}\"\r\n        ]\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Whish list by admin [ID]",
							"item": [
								{
									"name": "Prepare",
									"item": [
										{
											"name": "Create Contact_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set contactId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
														"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\"\n}\n}\n\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add user_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
														"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\",\n    \"storeId\":\"{{storeId}}\"\n      }}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user_1 > Set Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Set userId\", function(){\r",
															"var jsonData =pm.response.json();\r",
															"pm.collectionVariables.set(\"userId\",jsonData.data.user.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query user(\r\n  $id: String\r\n  $userName: String\r\n  $email: String\r\n  $loginProvider: String\r\n  $providerKey: String\r\n) {\r\n  user(\r\n    id: $id\r\n    userName: $userName\r\n    email: $email\r\n    loginProvider: $loginProvider\r\n    providerKey: $providerKey\r\n  ) {\r\n    id\r\n    isAdministrator\r\n        userName\r\n    email\r\n    storeId\r\n    userName\r\n    userType\r\n    securityStamp\r\n    roles{\r\n      id\r\n      name\r\n      description\r\n      permissions\r\n    }\r\n  }\r\n}",
														"variables": "{\r\n\"userName\": \"{{userName1}}\",\r\n\"loginProvider\":\"\",\r\n\"providerKey\": \"\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Token for User_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Set Token1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {
													"content-type": true
												}
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "grand_type",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
													"options": {
														"raw": {
															"language": "text"
														}
													}
												},
												"url": {
													"raw": "{{url}}/connect/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"connect",
														"token"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Whishlist",
									"item": [
										{
											"name": "Create list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317343 Set listId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"listId\",jsonData.data.createWishlist.id);\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "\r\nmutation createWishlist($command: InputCreateWishlistType!) {\r\n    createWishlist(command: $command) {\r\n        id\r\n        customerId\r\n        customerName\r\n        name\r\n            storeId\r\n            customerId\r\n            currency {\r\n          code\r\n        }\r\n    }\r\n}\r\n\r\n",
														"variables": "\r\n{\r\n    \"command\": {\r\n        \"storeId\": \"{{storeId}}\",\r\n        \"listName\": \"Whishlist1\",\r\n        \"userId\": \"{{userId}}\",\r\n        \"currencyCode\": \"USD\",\r\n        \"cultureName\": \"en-US\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Search wish lists",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317344 Search - Whishlist created\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"   pm.expect(jsonData.data.wishlists).to.be.not.empty;\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query wishlists($after: String, $first: Int, $userId: String!) {\r\n  wishlists(after: $after, first: $first, userId: $userId) {\r\n    totalCount\r\n    items {\r\n      id\r\n      name\r\n      items {\r\n          id\r\n          productId\r\n          name\r\n          }\r\n      }\r\n  }\r\n}\r\n\r\n",
														"variables": "{\r\n  \"first\": 50,\r\n  \"after\": \"0\",\r\n  \"userId\": \"{{userId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Rename",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317346 Whishlist1 renamed\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.renameWishlist.name).to.be.equal(\"New wish list\");\r",
															"\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation renameWishlist($command: InputRenameWishlistType!) {\r\n    renameWishlist(command: $command) {\r\n        id\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n    \"command\": {\r\n        \"listId\": \"{{listId}}\",\r\n        \"listName\": \"New wish list\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get by ID - check Rename",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317345 getWishList - check rename\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.wishlist.name).to.be.equal(\"New wish list\");\r",
															"\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query wishlist($listId: String!) {\r\n    wishlist (listId: $listId) {\r\n      id\r\n      name\r\n      storeId\r\n      customerId\r\n      customerName\r\n      currency {\r\n        code\r\n      }\r\n      itemsCount\r\n      items {\r\n          id\r\n          productId\r\n          name\r\n          }\r\n      }\r\n}",
														"variables": "{\r\n    \"listId\": \"{{listId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add item to list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C317348 Set lineItemId\", function(){\r",
															"var jsonData =pm.response.json();\r",
															"pm.collectionVariables.set(\"lineItemId\",jsonData.data.addWishlistItem.items[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addWishlistItem ($command: InputAddWishlistItemType!) {\r\n    addWishlistItem (command: $command) {\r\n        id\r\n        name\r\n        items {\r\n            id\r\n            quantity\r\n            product {\r\n              name\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"listId\": \"{{listId}}\",\r\n    \"productId\" : \"{{ProductId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check items in the wish list (old created query) Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317349 check items (old)  - items added\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.wishlist.items[0].name).to.be.equal(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query wishlistType( $listId: String!) {\r\n    wishlist(listId: $listId) {\r\n        id\r\n        name\r\n        storeId\r\n        customerName\r\n        items {\r\n          name\r\n          id\r\n        }\r\n    }\r\n    }\r\n\r\n",
														"variables": "{\r\n    \"listId\": \"{{listId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create list 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"\r",
															"pm.test(\"Set and listId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"listId2\",jsonData.data.createWishlist.id);\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "\r\nmutation createWishlist($command: InputCreateWishlistType!) {\r\n    createWishlist(command: $command) {\r\n        id\r\n        name\r\n            storeId\r\n            customerId\r\n            currency {\r\n          code\r\n        }\r\n    }\r\n}\r\n\r\n",
														"variables": "\r\n{\r\n    \"command\": {\r\n        \"storeId\": \"{{storeId}}\",\r\n        \"listName\": \"Whishlist2\",\r\n        \"userId\": \"{{userId}}\",\r\n        \"currencyCode\": \"USD\",\r\n        \"cultureName\": \"en-US\"\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move item to another list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317350 Check listId2 - item moved\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"   pm.expect(jsonData.data.moveWishlistItem.name).to.be.equal(\"Whishlist2\");\r",
															"   pm.expect(jsonData.data.moveWishlistItem.items[0].product.name).to.be.equal(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation moveWishlistItem ($command: InputMoveWishlistItemType!) {\r\n    moveWishlistItem (command: $command) {\r\n        id\r\n            name\r\n        items {\r\n            id\r\n            quantity\r\n            product {\r\n              name\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"listId\": \"{{listId}}\",\r\n    \"lineItemId\":  \"{{lineItemId}}\",\r\n    \"destinationListId\": \"{{listId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check items in the wish list (old created query)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check listId - item removed\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"   pm.expect(jsonData.data.wishlist.name).to.be.equal(\"New wish list\");\r",
															"   pm.expect(jsonData.data.wishlist.items).to.be.empty;\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query wishlistType( $listId: String!) {\r\n    wishlist(listId: $listId) {\r\n        id\r\n        name\r\n        storeId\r\n        customerName\r\n        items {\r\n          name\r\n          id\r\n        }\r\n    }\r\n    }\r\n\r\n",
														"variables": "{\r\n    \"listId\": \"{{listId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove item from list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317351 item removed\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.removeWishlistItem.items).to.be.empty;\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeWishlistItem ($command: InputRemoveWishlistItemType!) {\r\n    removeWishlistItem (command: $command) {\r\n        id\r\n        name\r\n        items {\r\n            id\r\n            quantity\r\n            product {\r\n              name\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"listId\": \"{{listId}}\",\r\n    \"lineItemId\":  \"{{lineItemId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check items in the wish list (old created query)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"check items (old)  - item remove\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.wishlist.items).to.be.empty;\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query wishlistType( $listId: String!) {\r\n    wishlist(listId: $listId) {\r\n        id\r\n        name\r\n        storeId\r\n        customerName\r\n        items {\r\n          name\r\n          id\r\n        }\r\n    }\r\n    }\r\n\r\n",
														"variables": "{\r\n    \"listId\": \"{{listId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C317347 wishList removed\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.removeWishlist).to.true;\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeWishlist($command: InputRemoveWishlistType!) {\r\n    removeWishlist (command: $command)\r\n}\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"listId\": \"{{listId}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get by ID - check Delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"getWishList - check Delete\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.wishlist).to.be.null;\r",
															"\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query wishlist($listId: String!) {\r\n    wishlist (listId: $listId) {\r\n      id\r\n      name\r\n      storeId\r\n      customerId\r\n      customerName\r\n      currency {\r\n        code\r\n      }\r\n      itemsCount\r\n      items {\r\n          id\r\n          productId\r\n          name\r\n          }\r\n      }\r\n}",
														"variables": "{\r\n    \"listId\": \"{{listId}}\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{Token1}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Delete",
									"item": [
										{
											"name": "Delete users",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\"\r\n    ]\r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contact_1",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Get all carts Anon [ID]",
							"item": [
								{
									"name": "Get all carts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"C261104  Access denied\", function () {\r",
													"      var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors).to.not.empty;\r",
													"    pm.expect(jsonData.errors[0].message).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
													"});\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query carts {\n  carts(storeId: \"{{storeId}}\") {\n    items {\n      id\n      name\n      customerName\n    }\n  }\n}\n\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cart [ID]",
							"item": [
								{
									"name": "Cart Admin [ID]",
									"item": [
										{
											"name": "Delete promo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"marketing",
														"promotions"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{promotionId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all carts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C261110 Items not empty\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"     pm.expect(jsonData.data.carts.items).to.be.not.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query carts {\n  carts(storeId: \"{{storeId}}\") {\n    items {\n      id\n      name\n      customerName\n    }\n  }\n}\n\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C251512 Set cartId, userId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
															"    pm.collectionVariables.set(\"userId\", jsonData.data.cart.customerId);\r",
															"});\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check available payment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
															"     pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check available shipment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
															" pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\ncustomerName\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
														"variables": "{}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add items",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n      items {\r\nid\r\nname\r\nquantity\r\nproductId\r\nlistPrice{\r\namount\r\n}\r\nnote\r\n}\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId3}}\",\r\n        \"quantity\": 5\r\n    }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Cart after add items",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C279150 Check items in cart\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.items[0,1]).to.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"Set lineitemId\", function(){\r",
															" var jasonData =pm.response.json();  \r",
															"pm.collectionVariables.set(\"lineItemId1\", jasonData.data.cart.items[0].id);\r",
															"pm.collectionVariables.set(\"lineItemId2\", jasonData.data.cart.items[1].id);\r",
															"pm.collectionVariables.set(\"cartId\", jasonData.data.cart.id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove cart item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C261899 Check after remove lineitem\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"lineItemId1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"lineItemId2\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
														"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add item",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C261890 Check additem\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItem).to.not.eql(null);     \r",
															"pm.expect(jsonData.data.addItem.id).to.be.a(\"string\");    \r",
															"pm.expect(jsonData.data.addItem.items[0,1]).to.be.an(\"object\");\r",
															"pm.expect(data.errors).to.be.undefined;\r",
															"\r",
															"pm.collectionVariables.set(\"lineItemId1\", jsonData.data.addItem.items[0].id);\r",
															"pm.collectionVariables.set(\"lineItemId2\", jsonData.data.addItem.items[1].id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nname\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n   \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"\",\n    \"cartId\": \"{{cartId}}\",\n    \"productId\": \"{{ProductId2}}\",\n    \"quantity\": 5,\n    \"comment\": \"{{comment}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change cart item qty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261893 Check after change qty\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(pm.response.text()).to.include(\"33\");\r",
															"    pm.expect(pm.response.text()).to.include(\"6\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"quantity\": 33\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "changeCartItemQuantity=0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C328548 Check after change qty\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.changeCartItemQuantity.items).length(1);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"quantity\": 0\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change cart item price",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261895 Check after change price\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.changeCartItemPrice.items[0].id).equal(pm.collectionVariables.get(\"lineItemId1\"))\r",
															"    pm.expect(data.data.changeCartItemPrice.items[0].listPrice.amount).to.exist\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
														"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"price\": 10000\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change comment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261887 Add comment\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.changeComment.comment).to.eql(pm.collectionVariables.get(\"newComment\"))\r",
															";\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"{{newComment}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change cart item comment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C262086 Check after change lineitems comment\", function () {\r",
															"    var data = pm.response.json();\r",
															"     pm.expect(data.data.changeCartItemComment.items[0].note).equal(pm.collectionVariables.get(\"lineItemsComment\"))\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
														"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Set cartId\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"});\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"C265593 Check available shipment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
															" pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"C265594 Check available payment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
															"     pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic property to cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C327832 Add dynamicproperty to cart\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[0]).to.be.an(\"Object\"); \r",
															"pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															" pm.test(\"C327786 Check values short text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															" });\r",
															"\r",
															" pm.test(\"C327787 Check values long text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															" });\r",
															"\r",
															" pm.test(\"C327788 Check values int\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327789 Check values decimal\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															" });\r",
															"\r",
															"   pm.test(\"C327790 Check values html\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327791 Check values image\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327792 Check values bool\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327793 Check values datetime\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327794 Check values dictionary\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															" });\r",
															"\r",
															" pm.test(\"C327795 Check values multivalue\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															" });\r",
															"\r",
															"  pm.test(\"C327796 Check values Multilingual \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															" });\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n}\r\n,{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update dynamic property to cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    \r",
															"pm.test(\"C341199 Update dynamic property to cart\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data_update\"));\r",
															" });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"{{short2_update}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"{{data_update}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": {{decimal_update}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"{{html_update}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"{{image_update}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int_update}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"{{long_update}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n}\r\n,{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n} ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for lineitems in cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327833 Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"    \r",
															"pm.test(\"C327797 Check values short text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															" });\r",
															" \r",
															"pm.test(\"C327798 Check values long text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327799 Check values int\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327800 Check values decimal\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327801 Check values html\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327802 Check values image\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327803 Check values bool\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327804 Check values datetime\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327805 Check values dictionary\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															" });\r",
															"\r",
															" pm.test(\"C327806 Check values multivalue\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															" });\r",
															"\r",
															"  pm.test(\"C327807 Check values Multilingual \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															" });\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update dynamic properties for lineitems in cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    \r",
															"pm.test(\"C341198 Update dynamic properties for lineitems in cart\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data_update\"));\r",
															" });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data_update}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal_update}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html_update}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image_update}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int_update}}\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long_update}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"222\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short2_update}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add cart payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C261932 AddPayment\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
															"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update cart payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"UpdatePayment\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{paymentId1}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"{{payment_update}}\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"{{payment_update}}\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check payment update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"C261935 Check update payment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.payments[0].billingAddress.name).to.be.eql(pm.collectionVariables.get(\"payment_update\"));\r",
															"     pm.expect(data.data.cart.payments[0].billingAddress.city).to.be.eql(pm.collectionVariables.get(\"payment_update\"));\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\n\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    billingAddress{\n        middleName\n        name\n        city\n\n    }\n}\n\nshipments\n{\n    id\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for payments in cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C315779 Add dynamicPropertiesPayment tatus code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"    \r",
															"pm.test(\"C327821 Check values short text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															" });\r",
															" \r",
															"pm.test(\"C327822 Check values long text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327823 Check values int\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327824 Check values decimal\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327825 Check values html\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327826 Check values image\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327827 Check values bool\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327828 Check values datetime\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327829 Check values dictionary\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															" });\r",
															"\r",
															" pm.test(\"C327830 Check values multivalue\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															" });\r",
															"\r",
															"  pm.test(\"C327831 Check values Multilingual \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															" });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\":{{bool1}}\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update dynamic properties for payments in cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    \r",
															"pm.test(\"C327820 Update dynamic properties for payments in cart\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data_update\"));\r",
															" });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"{{short2_update}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\":{{bool2}}\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"{{data_update}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": {{decimal_update}}\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"{{html_update}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"{{image_update}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int_update}}\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"{{long_update}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add cart shipment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C261942 Add Shipment\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update cart shipment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Update Shipment\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{shipmentId1}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"{{int1}}\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"{{shipment_update}}\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check shipment update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"C261945 Check update payment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.shipments[0].weightUnit).to.be.eql(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(data.data.cart.shipments[0].deliveryAddress.city).to.be.eql(pm.collectionVariables.get(\"shipment_update\"));\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\n\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    billingAddress{\n        middleName\n        name\n        city\n\n    }\n}\n\nshipments\n{\n    id\n    weightUnit\n    deliveryAddress{\n        city\n    }\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for shipments in cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327818 Add CartShipmentDynamicProperties Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C327834 Check values short text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															" });\r",
															" \r",
															"pm.test(\"C327835 Check values long text\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327836 Check values int\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327837 Check values decimal\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327838 Check values html\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327839 Check values image\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327840 Check values bool\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327841 Check values datetime\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															" });\r",
															"\r",
															"pm.test(\"C327842 Check values dictionary\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															" });\r",
															"\r",
															" pm.test(\"C327843 Check values multivalue\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															" });\r",
															"\r",
															"  pm.test(\"C327844 Check values Multilingual \", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update dynamic properties for shipments in cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    \r",
															"pm.test(\"C341197 Update dynamic properties for shipment in cart\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image_update\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data_update\"));\r",
															" });\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short2_update}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data_update}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal_update}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html_update}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image_update}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int_update}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long_update}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short6}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Set total1\", function(){\r",
															"    var json = pm.response.json();\r",
															"pm.collectionVariables.set(\"total1\", json.data.cart.total.amount);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add promotion",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Promo added\", function () {\r",
															"var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"promotionId\"));\r",
															";\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"isAllowCombiningWithSelf\":false,\r\n   \"dynamicExpression\":{\r\n      \"all\":true,\r\n      \"not\":false,\r\n      \"id\":\"PromotionConditionAndRewardTree\",\r\n      \"availableChildren\":[\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCustomerCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"id\":\"ConditionIsRegisteredUser\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsFirstTimeBuyer\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"UserGroupsContainsCondition\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCatalogCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"id\":\"ConditionCategoryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCodeContains\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCurrencyIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionEntryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"quantitySecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionInStockQuantity\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionHasNoSalePrice\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCartCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCategoryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsOfEntryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"subTotal\":0.0,\r\n                  \"subTotalSecond\":0.0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionCartSubtotalLeast\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"id\":\"BlockReward\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardCartGetOfRelSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetFreeNumItemOfProduct\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardItemGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetOfAbsForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRelForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"id\":\"RewardItemGiftNumItem\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardShippingGetOfAbsShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardShippingGetOfRelShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"conditionalProduct\":{\r\n                     \r\n                  },\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"children\":[\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCustomerCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"id\":\"ConditionIsRegisteredUser\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsFirstTimeBuyer\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"UserGroupsContainsCondition\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCatalogCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"id\":\"ConditionCategoryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCodeContains\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCurrencyIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionEntryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"quantitySecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionInStockQuantity\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionHasNoSalePrice\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCartCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCategoryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsOfEntryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"subTotal\":0.0,\r\n                  \"subTotalSecond\":0.0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionCartSubtotalLeast\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"id\":\"BlockReward\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardCartGetOfRelSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetFreeNumItemOfProduct\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardItemGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetOfAbsForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRelForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"id\":\"RewardItemGiftNumItem\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardShippingGetOfAbsShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardShippingGetOfRelShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"conditionalProduct\":{\r\n                     \r\n                  },\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               {\r\n                  \"amount\":5.5,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ]\r\n         }\r\n      ]\r\n   },\r\n   \"storeIds\":[\r\n      \"{{storeId}}\"\r\n   ],\r\n   \"name\":\"xApi_Promotion\",\r\n   \"type\":\"DynamicPromotion\",\r\n   \"isActive\":true,\r\n   \"priority\":0,\r\n   \"isExclusive\":false,\r\n   \"hasCoupons\":false,\r\n   \"maxUsageCount\":0,\r\n   \"maxUsageOnOrder\":0,\r\n   \"maxPersonalUsageCount\":0,\r\n   \"startDate\":\"2021-09-23T22:00:00Z\",\r\n   \"createdDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"modifiedDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{promotionId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/marketing/promotions",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"marketing",
														"promotions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add coupon to promo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[\r\n   {\r\n      \"promotionId\":\"{{promotionId}}\",\r\n      \"isNew\":true,\r\n      \"code\":\"{{xapi_promo_code}}\",\r\n      \"maxUsesNumber\":10,\r\n      \"maxUsesPerUser\":10\r\n   }\r\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/marketing/promotions/coupons/add",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"marketing",
														"promotions",
														"coupons",
														"add"
													]
												}
											},
											"response": []
										},
										{
											"name": "Validate coupon",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"C327845 Check validateCoupon\", function(){\r",
															"var jSon = pm.response.json();\r",
															"pm.expect(jSon.data.validateCoupon).to.be.a(\"boolean\");\r",
															"pm.expect(data.error).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation validateCoupon ($command: InputValidateCouponType!) {\n    validateCoupon (command: $command)\n    \n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": null,\n    \"coupon\": \"{{xapi_promo_code}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add coupon",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check AddCoupon\", function(){\r",
															"var jSon = pm.response.json();\r",
															"pm.expect(jSon.data.addCoupon).to.not.empty;\r",
															"pm.expect(jSon.data.addCoupon.coupons[0]).to.be.an(\"object\");\r",
															"pm.expect(jSon.data.addCoupon.coupons[0].code).to.be.a(\"string\");\r",
															"pm.expect(jSon.data.addCoupon.coupons[0].isAppliedSuccessfully).to.be.equal(true);\r",
															"pm.expect(data.error).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check items in cart\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.items).to.not.empty\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"C261901 Check totals\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.cart.total).to.be.not.equal(\"total1\")\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\ndiscounts{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove coupon",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check removeCoupon\", function(){\r",
															"var json = pm.response.json();\r",
															"pm.expect(json.data.removeCoupon).not.empty;\r",
															"pm.expect(json.data.removeCoupon.coupons).to.be.empty;\r",
															"pm.expect(data.error).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check items in cart\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.items).to.not.empty\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"C261905 Check totals\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"var total1 = pm.collectionVariables.get(\"total1\");\r",
															"pm.expect(jsonData.data.cart.total.amount).to.be.equal(total1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add cart address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261920 Check addOrUpdateCartAddress \", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
															"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update cart address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check UpdateCartAddress \", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
															"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{cartAddress}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"{{shipment_update}}\",\n\"line2\": \"{{payment_update}}\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check cart address update",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C261924 Check update cart address\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.addresses[0].line1).to.be.eql(pm.collectionVariables.get(\"shipment_update\"));\r",
															"    pm.expect(data.data.cart.addresses[0].line2).to.be.eql(pm.collectionVariables.get(\"payment_update\"));\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove cart address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261929 removeCartAddress\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.removeCartAddress).to.be.not.empty;\r",
															"    pm.expect(json.data.removeCartAddress.id).to.be.not.empty;\r",
															"    pm.expect(json.data.removeCartAddress.addresses[0].id).to.be.a(\"string\");\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\n}\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear shipments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261951 clearShipments\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearShipments).to.be.not.empty;\r",
															"    pm.expect(json.data.clearShipments.shipments).to.be.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove shipment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261947 removeShipment\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.removeShipment).to.be.not.empty;\r",
															"    pm.expect(json.data.removeShipment.shipments).to.be.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261939 clearPayments\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearPayments).to.be.not.empty;\r",
															"    pm.expect(json.data.clearPayments.payments).to.be.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261907 clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261915 RemoveCart\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
															"    pm.expect(data.error).to.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete promo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 1000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"marketing",
														"promotions"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{promotionId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Cart User Anonymous [ID]",
									"item": [
										{
											"name": "Create user and get token",
											"item": [
												{
													"name": "Сreate contact_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
																"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\",\n    \"storeId\":\"{{storeId}}\"\n      }}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														},
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set сustomerId1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set userId1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId1\",jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  securityAccounts{\n      id\n  }\n  }\n    }\n",
																"variables": "{\n  \"id\": \"{{contactId1}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{AdminToken}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "User_1 cart, Token_2 = Without token",
											"item": [
												{
													"name": "Delete promo  [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{promotionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Add promotion  [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Promo added\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"promotionId\"));\r",
																	";\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"isAllowCombiningWithSelf\":false,\r\n   \"dynamicExpression\":{\r\n      \"all\":true,\r\n      \"not\":false,\r\n      \"id\":\"PromotionConditionAndRewardTree\",\r\n      \"availableChildren\":[\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCustomerCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"id\":\"ConditionIsRegisteredUser\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsFirstTimeBuyer\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"UserGroupsContainsCondition\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCatalogCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"id\":\"ConditionCategoryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCodeContains\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCurrencyIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionEntryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"quantitySecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionInStockQuantity\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionHasNoSalePrice\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCartCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCategoryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsOfEntryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"subTotal\":0.0,\r\n                  \"subTotalSecond\":0.0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionCartSubtotalLeast\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"id\":\"BlockReward\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardCartGetOfRelSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetFreeNumItemOfProduct\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardItemGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetOfAbsForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRelForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"id\":\"RewardItemGiftNumItem\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardShippingGetOfAbsShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardShippingGetOfRelShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"conditionalProduct\":{\r\n                     \r\n                  },\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"children\":[\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCustomerCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"id\":\"ConditionIsRegisteredUser\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsFirstTimeBuyer\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"UserGroupsContainsCondition\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCatalogCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"id\":\"ConditionCategoryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCodeContains\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCurrencyIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionEntryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"quantitySecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionInStockQuantity\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionHasNoSalePrice\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCartCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCategoryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsOfEntryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"subTotal\":0.0,\r\n                  \"subTotalSecond\":0.0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionCartSubtotalLeast\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"id\":\"BlockReward\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardCartGetOfRelSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetFreeNumItemOfProduct\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardItemGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetOfAbsForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRelForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"id\":\"RewardItemGiftNumItem\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardShippingGetOfAbsShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardShippingGetOfRelShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"conditionalProduct\":{\r\n                     \r\n                  },\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               {\r\n                  \"amount\":5.5,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ]\r\n         }\r\n      ]\r\n   },\r\n   \"storeIds\":[\r\n      \"{{storeId}}\"\r\n   ],\r\n   \"name\":\"xApi_Promotion\",\r\n   \"type\":\"DynamicPromotion\",\r\n   \"isActive\":true,\r\n   \"priority\":0,\r\n   \"isExclusive\":false,\r\n   \"hasCoupons\":false,\r\n   \"maxUsageCount\":0,\r\n   \"maxUsageOnOrder\":0,\r\n   \"maxPersonalUsageCount\":0,\r\n   \"startDate\":\"2021-09-23T22:00:00Z\",\r\n   \"createdDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"modifiedDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{promotionId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/marketing/promotions",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add coupon to Promo  [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n   {\r\n      \"promotionId\":\"{{promotionId}}\",\r\n      \"isNew\":true,\r\n      \"code\":\"{{xapi_promo_code}}\",\r\n      \"maxUsesNumber\":10,\r\n      \"maxUsesPerUser\":10\r\n   }\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/marketing/promotions/coupons/add",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions",
																"coupons",
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get user_1 cart  [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: get cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261106 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query carts {\r\ncarts(storeId: \"{{storeId}}\", userId:\"{{userId1}}\") {\r\nitems {\r\n    customerName\r\nid\r\nname\r\ncustomerName\r\n}\r\n}\r\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Clear cart [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add items",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C279146 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }   \r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add items",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check items\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 5\r\n    }\r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Cart after add items [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Set lineitemId\", function(){\r",
																	" var jasonData =pm.response.json();  \r",
																	"pm.collectionVariables.set(\"lineItemId1\", jasonData.data.cart.items[0].id);\r",
																	"pm.collectionVariables.set(\"lineItemId2\", jasonData.data.cart.items[1].id);\r",
																	"pm.collectionVariables.set(\"cartId\", jasonData.data.cart.id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove cart item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261897 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove cart item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check after remove lineitems\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart).to.not.eql(null);\r",
																	"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"lineItemId1\"));\r",
																	"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"lineItemId2\"));\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261889 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{ProductId3}}\",\n    \"quantity\": 5,\n    \"comment\": \"{{comment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check additem\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItem).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.addItem.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.addItem.items[0,1]).to.be.an(\"object\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"\r",
																	"pm.collectionVariables.set(\"lineItemId1\", jsonData.data.addItem.items[0].id);\r",
																	"pm.collectionVariables.set(\"lineItemId2\", jsonData.data.addItem.items[1].id);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{ProductId3}}\",\n    \"quantity\": 5,\n    \"comment\": \"{{comment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change cart item qty = 0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261891 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"quantity\": 0\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change cart item qty = 0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check after change qty\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.changeCartItemQuantity.items).length(1);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"quantity\": 0\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change cart item price",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261894 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"price\": 2000\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change cart item price",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check after change price\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.changeCartItemPrice.items[0].id).equal(pm.collectionVariables.get(\"lineItemId1\"))\r",
																	"    pm.expect(data.data.changeCartItemPrice.items[0].listPrice.amount).to.exist\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"price\": 17000\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261886 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"{{newComment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Add comment\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.changeComment.comment).to.eql(pm.collectionVariables.get(\"newComment\"))\r",
																	";\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"{{newComment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change cart item comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261794 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change cart item comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check after change lineitems comment\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"     pm.expect(data.data.changeCartItemComment.items[0].note).equal(pm.collectionVariables.get(\"lineItemsComment\"))\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
																	"});\r",
																	"pm.test(\"Check cart by user ID\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart).to.not.eql(null);\r",
																	"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
																	"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"pm.test(\"Check available payment method\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
																	"     pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"pm.test(\"Check available shipment method\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
																	" pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add dynamic property to cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328919 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}     ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add dynamic property to cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Add dynamicproperty to cart\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[0]).to.be.an(\"object\");\r",
																	"  \r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check value\", function () {\r",
																	"        pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
																	"    });\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}    ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add dynamic properties for lineitems in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328920 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add dynamic properties for lineitems in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Add dynamicproperties for lineitems\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0]).to.be.an(\"object\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check value\", function () {\r",
																	"        pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
																	"    });\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}  ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261931 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add dynamic properties for payments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328921 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\":{{bool1}}\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add dynamic properties for payments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Add dynamicPropertiesPayment\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartPaymentDynamicProperties).to.not.eql(null);     \r",
																	" \r",
																	"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0]).to.be.an(\"object\");\r",
																	"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0].dynamicProperties).to.be.not.empty;\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check value\", function () {\r",
																	"        pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\":{{bool1}}\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261940 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add dynamic properties for shipments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328922 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add dynamic properties for shipments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Add CartShipmentDynamicProperties\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0]).to.be.an(\"object\");\r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0].id).to.be.a(\"string\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n} ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check after all [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"\r",
																	"pm.test(\"Set total1\", function(){\r",
																	"    var json = pm.response.json();\r",
																	"pm.collectionVariables.set(\"total1\", json.data.cart.total.amount);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate coupon [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check validateCoupon\", function(){\r",
																	"var jSon = pm.response.json();\r",
																	"pm.expect(jSon.data.validateCoupon).to.be.a(\"boolean\");\r",
																	"pm.expect(data.error).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation validateCoupon ($command: InputValidateCouponType!) {\n    validateCoupon (command: $command)\n    \n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": null,\n    \"coupon\": \"{{xapi_promo_code}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261900 Check AddCoupon\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check AddCoupon\", function(){\r",
																	"var jSon = pm.response.json();\r",
																	"pm.expect(jSon.data.addCoupon).to.not.empty;\r",
																	"pm.expect(jSon.data.addCoupon.coupons[0]).to.be.an(\"object\");\r",
																	"pm.expect(jSon.data.addCoupon.coupons[0].code).to.be.a(\"string\");\r",
																	"pm.expect(jSon.data.addCoupon.coupons[0].isAppliedSuccessfully).to.be.equal(true);\r",
																	"pm.expect(data.error).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\ntotal{amount}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: cart after add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\ndiscounts{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: cart after add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"\r",
																	"pm.test(\"Check totals\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"total2\", jsonData.data.cart.total.amount);\r",
																	"pm.expect(jsonData.data.cart.total.amount).to.be.not.equal(\"total1\")\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\ncoupons{\n    code\n}\n\ntotal{\n    amount\n}\ndiscounts{\n    amount\n    \n}\n\n\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261808 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"coupons = 0\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.removeCoupon.coupons).to.be.empty;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ntotal{amount}\ndiscountTotal {\namount\n}\nitems{name}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Cart after remove coupon [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Check totals\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"var total1 = pm.collectionVariables.get(\"total1\");\r",
																	"pm.expect(jsonData.data.cart.total.amount).to.be.equal(total1);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\ncoupons{\n    code\n}\n\ntotal{\n    amount\n}\ndiscounts{\n    amount\n    \n}\n\n\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261919 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261816 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\ncity\n\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"removeCartAddress\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.removeCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.removeCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.data.removeCartAddress.addresses[0].id).to.be.a(\"string\");\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\ncity\n\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: clear shipments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261800 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: clear shipments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"clearShipments\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.clearShipments).to.be.not.empty;\r",
																	"    pm.expect(json.data.clearShipments.shipments).to.be.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261806 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"removeShipment\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.removeShipment).to.be.not.empty;\r",
																	"    pm.expect(json.data.removeShipment.shipments).to.be.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: clear payments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261937 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: clear payments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"clearPayments\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.clearPayments).to.be.not.empty;\r",
																	"    pm.expect(json.data.clearPayments.payments).to.be.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: clear cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261906 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: clear cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"clearCart\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
																	"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261913 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"RemoveCart\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
																	"    pm.expect(data.error).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "noauth"
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Delete contact, promo, users",
											"item": [
												{
													"name": "Delete contact_1",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete user_1",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\"\r\n    ]\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete promo",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{promotionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Cart User [ID]",
									"item": [
										{
											"name": "Create user and get token",
											"item": [
												{
													"name": "Сreate contact_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
																"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\",\n    \"storeId\":\"{{storeId}}\"\n      }}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set сustomerId1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set userId1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId1\",jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  securityAccounts{\n      id\n  }\n  }\n    }\n",
																"variables": "{\n  \"id\": \"{{contactId1}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Сreate contact_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId2\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contac2\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add user_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n        \n    }\n}\n\n",
																"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"{{userName2}}\",\n    \"userName\": \"{{userName2}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId2}}\"\n      }}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set сustomerId2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set userId2\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId2\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  securityAccounts{\n      id\n  }\n  }\n    }\n",
																"variables": "{\n  \"id\": \"{{contactId2}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for user_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token2\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token2\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName2}}&password={{userName2}}",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{AdminToken}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "User_1 cart, Token_2",
											"item": [
												{
													"name": "Delete Promo",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{promotionId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Add promotion",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Promo added\", function () {\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"promotionId\"));\r",
																	";\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"isAllowCombiningWithSelf\":false,\r\n   \"dynamicExpression\":{\r\n      \"all\":true,\r\n      \"not\":false,\r\n      \"id\":\"PromotionConditionAndRewardTree\",\r\n      \"availableChildren\":[\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCustomerCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"id\":\"ConditionIsRegisteredUser\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsFirstTimeBuyer\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"UserGroupsContainsCondition\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCatalogCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"id\":\"ConditionCategoryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCodeContains\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCurrencyIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionEntryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"quantitySecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionInStockQuantity\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionHasNoSalePrice\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCartCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCategoryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsOfEntryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"subTotal\":0.0,\r\n                  \"subTotalSecond\":0.0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionCartSubtotalLeast\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"id\":\"BlockReward\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardCartGetOfRelSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetFreeNumItemOfProduct\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardItemGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetOfAbsForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRelForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"id\":\"RewardItemGiftNumItem\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardShippingGetOfAbsShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardShippingGetOfRelShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"conditionalProduct\":{\r\n                     \r\n                  },\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         }\r\n      ],\r\n      \"children\":[\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCustomerCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"id\":\"ConditionIsRegisteredUser\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionIsFirstTimeBuyer\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"UserGroupsContainsCondition\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               {\r\n                  \"id\":\"ConditionIsEveryone\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCatalogCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"id\":\"ConditionCategoryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCodeContains\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionCurrencyIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionEntryIs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"quantitySecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionInStockQuantity\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"id\":\"ConditionHasNoSalePrice\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"all\":false,\r\n            \"not\":false,\r\n            \"id\":\"BlockCartCondition\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsInCategoryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"numItemSecond\":0,\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionAtNumItemsOfEntryAreInCart\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"subTotal\":0.0,\r\n                  \"subTotalSecond\":0.0,\r\n                  \"excludingCategoryIds\":[\r\n                     \r\n                  ],\r\n                  \"excludingProductIds\":[\r\n                     \r\n                  ],\r\n                  \"compareCondition\":\"AtLeast\",\r\n                  \"id\":\"ConditionCartSubtotalLeast\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               \r\n            ]\r\n         },\r\n         {\r\n            \"id\":\"BlockReward\",\r\n            \"availableChildren\":[\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardCartGetOfRelSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetFreeNumItemOfProduct\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardItemGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"id\":\"RewardItemGetOfAbsForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"numItem\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemGetOfRelForNum\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"quantity\":0,\r\n                  \"id\":\"RewardItemGiftNumItem\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardShippingGetOfAbsShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardShippingGetOfRelShippingMethod\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfAbs\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardPaymentGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               },\r\n               {\r\n                  \"conditionalProduct\":{\r\n                     \r\n                  },\r\n                  \"amount\":0.0,\r\n                  \"product\":{\r\n                     \r\n                  },\r\n                  \"forNthQuantity\":0,\r\n                  \"inEveryNthQuantity\":0,\r\n                  \"itemLimit\":0,\r\n                  \"maxLimit\":0.0,\r\n                  \"id\":\"RewardItemForEveryNumOtherItemInGetOfRel\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ],\r\n            \"children\":[\r\n               {\r\n                  \"amount\":5.5,\r\n                  \"id\":\"RewardCartGetOfAbsSubtotal\",\r\n                  \"availableChildren\":[\r\n                     \r\n                  ],\r\n                  \"children\":[\r\n                     \r\n                  ]\r\n               }\r\n            ]\r\n         }\r\n      ]\r\n   },\r\n   \"storeIds\":[\r\n      \"{{storeId}}\"\r\n   ],\r\n   \"name\":\"xApi_Promotion\",\r\n   \"type\":\"DynamicPromotion\",\r\n   \"isActive\":true,\r\n   \"priority\":0,\r\n   \"isExclusive\":false,\r\n   \"hasCoupons\":false,\r\n   \"maxUsageCount\":0,\r\n   \"maxUsageOnOrder\":0,\r\n   \"maxPersonalUsageCount\":0,\r\n   \"startDate\":\"2021-09-23T22:00:00Z\",\r\n   \"createdDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"modifiedDate\":\"2021-09-23T12:46:47.29702Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{promotionId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/marketing/promotions",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add coupon to Promo",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n   {\r\n      \"promotionId\":\"{{promotionId}}\",\r\n      \"isNew\":true,\r\n      \"code\":\"{{xapi_promo_code}}\",\r\n      \"maxUsesNumber\":10,\r\n      \"maxUsesPerUser\":10\r\n   }\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/marketing/promotions/coupons/add",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions",
																"coupons",
																"add"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get cart user_1 [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: get user's carts",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261105 getCart\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.carts.items[0].id).to.be.eql(pm.collectionVariables.get(\"cartId\"));\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query carts {\r\ncarts(storeId: \"{{storeId}}\") {\r\nitems {\r\n    customerName\r\nid\r\nname\r\ncustomerName\r\n}\r\n}\r\n}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Clear cart [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add items",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C279152 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }   \r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add items",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C279136 Check items\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 5\r\n    }   \r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get cart[admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Set lineitemId\", function(){\r",
																	" var jasonData =pm.response.json();  \r",
																	"pm.collectionVariables.set(\"lineItemId1\", jasonData.data.cart.items[0].id);\r",
																	"pm.collectionVariables.set(\"lineItemId2\", jasonData.data.cart.items[1].id);\r",
																	"pm.collectionVariables.set(\"cartId\", jasonData.data.cart.id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove cart item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261898 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove cart item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"C261814 Check after remove lineitems\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart).to.not.eql(null);\r",
																	"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"lineItemId1\"));\r",
																	"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"lineItemId2\"));\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add Item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261888 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{ProductId3}}\",\n    \"quantity\": 5,\n    \"comment\": \"{{comment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add Item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"C261790 Check additem\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItem).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.addItem.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.addItem.items[0,1]).to.be.an(\"object\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"\r",
																	"pm.collectionVariables.set(\"lineItemId1\", jsonData.data.addItem.items[0].id);\r",
																	"pm.collectionVariables.set(\"lineItemId2\", jsonData.data.addItem.items[1].id);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{ProductId3}}\",\n    \"quantity\": 5,\n    \"comment\": \"{{comment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change cart item qty = 0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261892 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"quantity\": 0\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change cart item qty =0",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261813 Check after change qty\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.changeCartItemQuantity.items).length(1);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"quantity\": 0\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change cart item price",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261896 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId2}}\",\n\"price\": 2000\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change cart item price",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261795 Check after change price\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.changeCartItemPrice.items[0].id).equal(pm.collectionVariables.get(\"lineItemId1\"))\r",
																	"    pm.expect(data.data.changeCartItemPrice.items[0].listPrice.amount).to.exist\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"price\": 17000\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: change comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261885 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"{{newComment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261797 Add comment\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.changeComment.comment).to.eql(pm.collectionVariables.get(\"newComment\"))\r",
																	";\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"{{newComment}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: changeCartItemComment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C262087 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: change cart item comment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C262085 Check after change lineitems comment\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"     pm.expect(data.data.changeCartItemComment.items[0].note).equal(pm.collectionVariables.get(\"lineItemsComment\"))\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
																"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId1}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
																	"});\r",
																	"pm.test(\"Check cart by user ID\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart).to.not.eql(null);\r",
																	"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
																	"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"pm.test(\"Check available payment method\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
																	"     pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"pm.test(\"Check available shipment method\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
																	" pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\n\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: Add dynamic property to cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328918 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}     ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: Add dynamic property to cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328917 Add dynamicproperty to cart\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[0]).to.be.an(\"object\");\r",
																	"  \r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check value\", function () {\r",
																	"        pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
																	"    });\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}    ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: Add dynamic properties for lineitems in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328915 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: Add dynamic properties for lineitems in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C327833 Add dynamicproperties for lineitems\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0]).to.be.an(\"object\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check value\", function () {\r",
																	"        pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
																	"    });\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}  ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261933 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"C261792 AddOrUpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: update cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261936 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: update cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"C261934 UpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"{{long_update}}\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2new\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 16\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: Add dynamic properties for payments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328911 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\":{{bool1}}\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: Add dynamic properties for payments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328916 Add dynamicPropertiesPayment\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartPaymentDynamicProperties).to.not.eql(null);     \r",
																	" \r",
																	"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0]).to.be.an(\"object\");\r",
																	"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0].dynamicProperties).to.be.not.empty;\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check value\", function () {\r",
																	"        pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
																	"    });\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\":{{bool1}}\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261941 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"C261793 AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: update cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261944 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 22\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: update cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"C261882 AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
																	"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"{{long_update}}\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: Add dynamic properties for shipments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C328912 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: Add dynamic properties for shipments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C315796 Add CartShipmentDynamicProperties\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0]).to.be.an(\"object\");\r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0].id).to.be.a(\"string\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n} ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: Update dynamic properties for shipments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261944 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: Update dynamic properties for shipments in cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C327819 Add CartShipmentDynamicProperties\", function(){\r",
																	"    var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties).to.not.eql(null);     \r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.id).to.be.a(\"string\");    \r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0]).to.be.an(\"object\");\r",
																	"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0].id).to.be.a(\"string\");\r",
																	"pm.expect(data.errors).to.be.undefined;\r",
																	"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
																	"\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
																"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long_update}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short2}}\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short4}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n} ]\r\n}\r\n}  "
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "after [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"\r",
																	"pm.test(\"Set total1\", function(){\r",
																	"    var json = pm.response.json();\r",
																	"pm.collectionVariables.set(\"total1\", json.data.cart.total.amount);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: validate coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261809 Check validateCoupon\", function(){\r",
																	"var jSon = pm.response.json();\r",
																	"pm.expect(jSon.data.validateCoupon).to.be.a(\"boolean\");\r",
																	"pm.expect(data.error).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation validateCoupon ($command: InputValidateCouponType!) {\n    validateCoupon (command: $command)\n    \n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": null,\n    \"coupon\": \"{{xapi_promo_code}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261902 Check AddCoupon\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check AddCoupon\", function(){\r",
																	"var jSon = pm.response.json();\r",
																	"pm.expect(jSon.data.addCoupon).to.not.empty;\r",
																	"pm.expect(jSon.data.addCoupon.coupons[0]).to.be.an(\"object\");\r",
																	"pm.expect(jSon.data.addCoupon.coupons[0].code).to.be.a(\"string\");\r",
																	"pm.expect(jSon.data.addCoupon.coupons[0].isAppliedSuccessfully).to.be.equal(true);\r",
																	"pm.expect(data.error).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\ntotal{amount}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: get cart after add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\ndiscounts{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: get cart after add coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"\r",
																	"pm.test(\"C261789 Check totals\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"total2\", jsonData.data.cart.total.amount);\r",
																	"pm.expect(jsonData.data.cart.total.amount).to.be.not.equal(\"total1\")\r",
																	"\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\ncoupons{\n    code\n}\n\ntotal{\n    amount\n}\ndiscounts{\n    amount\n    \n}\n\n\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"coupons = 0\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.removeCoupon.coupons).to.be.empty;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ntotal{amount}\ndiscountTotal {\namount\n}\nitems{name}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove coupon",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261904 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"{{xapi_promo_code}}\"\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get cart after remove coupon [admin]",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"C261903 Check totals\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"var total1 = pm.collectionVariables.get(\"total1\");\r",
																	"pm.expect(jsonData.data.cart.total.amount).to.be.equal(total1);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId1}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\ncoupons{\n    code\n}\n\ntotal{\n    amount\n}\ndiscounts{\n    amount\n    \n}\n\n\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: add cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261921 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: add cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261791 Check addOrUpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: update cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261923 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: update cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261922 Check UpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
																	";\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"{{long_update}}\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261930 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\ncity\n\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261928 removeCartAddress\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.removeCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.removeCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.data.removeCartAddress.addresses[0].id).to.be.a(\"string\");\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\ncity\n\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: clear shipments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261952 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: clear shipments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261950 clearShipments\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.clearShipments).to.be.not.empty;\r",
																	"    pm.expect(json.data.clearShipments.shipments).to.be.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261949 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261946 removeShipment\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.removeShipment).to.be.not.empty;\r",
																	"    pm.expect(json.data.removeShipment.shipments).to.be.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: clear payments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261938 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: clear payments",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261799 clearPayments\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.clearPayments).to.be.not.empty;\r",
																	"    pm.expect(json.data.clearPayments.payments).to.be.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
																"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: clear cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261908 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: clear cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261811 clearCart\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
																	"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_2: remove cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"C261914 Access denied\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
																	"    console.log(jsonData.errors[0].message);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token_1: remove cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"C261802 RemoveCart\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
																	"    pm.expect(data.error).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{Token2}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Delete contact, promo, users",
											"item": [
												{
													"name": "Delete contact_1",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete contact_2",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete users",
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
																"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete promo",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/marketing/promotions?ids={{promotionId}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"marketing",
																"promotions"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{promotionId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Partial update [ID]",
							"item": [
								{
									"name": "Get cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Set cartId1, userId1\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
													"    pm.collectionVariables.set(\"userId1\", jsonData.data.cart.customerId);\r",
													"});\r",
													"pm.test(\"Check cart by user ID\", function () {\r",
													"    var data = pm.response.json();\r",
													"    pm.expect(data.data.cart).to.not.eql(null);\r",
													"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
													"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
													"    pm.expect(data.errors).to.be.undefined;\r",
													"});\r",
													"pm.test(\"Check available payment method\", function () {\r",
													"    var data = pm.response.json();\r",
													"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
													"     pm.expect(data.errors).to.be.undefined;\r",
													"});\r",
													"pm.test(\"Check available shipment method\", function () {\r",
													"    var data = pm.response.json();\r",
													"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
													" pm.expect(data.errors).to.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add cart address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check address\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses).to.not.empty;\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0]).to.be.an(\"object\");\r",
													"    pm.collectionVariables.set(\"cartAddressId\", jsonData.data.addOrUpdateCartAddress.addresses[0].id);\r",
													"       \r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\r\n  addOrUpdateCartAddress(command: $command) {\r\n    id\r\n    addresses {\r\n        id\r\n        key\r\n      addressType\r\n      city\r\n      countryCode\r\n      countryName\r\n      email\r\n      firstName\r\n      id\r\n      lastName\r\n      line1\r\n      line2\r\n      middleName\r\n      name\r\n      organization\r\n      phone\r\n      postalCode\r\n      regionId\r\n      regionName\r\n      zip\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{default}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\":\"{{cultureName}}\",\r\n    \"cartType\": \"null\",\r\n        \"address\": {\r\n      \"id\": \"{{$randomUUID}}\",\r\n      \"key\": \"{{$randomUUID}}\",\r\n      \"city\": \"city name test\",\r\n      \"countryCode\": \"123\",\r\n      \"countryName\": \"country name\",\r\n      \"email\": \"email@email\",\r\n      \"firstName\": \"test first name\",\r\n      \"lastName\": \"test last name\",\r\n       \"middleName\": \"test test\",\r\n      \"line1\": \"line1\",\r\n      \"line2\": \"line2\",\r\n      \"name\": \"address name\",\r\n      \"organization\": \"organization\",\r\n      \"phone\": \"777-777-7777\",\r\n      \"postalCode\": \"13456\",\r\n      \"regionId\": \"region1\",\r\n      \"regionName\": \"region name\",\r\n      \"zip\":\"13413\",\r\n      \"addressType\": 1\r\n    }\r\n  }\r\n}\r\n\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add payment to cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check add paymnet address\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments).to.not.empty;\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment).to.be.an(\"object\");\r",
													"    pm.collectionVariables.set(\"billingAddressId1\", jsonData.data.addOrUpdateCartPayment.payments[0].id);\r",
													"    pm.collectionVariables.set(\"billingKey\", jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.key);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\r\n  addOrUpdateCartPayment(command: $command) {\r\n    id\r\n    payments {\r\n      id\r\n      outerId\r\n      paymentGatewayCode\r\n      price {\r\n        amount\r\n      }\r\n      amount {\r\n        amount\r\n      }\r\n      billingAddress {\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        middleName\r\n        name\r\n        organization\r\n        phone\r\n        postalCode\r\n        regionId\r\n        regionName\r\n        zip\r\n      }\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n\"command\": {\r\n\"cartId\": \"{{cartId1}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": \"null\",\r\n\"payment\": {\r\n\"id\": \"{{$randomUUID}}\",\r\n\"outerId\": \"paymentouterud_default_test_1\",\r\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\r\n\"billingAddress\": {\r\n\"id\": \"{{$randomUUID}}\",\r\n\"key\": \"{{$randomUUID}}\",\r\n\"city\": \"City 17\",\r\n\"countryCode\": \"RU\",\r\n\"countryName\": \"Russia\",\r\n\"email\": \"addressCart email test\",\r\n\"firstName\": \"First test name\",\r\n\"lastName\": \"Last name test\",\r\n\"line1\": \"Address Line 1\",\r\n\"line2\": \"Address line 2\",\r\n\"middleName\": \"Test Middle Name\",\r\n\"name\": \"First name address\",\r\n\"organization\": \"OrganizationTestName\",\r\n\"phone\": \"88005553535\",\r\n\"postalCode\": \"111111\",\r\n\"regionId\": \"Test region\",\r\n\"regionName\": \"Region 15\",\r\n\"zip\": \"13413\",\r\n\"addressType\": 1\r\n},\r\n\"currency\": \"USD\",\r\n\"price\": 1050,\r\n\"amount\": 1050\r\n}\r\n}\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add shipment to cart",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check add shipment to cart\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments).to.not.empty;\r",
													"    pm.expect(jsonData.data.addOrUpdateCartShipment).to.be.an(\"object\");\r",
													"    pm.collectionVariables.set(\"shippingAddressId1\", jsonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
													"    pm.collectionVariables.set(\"shipmentKey\", jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.key);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {\r\n  addOrUpdateCartShipment(command: $command) {\r\n    shipments {\r\n      id\r\n      shipmentMethodCode\r\n      shipmentMethodOption\r\n      fulfillmentCenterId\r\n      price{\r\n        amount\r\n      }\r\n      deliveryAddress {\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        middleName\r\n        name\r\n        organization\r\n        phone\r\n        postalCode\r\n        regionId\r\n        regionName\r\n        zip\r\n      }\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{customerId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\":\"{{cultureName}}\",\r\n    \"cartType\": \"null\",\r\n    \"shipment\": {\r\n      \"id\": \"{{$randomUUID}}\",\r\n      \"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\r\n      \"height\": 123,\r\n      \"length\": 432,\r\n      \"measureUnit\": \"mm\",\r\n      \"shipmentMethodCode\": \"FixedRate\",\r\n      \"shipmentMethodOption\": \"Ground\",\r\n      \"volumetricWeight\": 151,\r\n      \"weight\": 15643,\r\n      \"weightUnit\": \"116\",\r\n      \"width\": 114,\r\n      \"deliveryAddress\": {\r\n        \"id\":\"{{$randomUUID}}\",\r\n        \"city\": \"City 17\",\r\n        \"countryCode\": \"RU\",\r\n        \"countryName\": \"Russia\",\r\n        \"email\": \"addressCart email test\",\r\n        \"firstName\": \"First test name\",\r\n        \"key\": \"{{$randomUUID}}\",\r\n        \"lastName\": \"Last name test\",\r\n        \"line1\": \"Address Line 1\",\r\n        \"line2\": \"Address line 2\",\r\n        \"middleName\": \"Test Middle Name\",\r\n        \"name\": \"First name address\",\r\n        \"organization\": \"OrganizationTestName\",\r\n        \"phone\": \"88005553535\",\r\n        \"postalCode\": \"111111\",\r\n        \"regionId\": \"Test region\",\r\n        \"regionName\": \"Region 15\",\r\n        \"zip\": \"13413\",\r\n        \"addressType\": 1\r\n      },\r\n      \"currency\": \"USD\",\r\n      \"price\": 10.00\r\n    }\r\n  }\r\n}\r\n\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check update address\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses).to.not.empty;\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0]).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0].city).to.equal(\"Rostov\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0].lastName).to.equal(\"Ivanova\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0].id).to.equal(pm.collectionVariables.get(\"cartAddressId\"));\r",
													"   \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\r\n  addOrUpdateCartAddress(command: $command) {\r\n    id\r\n    addresses {\r\n      id\r\n      key\r\n      addressType\r\n      city\r\n      countryCode\r\n      countryName\r\n      email\r\n      firstName\r\n      lastName\r\n      line1\r\n      line2\r\n      middleName\r\n      name\r\n      organization\r\n      phone\r\n      regionId\r\n      regionName\r\n      zip\r\n    }\r\n  }\r\n}",
												"variables": "{\r\n  \"command\": {\r\n\"cartId\": \"{{cartId1}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": \"null\",\r\n\r\n   \"address\": {\r\n      \"addressType\": 1,\r\n      \"id\":\"{{cartAddressId}}\",\r\n      \"key\":\"{{cartAddressId}}\",\r\n       \"countryName\": \"Russia\",\r\n       \"lastName\": \"Ivanova\",\r\n       \"firstName\": \"test first name\",\r\n       \"city\": \"Rostov\"\r\n\r\n}\r\n}\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update shipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check update shipment\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments).to.not.empty;\r",
													"    pm.expect(jsonData.data.addOrUpdateCartShipment).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.city).to.equal(\"Kirov\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments[0].id).to.equal(pm.collectionVariables.get(\"shippingAddressId1\"));\r",
													"    });\r",
													"    \r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!)\r\n{\r\n  addOrUpdateCartShipment(command: $command) {\r\nshipments {\r\nid\r\nshipmentMethodCode\r\nshipmentMethodOption\r\nfulfillmentCenterId\r\n  height\r\n  length\r\ndeliveryAddress {\r\nid\r\nkey\r\n            city\r\n            countryCode\r\n            countryName\r\n            email\r\n            firstName\r\n            lastName\r\n            middleName\r\n            line1\r\n            line2\r\n            name\r\n            organization\r\n            phone\r\n            regionId\r\n            regionName\r\n            zip\r\n        }\r\n    }\r\n}\r\n}",
												"variables": "{\r\n\"command\": {\r\n\"cartId\": \"{{cartId1}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": \"null\",\r\n\"shipment\": {\r\n      \"id\": \"{{shippingAddressId1}}\",\r\n      \"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\r\n      \"height\": 222,\r\n      \"length\": 555,\r\n           \"deliveryAddress\": {\r\n            \"id\": \"{{shipmentKey}}\",\r\n            \"key\":\"{{shipmentKey}}\",\r\n            \"countryName\": \"Russia\",\r\n            \"lastName\": \"Ivanova\",\r\n            \"firstName\": \"test first name\",\r\n            \"city\": \"Kirov\"\r\n                     },\r\n      \"currency\": \"USD\",\r\n      \"price\": 10.00\r\n    }\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check update payment\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments).to.not.empty;\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment).to.be.an(\"object\");\r",
													"\r",
													"\r",
													"pm.test(\"Check update value for billing address\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.city).to.equal(\"Berlin\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.countryCode).to.equal(\"DE\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.countryName).to.equal(\"Germany\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.firstName).to.equal(\"Anna\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.lastName).to.equal(\"Ivanova\");\r",
													"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].id).to.equal(pm.collectionVariables.get(\"billingAddressId1\"));\r",
													"    \r",
													"    });\r",
													"    \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\r\naddOrUpdateCartPayment(command: $command) {\r\nid\r\npayments{\r\nid\r\nbillingAddress {\r\nid\r\nkey\r\ncity\r\ncountryCode\r\ncountryName\r\nemail\r\n  firstName\r\n  lastName\r\nline1\r\nline2\r\nmiddleName\r\nname\r\norganization\r\nphone\r\nregionId\r\nregionName\r\nzip\r\n}\r\n}\r\n}\r\n}",
												"variables": "{\r\n\"command\": {\r\n\"cartId\": \"{{cartId1}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{userId1}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": null,\r\n  \"payment\": {\r\n    \"id\": \"{{billingAddressId1}}\",\r\n\"billingAddress\": {\r\n\"id\": \"{{billingKey}}\",\r\n\"key\":\"{{billingKey}}\",\r\n  \"firstName\": \"Anna\",\r\n  \"lastName\":\"Ivanova\",\r\n\"city\": \"Berlin\",\r\n\"countryCode\": \"DE\",\r\n\"countryName\": \"Germany\"\r\n}\r\n}\r\n}\r\n}\r\n\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check updated value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"C315457 Check update value for address\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.cart.addresses).to.not.empty;\r",
													"    pm.expect(jsonData.data.cart.addresses[0]).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.data.cart.addresses[0].city).to.equal(\"Rostov\");\r",
													"    pm.expect(jsonData.data.cart.addresses[0].lastName).to.equal(\"Ivanova\");\r",
													"     \r",
													"});\r",
													"\r",
													"pm.test(\"C315458 Check update value for shipment\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.cart.shipments).to.not.empty;\r",
													"    pm.expect(jsonData.data.cart.shipments[0]).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.data.cart.shipments[0].deliveryAddress.city).to.equal(\"Kirov\");\r",
													"    });\r",
													"\r",
													"pm.test(\"C315459 Check update value for billing address\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.cart.payments[0].billingAddress.city).to.equal(\"Berlin\");\r",
													"    pm.expect(jsonData.data.cart.payments[0].billingAddress.countryCode).to.equal(\"DE\");\r",
													"    pm.expect(jsonData.data.cart.payments[0].billingAddress.countryName).to.equal(\"Germany\");\r",
													"    pm.expect(jsonData.data.cart.payments[0].billingAddress.firstName).to.equal(\"Anna\");\r",
													"    pm.expect(jsonData.data.cart.payments[0].billingAddress.lastName).to.equal(\"Ivanova\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"\"\r\n)\r\n{\r\nid\r\naddresses{\r\n  addressType\r\n  id\r\n  key\r\n            city\r\n            countryCode\r\n            countryName\r\n            email\r\n            firstName\r\n            lastName\r\n            line1\r\n            line2\r\n            name\r\n            organization\r\n            phone\r\n            zip\r\n            regionId\r\n            regionName\r\n            \r\n}\r\nitems\r\n{\r\n  productId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\n    id\r\n    name\r\n}\r\nitems\r\n{\r\nid\r\nname\r\n}\r\n  shipments {\r\nid\r\nshipmentMethodCode\r\nshipmentMethodOption\r\nfulfillmentCenterId\r\n    height\r\n    length\r\ndeliveryAddress {\r\nid\r\nkey\r\n            city\r\n            countryCode\r\n            countryName\r\n            email\r\n            firstName\r\n            lastName\r\n            line1\r\n            line2\r\n            name\r\n            organization\r\n            phone\r\n            regionId\r\n            regionName\r\n            zip\r\n        }\r\n    }\r\npayments\r\n{\r\n    id\r\n  billingAddress\r\n {\r\n  id\r\n  key\r\n    city\r\n    firstName\r\n    lastName\r\n    line1\r\n    line2\r\n    countryName\r\n    phone\r\n    regionId\r\n    regionName\r\n    zip\r\n    countryCode\r\n  }\r\n}\r\n}\r\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Order From Cart [ID]",
							"item": [
								{
									"name": "Admin",
									"item": [
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Set cartId1, userId1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
															"    pm.collectionVariables.set(\"userId1\", jsonData.data.cart.customerId);\r",
															"});\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check available payment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
															"     pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check available shipment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
															" pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add items",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        total{amount}\r\n        items {\r\n            productId,\r\n            name,\r\n            quantity\r\n        \r\n        }\r\n        \r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    }\r\n    ]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add cart payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"AddOrUpdatePayment\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
															"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
															"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"PaddressCart@email.com\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add cart shipment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"AddOrUpdateShipment\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
															"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart@email.com\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add cart address",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
															"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
														"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart@emai.ru\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\n    validationErrors(ruleSet:\"items\"){errorMessage}\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    validationErrors{errorMessage}\r\nid\r\nname\r\nproductId\r\n}\r\n\r\n\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order from cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"CreateOrderFromCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.collectionVariables.set(\"orderId1\", json.data.createOrderFromCart.id);\r",
															"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
															"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\ncreateOrderFromCart (command: $command) {\nid\nitems{\nid\nname\nquantity\nfulfillmentCenterId\nfulfillmentCenterName\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\ntaxTotal{\namount\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n\"command\": {\n    \"cartId\": \"{{cartId1}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261917 checkOrder\", function () {\r",
															"  var data = pm.response.json().data.order.items;\r",
															"    pm.expect(data.length).to.equal(1);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n    subTotal{amount}\r\n    items {\r\n      id\r\n      name\r\n        price{\r\n        amount\r\n              }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n",
														"variables": "{\r\n  \"id\": \"{{orderId1}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Merge carts [ID]",
							"item": [
								{
									"name": "Preparation",
									"item": [
										{
											"name": "Add users and get tokens",
											"item": [
												{
													"name": "Create contact_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
																"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"Password1\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index contact_1",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}}\"]}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check added user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Set userId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId1\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"\r",
																	"\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": false
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n      id\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password=Password1",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create contact_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId3\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact3\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact3\",\n\"firstName\": \"Contact3\",\n\"lastName\": \"Contact3\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add user_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
																"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\":\"Password1\",\n    \"userName\": \"{{userName3}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId3}}\"\n      }}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index contact_3",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId3}}\"]}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check added user_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Set userId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId3\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"\r",
																	"\r",
																	"\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": false
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact {\r\n    contact (id: \"{{contactId3}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n      id\r\n    }\r\n    }\r\n}\r\n",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Token for user_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set Token1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token3\", jsonData.access_token);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {
															"content-type": true
														}
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															},
															{
																"key": "grand_type",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName3}}&password=Password1",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "bearer",
												"bearer": [
													{
														"key": "token",
														"value": "{{AdminToken}}",
														"type": "string"
													}
												]
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									]
								},
								{
									"name": "Merge Admin",
									"item": [
										{
											"name": "Get cart_1 (user cart)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Set cartId1, userId1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
															"});\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\ncustomerName\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nlistPrice {amount}\r\n}\r\n\r\ntotal {amount}\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get cart_2 (anon cart)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Set cartId2, userId2\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"cartId2\", jsonData.data.cart.id);\r",
															"    pm.collectionVariables.set(\"userId2\", jsonData.data.cart.customerId);\r",
															"});\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\ncustomerName\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nlistPrice {amount}\r\n}\r\n\r\ntotal {amount}\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261907 clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId2}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId2}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add items to cart_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        customerName\r\n        customerId\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 3\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add items to cart_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        customerName\r\n        customerId\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId3}}\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Merge carts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Count number of items\", function () {\r",
															"    var data = pm.response.json().data.mergeCart.items;\r",
															"    pm.expect(data.length).to.equal(3);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{cartId2}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Cart after merge",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C261912 Count number of items\", function () {\r",
															"    var data = pm.response.json().data.cart.items;\r",
															"    pm.expect(data.length).to.equal(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\n\r\n\r\n\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261907 clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261907 clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId2}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId2}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Merge Anon",
									"item": [
										{
											"name": "Add items to cart_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        customerName\r\n        customerId\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 3\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add items to cart_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        customerName\r\n        customerId\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId3}}\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Merge carts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C261909 Access denied\", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError:\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{cartId2}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261907 clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Clear cart_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261907 clearCart\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
															"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId2}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId2}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Merge User",
									"item": [
										{
											"name": "Add items to cart_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        customerName\r\n        customerId\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 3\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add items to cart_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check items\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        customerName\r\n        customerId\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId3}}\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Merge carts - belong to user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"Count number of items\", function () {\r",
															"    var data = pm.response.json().data.mergeCart.items;\r",
															"    pm.expect(data.length).to.equal(3);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{cartId2}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Cart after merge [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C261801 Count number of items\", function () {\r",
															"    var data = pm.response.json().data.cart.items;\r",
															"    pm.expect(data.length).to.equal(3);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\n\r\n\r\n\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Merge carts - cart don't belong to user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"pm.test(\"C261910 Access denied\", function () {\r",
															"      var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors).to.not.empty;\r",
															"    pm.expect(jsonData.errors[0].message).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError:\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token3}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
														"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId2}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId2}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{cartId1}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove cart_1 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RemoveCart 1\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
															"    pm.expect(data.error).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Remove cart_2 [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"RemoveCart\", function(){\r",
															"    var jSonData = pm.response.json();\r",
															"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
															"    pm.expect(data.error).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
														"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId2}}\"\n  }\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Clear all",
									"item": [
										{
											"name": "Delete product_10",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId10}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId10}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete product_11",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId11}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId11}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete product_12",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId12}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId12}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete product_13",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId13}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId13}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete users",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete users [admin]\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",  \"{{userName3}}\"\r\n    ]\r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete Contact_1 [admin]\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete contact_3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete Contact_1 [admin]\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteContact).to.eql(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId3}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Add or update dynamic properties in the cart [ID]",
							"item": [
								{
									"name": "Properties",
									"item": [
										{
											"name": "Get cart",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Set variables\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
															"    pm.collectionVariables.set(\"userId\", jsonData.data.cart.customerId);\r",
															"});\r",
															"pm.test(\"Check cart by user ID\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart).to.not.eql(null);\r",
															"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
															"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check available payment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
															"     pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															"pm.test(\"Check available shipment method\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
															" pm.expect(data.errors).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add item dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check item dynamic properties\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(jsonData.data.addItem.items[0].dynamicProperties[0].name).to.be.a(\"string\");\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addItem ($command: InputAddItemType!) {\r\n    addItem (command: $command) {\r\n        id\r\n        items {\r\n            productId\r\n            dynamicProperties {\r\n              name\r\n              value\r\n            }\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n        \"cartId\": \"{{cartId}}\",\r\n        \"storeId\": \"{{storeId}}\",\r\n        \"cartName\": \"{{cartName}}\",\r\n        \"userId\": \"{{userId}}\",\r\n        \"currencyCode\": \"{{currencyCode}}\",\r\n        \"cultureName\": \"{{cultureName}}\",\r\n           \"productId\": \"{{ProductId1}}\",\r\n          \"quantity\": 1,\r\n            \"dynamicProperties\": [\r\n                {\r\n  \"name\":\"CartModule_LineItem_Boolean_0_0_0\",\r\n  \"value\":{{bool1}}\r\n                },\r\n  {              \r\n \"name\":\"CartModule_LineItem_DateTime_0_0_0\",\r\n \"value\":\"{{data1}}\"\r\n  },\r\n  {\r\n\"name\":\"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n  },\r\n{\r\n\"name\":\"CartModule_LineItem_Decimal_1_0_0\",\r\n\"value\":{{decimal2}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Decimal_1_0_0\",\r\n\"value\":{{decimal3}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Html_0_0_0\",\r\n\"value\":\"{{html1}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Html_0_1_0\",\r\n\"value\":\"{{html3}}\",\r\n\"cultureName\":\"de-DE\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Image_0_0_0\",\r\n\"value\":\"{{image}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\":{{int1}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\":{{int2}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\":{{int3}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\":\"{{long1}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\":\"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\":\"{{short1}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\":\"{{short2}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_0_1_1\",\r\n\"value\":\"{{short3}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_0\",\r\n\"value\":\"{{short6}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_0\",\r\n\"value\":\"{{short7}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_1\",\r\n\"value\":\"{{short13}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_1\",\r\n\"value\":\"{{short14}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\":\"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\":\"{{short9}}\",\r\n\"cultureName\":\"de-DE\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_1_1\",\r\n\"value\":\"{{short12}}\",\r\n\"cultureName\":\"de-DE\"\r\n}\r\n]\r\n     }\r\n  }"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties afterAdd(cart_lineitem1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C315778 Check values\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add multiple items dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check multiple items dynamicProperties\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation ($command: InputAddItemsType!) {\r\n  addItemsCart(command: $command) {\r\n        id\r\n        items {\r\n            productId\r\n            dynamicProperties {\r\n              name\r\n              value\r\n            }\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n        \"cartId\": \"{{cartId}}\",\r\n        \"storeId\": \"{{storeId}}\",\r\n        \"cartName\": \"{{cartName}}\",\r\n        \"userId\": \"{{userId}}\",\r\n        \"currencyCode\": \"{{currencyCode}}\",\r\n        \"cultureName\": \"{{cultureName}}\",\r\n        \"cartItems\": [{\r\n          \"productId\": \"{{ProductId2}}\",\r\n          \"quantity\": 2\r\n        },\r\n        {\r\n        \"productId\": \"{{ProductId3}}\",\r\n        \"quantity\": 5,\r\n                   \"dynamicProperties\": [\r\n   {\r\n  \"name\":\"CartModule_LineItem_Boolean_0_0_0\",\r\n  \"value\":{{bool1}}\r\n                },\r\n  {              \r\n \"name\":\"CartModule_LineItem_DateTime_0_0_0\",\r\n \"value\":\"{{data1}}\"\r\n  },\r\n  {\r\n\"name\":\"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\":{{decimal1}}\r\n  },\r\n{\r\n\"name\":\"CartModule_LineItem_Decimal_1_0_0\",\r\n\"value\":{{decimal2}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Decimal_1_0_0\",\r\n\"value\":{{decimal3}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Html_0_0_0\",\r\n\"value\":\"{{html1}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Html_0_1_0\",\r\n\"value\":\"{{html2}}\",\r\n\"cultureName\":\"de-DE\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Image_0_0_0\",\r\n\"value\":\"{{image}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\":{{int1}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\":{{int2}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\":{{int3}}\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\":\"{{long1}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\":\"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\":\"{{short1}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\":\"{{short2}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_0_1_1\",\r\n\"value\":\"{{short3}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_0\",\r\n\"value\":\"{{short6}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_0\",\r\n\"value\":\"{{short7}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_1\",\r\n\"value\":\"{{short13}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_0_1\",\r\n\"value\": \"{{short14}}\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\":\"{{short4}}\",\r\n\"cultureName\":\"en-US\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\":\"{{short5}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},\r\n{\r\n\"name\":\"CartModule_LineItem_ShortText_1_1_1\",\r\n\"value\":\"{{short12}}\",\r\n\"cultureName\":\"de-DE\"\r\n}\r\n]\r\n    } ]\r\n          \r\n \r\n     }\r\n  }"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties afterAdd(cart_lineitem)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C327810 Check values\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add payment dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check add payment dynamic properties\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\r\n    addOrUpdateCartPayment(command: $command) {\r\n        id\r\n        payments {\r\n          id\r\n         dynamicProperties {\r\n          name\r\n          value\r\n        }\r\n      }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \r\n    \"payment\": {\r\n  \r\n      \"dynamicProperties\": [\r\n           {\r\n  \"name\":\"CartModule_LineItem_Boolean_0_0_0\",\r\n  \"value\":\"{{bool1}}\"\r\n                },\r\n               {\r\n          \"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n          \"value\": \"{{data1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n          \"value\": {{decimal1}}\r\n        },\r\n        {\r\n            \"name\":\"CartModule_Payment_Decimal_1_0_0\",\r\n            \"value\":{{decimal2}}\r\n        },\r\n        {\r\n            \"name\":\"CartModule_Payment_Decimal_1_0_0\",\r\n            \"value\": {{decimal3}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Html_0_0_0\",\r\n          \"value\": \"{{html1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Html_0_1_0\",\r\n          \"value\": \"{{html2}}\",\r\n          \"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Image_0_0_0\",\r\n          \"value\": \"{{image}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n          \"value\":{{int1}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n          \"value\":{{int2}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n          \"value\":{{int3}}\r\n        },\r\n        {\r\n          \"name\": \"CartModulePayment_LongText_0_0_0\",\r\n          \"value\": \"{{long1}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n          \"value\":\"{{long2}}\",\r\n          \"cultureName\": \"fr-FR\"\r\n        },\r\n       {\r\n          \"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n          \"value\": \"{{short13}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n          \"value\": \"{{short14}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n          \"value\": \"{{short8}}\",\r\n          \"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n          \"value\": \"{{short9}}\",\r\n          \"cultureName\": \"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n          \"value\": \"{{short10}}\",\r\n          \"cultureName\": \"fr-FR\"\r\n        },\r\n        {\r\n            \"name\":\"CartModule_Payment_ShortText_1_1_1\",\r\n            \"value\":\"{{short11}}\",\r\n            \"cultureName\":\"de-DE\"\r\n        },\r\n        {\r\n            \"name\":\"CartModule_Payment_ShortText_1_1_1\",\r\n            \"value\":\"{{short12}}\",\r\n             \"cultureName\":\"en-US\" \r\n        }\r\n      ]\r\n    }\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties afterAdd(cart_paymnet)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check values\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short11\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short10\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short12\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"   \r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\npayments\r\n{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update paymnet dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check update paymnet dynamic properties\", function(){\r",
															"\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\r\n    addOrUpdateCartPayment(command: $command) {\r\n        id\r\n        payments {\r\n          id\r\n         dynamicProperties {\r\n          name\r\n          value\r\n        }\r\n      }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"payment\": {\r\n    \r\n      \"dynamicProperties\": [\r\n        {\r\n          \"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n          \"value\": \"{{data_update}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n          \"value\": {{decimal_update}}\r\n        },\r\n        {\r\n          \"name\": \"CartModulePayment_LongText_0_0_0\",\r\n          \"value\": \"{{long_update}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n          \"value\": \"{{html_update}}\",\r\n          \"cultureName\": \"fr-FR\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties afterUpdate(cart_paymnet)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C315780 Check values\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html_update\"));\r",
															"  \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\npayments\r\n{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add shipment dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Check add shipment dynamic properties\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {\r\n    addOrUpdateCartShipment(command: $command) {\r\n        shipments {\r\n          id\r\n          dynamicProperties {\r\n            name\r\n            value\r\n          }\r\n        }\r\n  \t}\r\n}",
														"variables": "{\r\n    \"command\": {\r\n        \"cartId\": \"{{cartId}}\",\r\n        \"storeId\": \"{{storeId}}\",\r\n        \"cartName\": \"{{cartName}}\",\r\n        \"userId\": \"{{userId}}\",\r\n        \"currencyCode\": \"{{currencyCode}}\",\r\n        \"cultureName\": \"{{cultureName}}\",\r\n        \"shipment\": {\r\n           \r\n            \"dynamicProperties\": [\r\n            {\r\n              \"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n              \"value\": {{bool2}}\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n              \"value\": \"{{data1}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n              \"value\": {{decimal1}}\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_Decimal_1_0_0\",\r\n              \"value\": {{decimal2}}\r\n            },\r\n              {\r\n              \"name\": \"CartModule_Shipment_Decimal_1_0_0\",\r\n              \"value\": {{decimal3}}\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n              \"value\": \"{{html4}}\",\r\n              \"cultureName\":\"fr-FR\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n              \"value\": \"{{image}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n              \"value\":{{int1}}\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n              \"value\":{{int2}}\r\n            },\r\n             {\r\n              \"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n              \"value\": {{int3}}\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n              \"value\": \"{{long1}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n              \"value\": \"{{long2}}\",\r\n              \"cultureName\": \"en-US\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n              \"value\": \"{{short1}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n              \"value\": \"{{short3}}\"\r\n               },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_0_1_1\",\r\n              \"value\": \"6882b02b-d42e-4ba3-82f2-0f16c45c8da7\",\r\n              \"cultureName\": \"fr-FR\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_1_0_0\",\r\n              \"value\": \"{{short6}}\"\r\n            },\r\n             {\r\n              \"name\": \"CartModule_Shipment_ShortText_1_0_0\",\r\n              \"value\": \"{{short7}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_1_0_1\",\r\n              \"value\": \"{{short13}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_1_0_1\",\r\n              \"value\": \"{{short14}}\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n              \"value\": \"{{short9}}\",\r\n              \"cultureName\":\"de-DE\"\r\n            },\r\n            {\r\n              \"name\": \"CartModule_Shipment_ShortText_1_1_1\",\r\n              \"value\": \"{{short15}}\",\r\n              \"cultureName\":\"de-DE\"\r\n                      }                       \r\n   \r\n            ]\r\n}\r\n    }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties afterAdd(cart_shipment)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check values\", function () {\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal3\"));\r",
															"    //pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    //pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short6\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short7\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short13\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short14\"));\r",
															"    //pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short15\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update shipment dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"pm.test(\"Check update shipment dynamic properties\", function(){\r",
															"var jsonData = pm.response.json();\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation addOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {\r\n    addOrUpdateCartShipment(command: $command) {\r\n        shipments {\r\n          id\r\n          dynamicProperties {\r\n            name\r\n            value\r\n          }\r\n        }\r\n    }\r\n}",
														"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"shipment\": {\r\n    \"dynamicProperties\": [\r\n        {\r\n          \"name\": \"CartModule_Shipment_Decimal_1_0_0\",\r\n          \"value\": {{decimal_update}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n          \"value\": \"{{html_update}}\",\r\n          \"cultureName\": \"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n          \"value\": \"{{image_update}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n          \"value\": {{int_update}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n          \"value\": {{int2_update}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n          \"value\": {{int3_update}}\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n          \"value\": \"{{long_update}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n          \"value\": \"{{short_update}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n          \"value\": \"{{short2_update}}\"\r\n        },\r\n        {\r\n          \"name\": \"CartModule_Shipment_ShortText_0_1_1\",\r\n          \"value\": \"{{short3_update}}\",\r\n          \"cultureName\": \"en-US\"\r\n        },\r\n                {\r\n          \"name\": \"CartModule_Shipment_ShortText_1_0_0\",\r\n          \"value\": \"{{short4_update}}\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties afterUpdate(cart_shipment)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C315797 Check values\", function () {\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3_update\"));\r",
															"pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short4_update\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check cart with dynamic properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check dynamic properties for LineItems\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.cart.items[0].dynamicProperties[0]).to.be.not.empty;\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"Check dynamic properties for Shipments \", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.cart.shipments[0]).to.be.not.empty;\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															"pm.test(\"Check dynamic properties for Payments\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.cart.payments[0]).to.be.not.empty;\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}\r\n}\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "FinishBlocks",
							"item": [
								{
									"name": "DeleteCatalog",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/catalogs/{{catalogQA}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs",
												"{{catalogQA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCategory",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"objectIds\":[\"{{categoryQA}}\"]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/listentries/delete",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"listentries",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteStore",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/stores?ids={{storeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{storeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelist",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/pricelists?ids={{pricelistId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelistAssignment",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/assignments?ids={{pricelistAssignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistAssignmentId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteFFC",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/inventory/fulfillmentcenters?ids={{ffcId1Postman}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"fulfillmentcenters"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{ffcId1Postman}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "X-order",
					"item": [
						{
							"name": "GetToken [ID]",
							"item": [
								{
									"name": "GetAdminToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set admin token\", function () {\r",
													"   \r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "grand_type",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=password&scope=offline_access&username={{adminUserName}}&password={{adminPassword}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{url}}/connect/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PrepareTestData",
							"item": [
								{
									"name": "CreateCatalog",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"catalogQA\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"TestCatalogPostman\",\r\n  \"isVirtual\": false,\r\n  \"outerId\": null,\r\n  \"defaultLanguage\": {\r\n    \"catalogId\": null,\r\n    \"isDefault\": true,\r\n    \"languageCode\": \"en-US\",\r\n    \"id\": null\r\n  },\r\n  \"languages\": [\r\n    {\r\n      \"catalogId\": null,\r\n      \"isDefault\": true,\r\n      \"languageCode\": \"en-US\",\r\n      \"id\": null\r\n    }\r\n  ],\r\n  \"properties\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/catalogs",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": null,\r\n  \"code\": \"3cd53\",\r\n  \"name\": \"TestCategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateSubCategory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"categoryId2\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"parentId\": \"{{categoryId}}\",\r\n  \"code\": \"d0d3b\",\r\n  \"name\": \"TestSubcategoryPostman\",\r\n  \"outline\": null,\r\n  \"path\": null,\r\n  \"isVirtual\": false,\r\n  \"level\": 0,\r\n  \"packageType\": null,\r\n  \"priority\": 0,\r\n  \"isActive\": true,\r\n  \"outerId\": null,\r\n  \"properties\": null,\r\n  \"excludedProperties\": null,\r\n  \"links\": null,\r\n  \"taxType\": null,\r\n  \"seoObjectType\": \"Category\",\r\n  \"seoInfos\": [],\r\n  \"enableDescription\": null,\r\n  \"descriptions\": null,\r\n  \"imgSrc\": null,\r\n  \"images\": null,\r\n  \"outlines\": null,\r\n  \"isInherited\": false,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/categories",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateStore",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"storeId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"validationRuleCodePattern\": \"^[a-zA-Z0-9_-]*$\",\r\n  \"id\": \"TestStorePostman\",\r\n  \"name\": \"TestStorePostman\",\r\n  \"catalog\": \"{{catalogQA}}\",\r\n  \"defaultLanguage\": \"en-US\",\r\n  \"defaultCurrency\": \"USD\",\r\n  \"storeState\": \"Open\",\r\n  \"languages\": [\r\n    \"en-US\"\r\n  ],\r\n  \"currencies\": [\r\n    \"USD\"\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/stores",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Default and Available to Store",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"name\":\"{{storeId}}\",\r\n   \"storeState\":\"Open\",\r\n   \"country\":\"USA\",\r\n   \"defaultLanguage\":\"en-US\",\r\n   \"defaultCurrency\":\"USD\",\r\n   \"catalog\":\"{{catalogQA}}\",\r\n   \"creditCardSavePolicy\":false,\r\n   \"url\":\"{{urlStoreFront}}\",\r\n   \"secureUrl\":\"\",\r\n   \"email\":\"noreply@mail.com\",\r\n   \"displayOutOfStock\":false,\r\n   \"mainFulfillmentCenterId\":\"{{DefaultFFCId}}\",\r\n   \"additionalFulfillmentCenterIds\":[\r\n      \"{{AvaibleFFCId}}\"\r\n   ],\r\n   \"mainReturnsFulfillmentCenterId\":\"{{DefaultFFCId}}\",\r\n   \"returnsFulfillmentCenterIds\":[\r\n      \"{{AvaibleFFCId}}\"\r\n   ],\r\n   \"languages\":[\r\n      \"de-DE\",\r\n      \"fr-FR\",\r\n      \"en-US\"\r\n   ],\r\n   \"currencies\":[\r\n      \"XPT\",\r\n      \"EUR\",\r\n      \"USD\"\r\n   ],\r\n   \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n   \"dynamicProperties\":[\r\n      {\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"value\":\"\",\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"Default_Theme_Name_Property\",\r\n               \"propertyName\":\"DefaultThemeName\"\r\n            }\r\n         ],\r\n         \"name\":\"DefaultThemeName\",\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"valueType\":\"Undefined\",\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"id\":\"Default_Theme_Name_Property\"\r\n      },\r\n      {\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"value\":\"{\\n  \\\"Attributes\\\": [\\n    {\\n      \\\"Key\\\": \\\"Brand\\\",\\n      \\\"FacetSize\\\": null,\\n      \\\"Order\\\": 0,\\n      \\\"Values\\\": [\\n        {\\n          \\\"Id\\\": \\\"3DR\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Apple\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Asus\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Beats By Dr Dre\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"BLU\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"DJI\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"E-flite\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"HTC\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"LG\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Microsoft\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Onkyo\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Panasonic\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Parrot\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Powerbeats\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Samsung\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Sony\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"SunBriteTV\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Teac\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Vizio\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Walkera\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"xFold\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"Key\\\": \\\"Color\\\",\\n      \\\"FacetSize\\\": null,\\n      \\\"Order\\\": 1,\\n      \\\"Values\\\": [\\n        {\\n          \\\"Id\\\": \\\"Black\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Bronze\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Camo green\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Gold\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Gold Platinum\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Gray\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Green\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Red\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Ruby red\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Sheer Gold\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Silver\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Space Gray\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"Titanium grey\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"White\\\"\\n        },\\n        {\\n          \\\"Id\\\": \\\"White Pearl\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"Key\\\": \\\"Display size\\\",\\n      \\\"FacetSize\\\": null,\\n      \\\"Order\\\": 2,\\n      \\\"Values\\\": null\\n    }\\n  ],\\n  \\\"AttributeRanges\\\": [],\\n  \\\"Prices\\\": [\\n    {\\n      \\\"Key\\\": \\\"price\\\",\\n      \\\"Currency\\\": \\\"USD\\\",\\n      \\\"Order\\\": 3,\\n      \\\"Values\\\": [\\n        {\\n          \\\"Id\\\": \\\"under-100\\\",\\n          \\\"Lower\\\": null,\\n          \\\"Upper\\\": \\\"100\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"100-200\\\",\\n          \\\"Lower\\\": \\\"100\\\",\\n          \\\"Upper\\\": \\\"200\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"200-600\\\",\\n          \\\"Lower\\\": \\\"200\\\",\\n          \\\"Upper\\\": \\\"600\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"600-1000\\\",\\n          \\\"Lower\\\": \\\"600\\\",\\n          \\\"Upper\\\": \\\"1000\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"over-1000\\\",\\n          \\\"Lower\\\": \\\"1000\\\",\\n          \\\"Upper\\\": null,\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        }\\n      ]\\n    },\\n    {\\n      \\\"Key\\\": \\\"price\\\",\\n      \\\"Currency\\\": \\\"EUR\\\",\\n      \\\"Order\\\": 4,\\n      \\\"Values\\\": [\\n        {\\n          \\\"Id\\\": \\\"under-100\\\",\\n          \\\"Lower\\\": null,\\n          \\\"Upper\\\": \\\"100\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"100-200\\\",\\n          \\\"Lower\\\": \\\"100\\\",\\n          \\\"Upper\\\": \\\"200\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"200-600\\\",\\n          \\\"Lower\\\": \\\"200\\\",\\n          \\\"Upper\\\": \\\"600\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"600-1000\\\",\\n          \\\"Lower\\\": \\\"600\\\",\\n          \\\"Upper\\\": \\\"1000\\\",\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        },\\n        {\\n          \\\"Id\\\": \\\"over-1000\\\",\\n          \\\"Lower\\\": \\\"1000\\\",\\n          \\\"Upper\\\": null,\\n          \\\"IncludeLower\\\": true,\\n          \\\"IncludeUpper\\\": false\\n        }\\n      ]\\n    },\\n    {\\n      \\\"Key\\\": \\\"price\\\",\\n      \\\"Currency\\\": \\\"XPT\\\",\\n      \\\"Order\\\": 5,\\n      \\\"Values\\\": []\\n    }\\n  ]\\n}\",\r\n               \"valueType\":\"LongText\",\r\n               \"propertyId\":\"VirtoCommerce.Catalog_FilteredBrowsing_Property\",\r\n               \"propertyName\":\"FilteredBrowsing\"\r\n            }\r\n         ],\r\n         \"name\":\"FilteredBrowsing\",\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"valueType\":\"Undefined\",\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"id\":\"VirtoCommerce.Catalog_FilteredBrowsing_Property\"\r\n      }\r\n   ],\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.TaxCalculationEnabled\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.AllowAnonymousUsers\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.IsSpa\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.EmailVerificationEnabled\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":true,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|General\",\r\n         \"name\":\"Stores.EnablePriceRoundingForTotalsCalculation\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Store|SEO\",\r\n         \"name\":\"Stores.SeoLinksType\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            \"None\",\r\n            \"Short\",\r\n            \"Collapsed\",\r\n            \"Long\"\r\n         ],\r\n         \"defaultValue\":\"Collapsed\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"value\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders|Orders\",\r\n         \"name\":\"Order.CustomerOrderNewNumberTemplate\",\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"defaultValue\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false\r\n      }\r\n\r\n  ],\r\n   \"typeName\":\"Store\",\r\n   \"createdBy\":\"unknown\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{storeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/stores",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Shipping methods",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"FixedRate\",\r\n    \"name\": \"FixedRate\",\r\n    \"logoUrl\": null,\r\n    \"isActive\": true,\r\n    \"priority\": 0,\r\n    \"taxType\": null,\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"settings\": [\r\n        {\r\n            \"itHasValues\": false,\r\n            \"objectId\": null,\r\n            \"objectType\": \"FixedRateShippingMethod\",\r\n            \"isReadOnly\": false,\r\n            \"value\": 10,\r\n            \"id\": null,\r\n            \"restartRequired\": false,\r\n            \"moduleId\": \"VirtoCommerce.Shipping\",\r\n            \"groupName\": \"General\",\r\n            \"name\": \"VirtoCommerce.Shipping.FixedRateShippingMethod.Ground.Rate\",\r\n            \"displayName\": null,\r\n            \"isRequired\": false,\r\n            \"isHidden\": false,\r\n            \"valueType\": \"Decimal\",\r\n            \"allowedValues\": null,\r\n            \"defaultValue\": 0,\r\n            \"isDictionary\": false,\r\n            \"values\": [\r\n                {\r\n                    \"id\": null,\r\n                    \"value\": 10\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"itHasValues\": false,\r\n            \"objectId\": null,\r\n            \"objectType\": \"FixedRateShippingMethod\",\r\n            \"isReadOnly\": false,\r\n            \"value\": 50,\r\n            \"id\": null,\r\n            \"restartRequired\": false,\r\n            \"moduleId\": \"VirtoCommerce.Shipping\",\r\n            \"groupName\": \"General\",\r\n            \"name\": \"VirtoCommerce.Shipping.FixedRateShippingMethod.Air.Rate\",\r\n            \"displayName\": null,\r\n            \"isRequired\": false,\r\n            \"isHidden\": false,\r\n            \"valueType\": \"Decimal\",\r\n            \"allowedValues\": null,\r\n            \"defaultValue\": 0,\r\n            \"isDictionary\": false,\r\n            \"values\": [\r\n                {\r\n                    \"id\": null,\r\n                    \"value\": 50\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"typeName\": \"FixedRateShippingMethod\",\r\n    \"id\": \"03f8e91a-71cc-4dba-95e7-a9cf75c46eba\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/shipping",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"shipping"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add payment methods",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"paymentMethodType\": \"Unknown\",\r\n    \"paymentMethodGroupType\": \"Manual\",\r\n    \"code\": \"DefaultManualPaymentMethod\",\r\n    \"name\": \"Test payment method\",\r\n    \"logoUrl\": null,\r\n    \"isActive\": true,\r\n    \"priority\": 0,\r\n    \"isAvailableForPartial\": false,\r\n    \"currency\": null,\r\n    \"price\": 0,\r\n    \"priceWithTax\": 0,\r\n    \"total\": 0,\r\n    \"totalWithTax\": 0,\r\n    \"discountAmount\": 0,\r\n    \"discountAmountWithTax\": 0,\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"description\": null,\r\n    \"typeName\": \"DefaultManualPaymentMethod\",\r\n    \"settings\": [\r\n        {\r\n            \"itHasValues\": false,\r\n            \"objectId\": null,\r\n            \"objectType\": \"DefaultManualPaymentMethod\",\r\n            \"isReadOnly\": false,\r\n            \"value\": null,\r\n            \"id\": null,\r\n            \"restartRequired\": false,\r\n            \"moduleId\": \"VirtoCommerce.Payment\",\r\n            \"groupName\": \"Payment|DefaultManualPaymentMethod\",\r\n            \"name\": \"VirtoCommerce.Payment.DefaultManualPaymentMethod.ExampleSetting\",\r\n            \"displayName\": null,\r\n            \"isRequired\": false,\r\n            \"isHidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"allowedValues\": null,\r\n            \"defaultValue\": null,\r\n            \"isDictionary\": false\r\n        }\r\n    ],\r\n    \"taxType\": null,\r\n    \"taxTotal\": 0,\r\n    \"taxPercentRate\": 0,\r\n    \"taxDetails\": null,\r\n    \"id\": \"ac38d91e-2d53-4669-86a1-c7cf5b3932f6\",\r\n    \"displayName\": \"Manual test payment method\",\r\n    \"displayDescription\": \"Manual test method, don't use on production\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/payment",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Tax providers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"code\": \"FixedRate\",\r\n    \"logoUrl\": null,\r\n    \"isActive\": true,\r\n    \"priority\": 0,\r\n    \"typeName\": \"FixedRateTaxProvider\",\r\n    \"settings\": [\r\n        {\r\n            \"itHasValues\": false,\r\n            \"objectId\": null,\r\n            \"objectType\": \"FixedRateTaxProvider\",\r\n            \"isReadOnly\": false,\r\n            \"value\": 15,\r\n            \"id\": null,\r\n            \"restartRequired\": false,\r\n            \"moduleId\": \"VirtoCommerce.Tax\",\r\n            \"groupName\": \"FixedTaxProvider\",\r\n            \"name\": \"VirtoCommerce.Core.FixedTaxRateProvider.Rate\",\r\n            \"displayName\": null,\r\n            \"isRequired\": false,\r\n            \"isHidden\": false,\r\n            \"valueType\": \"Decimal\",\r\n            \"allowedValues\": null,\r\n            \"defaultValue\": 0,\r\n            \"isDictionary\": false,\r\n            \"values\": [\r\n                {\r\n                    \"id\": null,\r\n                    \"value\": 15\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"id\": \"632436ce-8bbb-4b5a-b75c-521182d4bcf7\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/taxes",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"taxes"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"get pricelistId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"   pm.collectionVariables.set(\"pricelistId\", jsonData.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"productPrices\":[],\"assignments\":[],\"name\":\"TestPriceListPostman\",\"currency\":\"USD\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/pricelists",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreatePricelistAssignment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Your test name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.collectionVariables.set(\"pricelistAssignmentId\", jsonData.id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"catalogId\": \"{{catalogQA}}\",\r\n  \"storeId\": null,\r\n  \"pricelistId\": \"{{pricelistId}}\",\r\n  \"pricelist\": null,\r\n  \"name\": \"TestPricelistAssignmentPostman\",\r\n  \"description\": null,\r\n  \"priority\": 1,\r\n  \"startDate\": null,\r\n  \"endDate\": null,\r\n  \"dynamicExpression\": {\r\n    \"all\": true,\r\n    \"not\": false,\r\n    \"id\": \"PriceConditionTree\",\r\n    \"children\": [\r\n      {\r\n        \"all\": false,\r\n        \"not\": false,\r\n        \"id\": \"BlockPricingCondition\",\r\n        \"children\": []\r\n      }\r\n    ]\r\n  },\r\n  \"outerId\": null,\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n  \"modifiedDate\": null,\r\n  \"createdBy\": null,\r\n  \"modifiedBy\": null,\r\n  \"id\": null,\r\n  \"$promise\": {},\r\n  \"$resolved\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/pricing/assignments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Products",
							"item": [
								{
									"name": "Create product_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId1\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId1\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct1\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code1\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"Bread1\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\":\"{{categoryId2}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":0,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"BYR-41043129\",\r\n   \"name\":\"Bread11\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"titularItemId\":\"{{ProductId1}}\",\r\n   \"mainProductId\":\"{{ProductId1}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":0,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:11:34.3568415Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[\r\n      {\r\n         \"semanticUrl\":\"bread11\",\r\n         \"objectId\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n         \"objectType\":\"CatalogProduct\",\r\n         \"isActive\":true,\r\n         \"languageCode\":\"en-US\",\r\n         \"id\":\"8dd50d3f-8db0-40ea-bf52-deb5073984c1\"\r\n      }\r\n   ],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread11\",\r\n                     \"objectId\":\"605dd30f-9a9b-488d-af94-ad7ddaf69cf0\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"8dd50d3f-8db0-40ea-bf52-deb5073984c1\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread11\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:11:34.3609666Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:11:34.3609666Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId1}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create product_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId2\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId2\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct2\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code2\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-234304561\",\r\n    \"name\": \"Bread2\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryId2}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":0,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"PQW-27615071\",\r\n   \"name\":\"Bread22\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"categoryId\":\"{{categoryId2}}\",\r\n   \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n   \"path\":\"Cell phones\",\r\n   \"titularItemId\":\"{{ProductId2}}\",\r\n   \"mainProductId\":\"{{ProductId2}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":0,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:37:47.8328736Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Color\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":true,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Color\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Farber\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Deep\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Deep\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a5e64e80-2484-496a-aff5-c8df9c75fbbe\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Display_size\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Bildschirmgröße\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Display size\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Front_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Internal_Storage_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Memory_Card_Slot\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"NFC\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Operating_system\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Pixels_Per_Inch_ppi\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Processor_Core_GHz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"RAM_Memory_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Rear_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"SIM_Card_Slots\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Two_SIM_cards\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Video_Recording\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Waterproof\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Weight_oz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Year_Released\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[\r\n      {\r\n         \"semanticUrl\":\"bread22\",\r\n         \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n         \"objectType\":\"CatalogProduct\",\r\n         \"isActive\":true,\r\n         \"languageCode\":\"en-US\",\r\n         \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n      }\r\n   ],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n               \"seoObjectType\":\"Category\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"cell-phones\",\r\n                     \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                     \"objectType\":\"Category\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                  }\r\n               ],\r\n               \"name\":\"Cell phones\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread22\",\r\n                     \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread22\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId2}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create product_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set ProductId3\", function(){\r",
													"    var jsonData = pm.response.json();\r",
													"pm.collectionVariables.set(\"ProductId3\", jsonData.id);\r",
													"pm.collectionVariables.set(\"Nameofproduct3\", jsonData.name);\r",
													"pm.collectionVariables.set(\"Code3\", jsonData.code);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DDR-2343045621\",\r\n    \"name\": \"Bread3\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryId2}}\",\r\n    \"isActive\": true,\r\n    \"minQuantity\":0,\r\n    \"maxQuantity\":0,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 1,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create variation_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"code\":\"PQW-27615071\",\r\n   \"name\":\"Bread22\",\r\n   \"catalogId\":\"{{catalogQA}}\",\r\n   \"categoryId\":\"{{categoryId2}}\",\r\n   \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n   \"path\":\"Cell phones\",\r\n   \"titularItemId\":\"{{ProductId3}}\",\r\n   \"mainProductId\":\"{{ProductId3}}\",\r\n   \"isBuyable\":true,\r\n   \"isActive\":true,\r\n   \"trackInventory\":true,\r\n   \"maxQuantity\":0,\r\n   \"minQuantity\":0,\r\n   \"productType\":\"Physical\",\r\n   \"startDate\":\"2022-03-30T14:37:47.8328736Z\",\r\n   \"priority\":0,\r\n   \"properties\":[\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"a_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"96caee57-18ec-41ff-8717-d11f92679b0a\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"bool_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f074ee61-3a49-4971-b428-55fe40dc8b79\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"Brand\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Marke\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Brand\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId2}}\",\r\n         \"name\":\"Color\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":true,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Color\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Farber\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Deep\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Deep\",\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a5e64e80-2484-496a-aff5-c8df9c75fbbe\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Display_size\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"name\":\"Bildschirmgröße\",\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"name\":\"Display size\",\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"FilterTestName\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"name\":\"Test\",\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2c70f36d-c415-4e62-98e4-140a3ee76886\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Front_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Internal_Storage_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Memory_Card_Slot\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Catalog\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"08d7b55a-371f-4ae0-9bd2-1ac12deefbdb\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"e9f8c654-8b47-4135-ae74-21eced2626b2\"\r\n      },\r\n      {\r\n         \"isReadOnly\":true,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_category\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Category\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"510df555-532c-4750-99d2-c8b2fe105314\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_integer\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":true,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Integer\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f6f0d71e-8b02-4c97-95fd-c295a7e18ddd\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"new_property_no_requored\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"8031d71a-bae4-410d-a771-13a647364a1c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"NFC\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Operating_system\",\r\n         \"required\":true,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Pixels_Per_Inch_ppi\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Processor_Core_GHz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"name\":\"propertyproduct1\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"9832b9f9-be3f-4906-8747-a0fe2b40c827\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"RAM_Memory_GB\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Rear_camera_MP\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"SIM_Card_Slots\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Two_SIM_cards\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Variation\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Video_Recording\",\r\n         \"required\":false,\r\n         \"dictionary\":true,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Waterproof\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            },\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Weight_oz\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n      },\r\n      {\r\n         \"isReadOnly\":false,\r\n         \"isManageable\":true,\r\n         \"isNew\":false,\r\n         \"catalogId\":\"{{catalogQA}}\",\r\n         \"categoryId\":\"{{categoryId}}\",\r\n         \"name\":\"Year_Released\",\r\n         \"required\":false,\r\n         \"dictionary\":false,\r\n         \"multivalue\":false,\r\n         \"multilanguage\":false,\r\n         \"hidden\":false,\r\n         \"valueType\":\"Number\",\r\n         \"type\":\"Product\",\r\n         \"values\":[\r\n            \r\n         ],\r\n         \"attributes\":[\r\n            \r\n         ],\r\n         \"displayNames\":[\r\n            {\r\n               \"languageCode\":\"de-DE\"\r\n            },\r\n            {\r\n               \"languageCode\":\"en-US\"\r\n            }\r\n         ],\r\n         \"validationRules\":[\r\n            \r\n         ],\r\n         \"isInherited\":true,\r\n         \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n      }\r\n   ],\r\n   \"images\":[\r\n      \r\n   ],\r\n   \"assets\":[\r\n      \r\n   ],\r\n   \"links\":[\r\n      \r\n   ],\r\n   \"seoObjectType\":\"CatalogProduct\",\r\n   \"seoInfos\":[],\r\n   \"reviews\":[\r\n      \r\n   ],\r\n   \"associations\":[\r\n      \r\n   ],\r\n   \"referencedAssociations\":[\r\n      \r\n   ],\r\n   \"outlines\":[\r\n      {\r\n         \"items\":[\r\n            {\r\n               \"id\":\"{{catalogQA}}\",\r\n               \"seoObjectType\":\"Catalog\",\r\n               \"name\":\"Electronics\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n               \"seoObjectType\":\"Category\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"cell-phones\",\r\n                     \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                     \"objectType\":\"Category\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                  }\r\n               ],\r\n               \"name\":\"Cell phones\",\r\n               \"hasVirtualParent\":false\r\n            },\r\n            {\r\n               \"id\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n               \"seoObjectType\":\"CatalogProduct\",\r\n               \"seoInfos\":[\r\n                  {\r\n                     \"semanticUrl\":\"bread22\",\r\n                     \"objectId\":\"12bd8f05-33d8-4d67-a3c5-350d3293e68b\",\r\n                     \"objectType\":\"CatalogProduct\",\r\n                     \"isActive\":true,\r\n                     \"languageCode\":\"en-US\",\r\n                     \"id\":\"d43870e4-b75c-4f04-9752-05ebe8519e89\"\r\n                  }\r\n               ],\r\n               \"name\":\"Bread22\",\r\n               \"hasVirtualParent\":false\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"isInherited\":false,\r\n   \"createdDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"modifiedDate\":\"2022-03-30T14:37:47.8429256Z\",\r\n   \"createdBy\":\"admin\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{variationId3}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/products",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"products"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId1}}\",\r\n      \"list\": {{ProductPrice1}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n      \"catalog\": \"{{catalogQA}}\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId1}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId1}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId2}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId2}}\",\r\n      \"list\": {{ProductPrice2}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n       \"catalog\": \"{{catalogQA}}\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId2}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId2}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add price to the product_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"productId\": \"{{ProductId3}}\",\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId3}}\",\r\n      \"list\": {{ProductPrice3}},\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"{{pricelistId}}\",\r\n      \"name\": \"TestPriceListPostman\",\r\n       \"catalog\": \"{{catalogQA}}\",\r\n      \"store\": \"\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/products/{{ProductId3}}/prices",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"products",
												"{{ProductId3}}",
												"prices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId1}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId1}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId2}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId2}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add stock qty to the product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Add stock qty to the product\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId3}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/inventory/products/{{ProductId3}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"inventory",
												"products",
												"{{ProductId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index products",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Check Index\", function(){\r",
													"var jsonData = pm.response.json();\r",
													"pm.expect (jsonData.errorCount).to.be.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId1}}\", \"{{ProductId2}}\",\"{{ProductId3}}\", \"{{variationId1}}\", \"{{variationId2}}\", \"{{variationId3}}\"\r\n        ]\r\n    }\r\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Order [ID]",
							"item": [
								{
									"name": "Add Users, Orders",
									"item": [
										{
											"name": "Create Users 1,2,3",
											"item": [
												{
													"name": "Сreate Contact_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "create user_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Create user\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.createUser.succeeded).to.equal(true);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\r\n    createUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n      \r\n    }\r\n}",
																"variables": "{\r\n\"command\": {\r\n\"applicationUser\": { \r\n\"id\":\"{{$randomUUID}}\",      \r\n\"createdBy\": \"AutoTestPostman\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\":\"{{Password}}\",\r\n\"userName\": \"{{userName1}}\",\r\n\"userType\": \"Customer\",\r\n\"storeId\":\"{{storeId}}\",\r\n\"memberId\":\"{{contactId1}}\"\r\n\r\n}\r\n}\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set сustomerId1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set userId1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId1\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  securityAccounts{\n      id\n      userName\n      \n      \n      \n  }\n  }\n    }\n",
																"variables": "{\n  \"id\": \"{{contactId1}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "getUserToken 1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    \r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set user token\", function () {\r",
																	"   \r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{Password}}",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Сreate Contact_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "create user_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Create user\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.createUser.succeeded).to.equal(true);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\r\n    createUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n      \r\n    }\r\n}",
																"variables": "{\r\n\"command\": {\r\n\"applicationUser\": { \r\n\"id\":\"{{$randomUUID}}\",      \r\n\"createdBy\": \"AutoTestPostman\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\":\"{{Password}}\",\r\n\"userName\": \"{{userName2}}\",\r\n\"userType\": \"Customer\",\r\n\"storeId\":\"{{storeId}}\",\r\n\"memberId\":\"{{contactId2}}\"\r\n}\r\n}\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set сustomerId2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set userId2\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId2\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  securityAccounts{\n      id\n      userName\n      \n  }\n  }\n    }\n",
																"variables": "{\n  \"id\": \"{{contactId2}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "getUserToken 2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    \r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set user token\", function () {\r",
																	"   \r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"Token2\", jsonData.access_token);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 1000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "grant_type=password&scope=offline_access&username={{userName2}}&password={{Password}}",
															"options": {
																"raw": {
																	"language": "text"
																}
															}
														},
														"url": {
															"raw": "{{url}}/connect/token",
															"host": [
																"{{url}}"
															],
															"path": [
																"connect",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "Сreate Contact_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Set contactId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"contactId3\", jsonData.data.createContact.id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
																"variables": "{\n\"command\": {\n\"name\": \"Contact3\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact3\",\n\"firstName\": \"Contact3\",\n\"lastName\": \"Contact3\"\n}\n}\n\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "create user_3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Create user\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.createUser.succeeded).to.equal(true);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createUser ($command: InputCreateUserType!) {\r\n    createUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n      \r\n    }\r\n}",
																"variables": "{\r\n\"command\": {\r\n\"applicationUser\": { \r\n\"id\":\"{{$randomUUID}}\",      \r\n\"createdBy\": \"AutoTestPostman\",\r\n\"email\": \"{{$randomEmail}}\",\r\n\"password\":\"{{Password}}\",\r\n\"userName\": \"{{userName3}}\",\r\n\"userType\": \"Customer\",\r\n\"storeId\":\"{{storeId}}\",\r\n\"memberId\":\"{{contactId3}}\"\r\n}\r\n}\r\n}\r\n"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set сustomerId3",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set userId2\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"userId3\", jsonData.data.contact.securityAccounts[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n  securityAccounts{\n      id\n      userName\n      \n  }\n  }\n    }\n",
																"variables": "{\n  \"id\": \"{{contactId3}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Create Orders for User1, User2",
											"item": [
												{
													"name": "getUserCart_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set Cart\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
																	"   \r",
																	"});\r",
																	"pm.test(\"Check cart by user ID\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart).to.not.eql(null);\r",
																	"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
																	"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\ncustomerName\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "add items",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check items\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity,\r\n        \r\n        }\r\n        \r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 5\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId3}}\",\r\n        \"quantity\": 3\r\n    }\r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "addOrUpdateCartAddress",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"Paris\",\n\"countryCode\": \"FR\",\n\"countryName\": \"France\",\n\"email\": \"{{$randomEmail}}\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "addOrUpdateCartShipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"{{AvaibleFFCId}}\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"Paris\",\n\"countryCode\": \"FR\",\n\"countryName\": \"France\",\n\"email\": \"{{$randomEmail}}\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "addOrUpdateCartPayment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	" \r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"Paris\",\n\"countryCode\": \"FR\",\n\"countryName\": \"France\",\n\"email\": \"{{$randomEmail}}\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create order_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Create order_1\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"orderId4\", json.data.createOrderFromCart.id);\r",
																	"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
																	"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token1}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\r\ncreateOrderFromCart (command: $command) {\r\nid\r\nitems{\r\nid\r\nname\r\nquantity\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\n}\r\ntotal{\r\namount\r\n}\r\ndiscountTotal{\r\namount\r\n}\r\ntaxTotal{\r\namount\r\n}\r\ntotal{\r\namount\r\n}\r\n}\r\n}",
																"variables": "{\r\n\"command\": {\r\n    \"cartId\": \"{{cartId1}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "removeCart_1",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"RemoveCart\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
																	"    pm.expect(data.error).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "getUserCart_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId2\", jsonData.data.cart.id);\r",
																	"   \r",
																	"});\r",
																	"pm.test(\"Check cart by user ID\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.cart).to.not.eql(null);\r",
																	"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
																	"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{userId2}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "add items",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check items\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token2}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity,\r\n        \r\n        }\r\n        \r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    },\r\n  \r\n    {\r\n        \"productId\": \"{{ProductId2}}\",\r\n        \"quantity\": 1\r\n    }\r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "addOrUpdateCartAddress",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId2}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId2}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"Paris\",\n\"countryCode\": \"FR\",\n\"countryName\": \"France\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "addOrUpdateCartShipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"   \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId2}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId2}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"{{DefaultFFCId}}\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"Paris\",\n\"countryCode\": \"FR\",\n\"countryName\": \"France\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "addOrUpdateCartPayment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	"    \r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId2}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId2}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"Paris\",\n\"countryCode\": \"FR\",\n\"countryName\": \"France\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create order_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Create order_2\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"orderId5\", json.data.createOrderFromCart.id);\r",
																	"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
																	"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{Token2}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\r\ncreateOrderFromCart (command: $command) {\r\nid\r\nitems{\r\nid\r\nname\r\nquantity\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\n}\r\ntotal{\r\namount\r\n}\r\ndiscountTotal{\r\namount\r\n}\r\ntaxTotal{\r\namount\r\n}\r\ntotal{\r\namount\r\n}\r\n}\r\n}",
																"variables": "{\r\n\"command\": {\r\n    \"cartId\": \"{{cartId2}}\"\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "removeCart_2",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"RemoveCart\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
																	"    pm.expect(data.error).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
																"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId2}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set orderShipmentId, orderPaymentId,  lineItemId for orderId=6",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Get order by id\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.expect(data.data.order).to.not.eql(null);\r",
																	"    pm.expect(data.data.order).to.be.an(\"object\");\r",
																	"    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"\r",
																	"});\r",
																	"pm.test(\"Set orderShipmentId\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"orderShipmentId\", data.data.order.shipments[0].id);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set orderPaymentId\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"orderPaymentId\",  data.data.order.inPayments[0].id);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Set lineItemId\", function () {\r",
																	"    var data = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"lineItemId\",  data.data.order.items[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    number\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
																"variables": "{\n  \"id\": \"{{orderId5}}\",\n  \"cultureName\": \"{{cultureName}}\"\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Index orders",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[{\"documentType\":\"CustomerOrder\",\"deleteExistingIndex\":true}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/search/indexes/index",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"search",
																"indexes",
																"index"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Order Anonymous [ID]",
									"item": [
										{
											"name": "Get user order by orderId (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327996 Get user order by orderId (without token)\", function () {\r",
															"   pm.expect(pm.response.text()).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    customerName\n    number\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
														"variables": "{\n  \"id\": \"{{orderId4}}\",\n  \"cultureName\": \"en-US\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's orders by user id (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327997 Get user's orders by user id (without token)\", function () {\r",
															"     \r",
															"    pm.expect(pm.response.text()).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders(userId: \"{{userId2}}\") {\r\n      totalCount\r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all user's orders (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C262084 Get all user's orders (without token)\", function () {\r",
															"  pm.expect(pm.response.text()).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders {\r\n    totalCount\r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "changePaymentStatus from New > Paid (without token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327998 Change Payment Status from New > Paid (without token)\", function () {\r",
															"  pm.expect(pm.response.text()).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation processOrderPayment($command: InputProcessOrderPaymentType!) {\r\n  processOrderPayment(command: $command) {\r\n   newPaymentStatus\r\n    isSuccess\r\n    errorMessage\r\n  }\r\n}",
														"variables": "{\r\n\"command\": {\r\n\"orderId\": \"{{orderId4}}\",\r\n\"paymentId\": \"{{orderPaymentId}}\",\r\n   \"bankCardInfo\": {\r\n      \"bankCardNumber\": \"4242424242424242\",\r\n      \"bankCardType\": \"Visa\",\r\n      \"bankCardMonth\": 11,\r\n      \"bankCardYear\": 22,\r\n      \"bankCardCVV2\": \"111\",\r\n      \"cardholderName\": \"Name1 Name2\"\r\n    }\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "noauth"
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Order Admin [ID]",
									"item": [
										{
											"name": "Taxes on/off[ID]",
											"item": [
												{
													"name": "Switch off \"TaxCalculationEnabled\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"name\":\"{{storeId}}\",\r\n   \"description\":null,\r\n   \"storeState\":\"Open\",\r\n   \"timeZone\":null,\r\n   \"country\":\"USA\",\r\n   \"region\":null,\r\n   \"defaultLanguage\":\"en-US\",\r\n   \"defaultCurrency\":\"USD\",\r\n   \"catalog\":\"{{catalogQA}}\",\r\n   \"creditCardSavePolicy\":false,\r\n    \"secureUrl\":\"\",\r\n   \"email\":\"noreply@mail.com\",\r\n   \"adminEmail\":null,\r\n   \"emailName\":null,\r\n   \"adminEmailName\":null,\r\n   \"displayOutOfStock\":false,\r\n   \"outerId\":null,\r\n   \"mainFulfillmentCenterId\":\"{{DefaultFFCId}}\",\r\n   \"additionalFulfillmentCenterIds\":[\r\n      \"{{AvaibleFFCId}}\"\r\n   ],\r\n   \"mainReturnsFulfillmentCenterId\":\"{{DefaultFFCId}}\",\r\n   \"returnsFulfillmentCenterIds\":[\r\n      \"{{AvaibleFFCId}}\"\r\n   ],\r\n   \"languages\":[\r\n      \"en-US\",\r\n      \"fr-FR\",\r\n      \"de-DE\"\r\n   ],\r\n   \"currencies\":[\r\n      \"USD\",\r\n      \"XPT\",\r\n      \"EUR\"\r\n   ],\r\n   \"trustedGroups\":[\r\n      \"Clothing\"\r\n   ],\r\n   \"seoObjectType\":\"Store\",\r\n   \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n   \"dynamicProperties\":[\r\n      {\r\n         \"objectId\":null,\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"locale\":null,\r\n               \"value\":\"22\",\r\n               \"valueId\":null,\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"6bd7d811-cf42-4934-b3aa-13e8615e2ebc\",\r\n               \"propertyName\":\"a2\"\r\n            }\r\n         ],\r\n         \"name\":\"a2\",\r\n         \"description\":null,\r\n         \"objectType\":null,\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"displayOrder\":null,\r\n         \"valueType\":\"Undefined\",\r\n         \"displayNames\":null,\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"modifiedDate\":null,\r\n         \"createdBy\":null,\r\n         \"modifiedBy\":null,\r\n         \"id\":\"6bd7d811-cf42-4934-b3aa-13e8615e2ebc\"\r\n      },\r\n      {\r\n         \"objectId\":null,\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"locale\":null,\r\n               \"value\":\"22\",\r\n               \"valueId\":null,\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"3b45fa7a-da75-4249-aa19-47411d228a2e\",\r\n               \"propertyName\":\"a13\"\r\n            }\r\n         ],\r\n         \"name\":\"a13\",\r\n         \"description\":null,\r\n         \"objectType\":null,\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"displayOrder\":null,\r\n         \"valueType\":\"Undefined\",\r\n         \"displayNames\":null,\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"modifiedDate\":null,\r\n         \"createdBy\":null,\r\n         \"modifiedBy\":null,\r\n         \"id\":\"3b45fa7a-da75-4249-aa19-47411d228a2e\"\r\n      },\r\n      {\r\n         \"objectId\":null,\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"locale\":null,\r\n               \"value\":\"\",\r\n               \"valueId\":null,\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"Default_Theme_Name_Property\",\r\n               \"propertyName\":\"DefaultThemeName\"\r\n            }\r\n         ],\r\n         \"name\":\"DefaultThemeName\",\r\n         \"description\":null,\r\n         \"objectType\":null,\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"displayOrder\":null,\r\n         \"valueType\":\"Undefined\",\r\n         \"displayNames\":null,\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"modifiedDate\":null,\r\n         \"createdBy\":null,\r\n         \"modifiedBy\":null,\r\n         \"id\":\"Default_Theme_Name_Property\"\r\n      }\r\n   ],\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":false,\r\n         \"id\":\"b30ecd04-89a4-4284-ab8a-0dada0bcb019\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.TaxCalculationEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":false\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"dbeeebd3-c9e5-45b6-9ea8-fc59461e336f\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.AllowAnonymousUsers\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.IsSpa\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"e8629d31-9dcc-495b-a313-2c069552fd96\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.EmailVerificationEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"2435f940-03f0-44fc-9d65-6095b77ca5b0\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.EnablePriceRoundingForTotalsCalculation\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"Average\",\r\n         \"id\":\"82767a2f-7d41-450e-976f-e3deecac1bcb\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"CustomerReviews.Calculation.Method\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"Average\"\r\n            },\r\n            {\r\n               \"value\":\"Wilson\"\r\n            }\r\n         ],\r\n         \"defaultValue\":\"Average\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"Average\",\r\n               \"value\":\"Average\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"Collapsed\",\r\n         \"id\":\"36a8aba8-f5a9-44f5-90f7-5f2c392c009c\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"SEO\",\r\n         \"name\":\"Stores.SeoLinksType\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"None\"\r\n            },\r\n            {\r\n               \"value\":\"Short\"\r\n            },\r\n            {\r\n               \"value\":\"Collapsed\"\r\n            },\r\n            {\r\n               \"value\":\"Long\"\r\n            }\r\n         ],\r\n         \"defaultValue\":\"Collapsed\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"Collapsed\",\r\n               \"value\":\"Collapsed\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Statuses\",\r\n         \"name\":\"Customer.OrganizationDefaultStatus\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Statuses\",\r\n         \"name\":\"Customer.ContactDefaultStatus\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"5957c0a3-c85f-486b-850d-1c2545808fcb\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders\",\r\n         \"name\":\"Order.CustomerOrderNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"CO{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"CO{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"815089b1-4680-414a-8342-c9db7741af9a\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders\",\r\n         \"name\":\"Order.PaymentInNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"PI{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"PI{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"c0e0d94f-3b7f-43d8-aa69-a7db9d35e01d\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders\",\r\n         \"name\":\"Order.ShipmentNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"SH{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"SH{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"93bd782d-dd42-40ae-a851-7be3706b2b17\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes\",\r\n         \"name\":\"Quotes.QuoteRequestNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"RFQ{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes\",\r\n         \"name\":\"Quotes.EnableQuotes\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":\"ae801337-2ebc-4841-8131-a412fae472df\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.CategoryPageUpdateFrequency\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"always\"\r\n            },\r\n            {\r\n               \"value\":\"hourly\"\r\n            },\r\n            {\r\n               \"value\":\"daily\"\r\n            },\r\n            {\r\n               \"value\":\"weekly\"\r\n            },\r\n            {\r\n               \"value\":\"monthly\"\r\n            },\r\n            {\r\n               \"value\":\"yearly\"\r\n            },\r\n            {\r\n               \"value\":\"never\"\r\n            }\r\n         ],\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.CategoryPagePriority\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":\"658d4ae8-db6a-4e18-ae15-67ac0ec58d0b\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.ProductPageUpdateFrequency\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"always\"\r\n            },\r\n            {\r\n               \"value\":\"hourly\"\r\n            },\r\n            {\r\n               \"value\":\"daily\"\r\n            },\r\n            {\r\n               \"value\":\"weekly\"\r\n            },\r\n            {\r\n               \"value\":\"monthly\"\r\n            },\r\n            {\r\n               \"value\":\"yearly\"\r\n            },\r\n            {\r\n               \"value\":\"never\"\r\n            }\r\n         ],\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.ProductPagePriority\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":\"62e80748-bfbb-4073-a6a7-fbeaf9b91186\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.BlogPageUpdateFrequency\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"always\"\r\n            },\r\n            {\r\n               \"value\":\"hourly\"\r\n            },\r\n            {\r\n               \"value\":\"daily\"\r\n            },\r\n            {\r\n               \"value\":\"weekly\"\r\n            },\r\n            {\r\n               \"value\":\"monthly\"\r\n            },\r\n            {\r\n               \"value\":\"yearly\"\r\n            },\r\n            {\r\n               \"value\":\"never\"\r\n            }\r\n         ],\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.BlogPagePriority\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.EnableTracking\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleTagManagerId\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleAnalyticsTrackingId\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.CreateECommerceTransaction\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.ReverseECommerceTransaction\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"b2211248-ac53-481a-843e-d3577a1d0379\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Return\",\r\n         \"groupName\":\"Return\",\r\n         \"name\":\"Return.ReturnNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"RET{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"RET{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"16e8e1f9-c3ba-4a28-af9f-7ba7fdae4bd0\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions\",\r\n         \"name\":\"Subscription.EnableSubscriptions\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"0d411da2-d07e-42fb-a47f-4556faecbcee\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions\",\r\n         \"name\":\"Subscription.SubscriptionNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"SU{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"SU{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabledForAnonymous\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"bdbb5d75-c78c-4116-b5f9-d415e4ab0385\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews\",\r\n         \"name\":\"CustomerReviews.CanSubmitReviewWhenHasOrder\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"typeName\":\"Store\",\r\n   \"scopes\":null,\r\n   \"createdDate\":\"2015-10-06T22:39:51.553Z\",\r\n   \"modifiedDate\":\"2022-08-17T08:05:53.4670416Z\",\r\n   \"createdBy\":\"unknown\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{storeId}}\",\r\n   \"additionalLanguages\":[\r\n      \"fr-FR\",\r\n      \"de-DE\"\r\n   ],\r\n   \"additionalCurrencies\":[\r\n      \"XPT\",\r\n      \"EUR\"\r\n   ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/stores",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"stores"
															]
														}
													},
													"response": []
												},
												{
													"name": "Activate fixed tax",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"storeId\":\"{{storeId}}\",\r\n   \"code\":\"FixedRate\",\r\n   \"logoUrl\":\"http://virtocommerce.com/Content/images/logo.jpg\",\r\n   \"isActive\":true,\r\n   \"priority\":0,\r\n   \"typeName\":\"FixedRateTaxProvider\",\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"f4cdda81d9c84a8ba5306b3da0fea979\",\r\n         \"objectType\":\"FixedRateTaxProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":10,\r\n         \"id\":\"784bdacd-fd82-4afb-96c6-1b2c8975b5c4\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Tax\",\r\n         \"groupName\":\"FixedTaxProvider\",\r\n         \"name\":\"VirtoCommerce.Core.FixedTaxRateProvider.Rate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":0,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":1,\r\n               \"value\":10\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"id\":\"f4cdda81d9c84a8ba5306b3da0fea979\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/taxes",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"taxes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Deactivate avatax tax",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"storeId\":\"{{storeId}}\",\r\n   \"code\":\"AvaTaxRateProvider\",\r\n   \"logoUrl\":null,\r\n   \"isActive\":false,\r\n   \"priority\":0,\r\n   \"typeName\":\"AvaTaxRateProvider\",\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\",\r\n         \"objectType\":\"AvaTaxRateProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"DEFAULT\",\r\n         \"id\":\"e67c0956-28b0-49be-9a72-19cd4cc2c683\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.AvalaraTax\",\r\n         \"groupName\":\"Tax|Avalara\",\r\n         \"name\":\"Avalara.Credentials.CompanyCode\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\",\r\n         \"objectType\":\"AvaTaxRateProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"https://rest.avatax.com/\",\r\n         \"id\":\"2ce6c28a-504c-4026-88c8-aa4bdeb67297\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.AvalaraTax\",\r\n         \"groupName\":\"Tax|Avalara\",\r\n         \"name\":\"Avalara.Credentials.ServiceUrl\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\",\r\n         \"objectType\":\"AvaTaxRateProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"https://admin-avatax.avalara.net/\",\r\n         \"id\":\"79bf15af-e4c8-475c-a009-6c994c966a8a\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.AvalaraTax\",\r\n         \"groupName\":\"Tax|Avalara\",\r\n         \"name\":\"Avalara.Credentials.AdminAreaUrl\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\",\r\n         \"objectType\":\"AvaTaxRateProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.AvalaraTax\",\r\n         \"groupName\":\"Tax|Avalara\",\r\n         \"name\":\"Avalara.ScheduledOrdersSynchronization.IsEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\",\r\n         \"objectType\":\"AvaTaxRateProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"0 0 * * *\",\r\n         \"id\":\"ea1f5639-81de-42d3-a322-b88862f1a17c\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.AvalaraTax\",\r\n         \"groupName\":\"Tax|Avalara\",\r\n         \"name\":\"Avalara.ScheduledOrdersSynchronization.CronExpression\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"0 0 * * *\",\r\n         \"isDictionary\":false\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\",\r\n         \"objectType\":\"AvaTaxRateProvider\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.AvalaraTax\",\r\n         \"groupName\":\"Tax|Avalara\",\r\n         \"name\":\"Avalara.ScheduledOrdersSynchronization.LastExecutionDate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"DateTime\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false\r\n      }\r\n   ],\r\n   \"id\":\"7e841b6d-9e48-48d3-bcb8-94232c002fea\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/taxes",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"taxes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId1, userId1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
																	"    pm.collectionVariables.set(\"userId1\", jsonData.data.cart.customerId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check items\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItemsCart.items).to.be.not.empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        total{amount}\r\n        taxTotal{amount}\r\n        items {\r\n            productId,\r\n            name,\r\n            quantity\r\n        \r\n        }\r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    }\r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"AddOrUpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"PaddressCart@email.com\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart@email.com\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart@emai.ru\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create order from cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Order created\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"orderId1\", json.data.createOrderFromCart.id);\r",
																	"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
																	"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"TaxTotal == 0\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.createOrderFromCart.taxTotal.amount).to.be.eql(0);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\ncreateOrderFromCart (command: $command) {\nid\nitems{\nid\nname\nquantity\nfulfillmentCenterId\nfulfillmentCenterName\n}\ntotal{\namount\n}\ntaxTotal{amount}\ndiscountTotal{\namount\n}\ntaxTotal{\namount\n}\ntotal{\namount\n}\n}\n}",
																"variables": "{\n\"command\": {\n    \"cartId\": \"{{cartId1}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check order",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"C346137 TaxTotal == 0\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.order.taxTotal.amount).to.be.eql(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n    subTotal{amount}\r\n    taxTotal{amount}\r\n    items {\r\n      id\r\n      name\r\n        price{\r\n        amount\r\n              }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n",
																"variables": "{\r\n  \"id\": \"{{orderId1}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete order",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/order/customerOrders?ids={{orderId1}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"order",
																"customerOrders"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{orderId1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Switch on \"TaxCalculationEnabled\"",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableCookies": true
													},
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n   \"name\":\"{{storeId}}\",\r\n   \"description\":null,\r\n   \"storeState\":\"Open\",\r\n   \"timeZone\":null,\r\n   \"country\":\"USA\",\r\n   \"region\":null,\r\n   \"defaultLanguage\":\"en-US\",\r\n   \"defaultCurrency\":\"USD\",\r\n   \"catalog\":\"{{catalogQA}}\",\r\n   \"creditCardSavePolicy\":false,\r\n   \"secureUrl\":\"\",\r\n   \"email\":\"noreply@mail.com\",\r\n   \"adminEmail\":null,\r\n   \"emailName\":null,\r\n   \"adminEmailName\":null,\r\n   \"displayOutOfStock\":false,\r\n   \"outerId\":null,\r\n   \"mainFulfillmentCenterId\":\"{{DefaultFFCId}}\",\r\n   \"additionalFulfillmentCenterIds\":[\r\n      \"{{AvaibleFFCId}}\"\r\n   ],\r\n   \"mainReturnsFulfillmentCenterId\":\"{{DefaultFFCId}}\",\r\n   \"returnsFulfillmentCenterIds\":[\r\n      \"{{AvaibleFFCId}}\"\r\n   ],\r\n   \"languages\":[\r\n      \"en-US\",\r\n      \"fr-FR\",\r\n      \"de-DE\"\r\n   ],\r\n   \"currencies\":[\r\n      \"USD\",\r\n      \"XPT\",\r\n      \"EUR\"\r\n   ],\r\n   \"trustedGroups\":[\r\n      \"Clothing\"\r\n   ],\r\n   \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n   \"dynamicProperties\":[\r\n      {\r\n         \"objectId\":null,\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"locale\":null,\r\n               \"value\":\"22\",\r\n               \"valueId\":null,\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"6bd7d811-cf42-4934-b3aa-13e8615e2ebc\",\r\n               \"propertyName\":\"a2\"\r\n            }\r\n         ],\r\n         \"name\":\"a2\",\r\n         \"description\":null,\r\n         \"objectType\":null,\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"displayOrder\":null,\r\n         \"valueType\":\"Undefined\",\r\n         \"displayNames\":null,\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"modifiedDate\":null,\r\n         \"createdBy\":null,\r\n         \"modifiedBy\":null,\r\n         \"id\":\"6bd7d811-cf42-4934-b3aa-13e8615e2ebc\"\r\n      },\r\n      {\r\n         \"objectId\":null,\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"locale\":null,\r\n               \"value\":\"22\",\r\n               \"valueId\":null,\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"3b45fa7a-da75-4249-aa19-47411d228a2e\",\r\n               \"propertyName\":\"a13\"\r\n            }\r\n         ],\r\n         \"name\":\"a13\",\r\n         \"description\":null,\r\n         \"objectType\":null,\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"displayOrder\":null,\r\n         \"valueType\":\"Undefined\",\r\n         \"displayNames\":null,\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"modifiedDate\":null,\r\n         \"createdBy\":null,\r\n         \"modifiedBy\":null,\r\n         \"id\":\"3b45fa7a-da75-4249-aa19-47411d228a2e\"\r\n      },\r\n      {\r\n         \"objectId\":null,\r\n         \"values\":[\r\n            {\r\n               \"objectType\":\"VirtoCommerce.StoreModule.Core.Model.Store\",\r\n               \"objectId\":\"{{storeId}}\",\r\n               \"locale\":null,\r\n               \"value\":\"\",\r\n               \"valueId\":null,\r\n               \"valueType\":\"ShortText\",\r\n               \"propertyId\":\"Default_Theme_Name_Property\",\r\n               \"propertyName\":\"DefaultThemeName\"\r\n            }\r\n         ],\r\n         \"name\":\"DefaultThemeName\",\r\n         \"description\":null,\r\n         \"objectType\":null,\r\n         \"isArray\":false,\r\n         \"isDictionary\":false,\r\n         \"isMultilingual\":false,\r\n         \"isRequired\":false,\r\n         \"displayOrder\":null,\r\n         \"valueType\":\"Undefined\",\r\n         \"displayNames\":null,\r\n         \"createdDate\":\"0001-01-01T00:00:00Z\",\r\n         \"modifiedDate\":null,\r\n         \"createdBy\":null,\r\n         \"modifiedBy\":null,\r\n         \"id\":\"Default_Theme_Name_Property\"\r\n      }\r\n   ],\r\n   \"settings\":[\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"b30ecd04-89a4-4284-ab8a-0dada0bcb019\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.TaxCalculationEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":false\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"dbeeebd3-c9e5-45b6-9ea8-fc59461e336f\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.AllowAnonymousUsers\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.IsSpa\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"e8629d31-9dcc-495b-a313-2c069552fd96\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.EmailVerificationEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"2435f940-03f0-44fc-9d65-6095b77ca5b0\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"Stores.EnablePriceRoundingForTotalsCalculation\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"Average\",\r\n         \"id\":\"82767a2f-7d41-450e-976f-e3deecac1bcb\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"General\",\r\n         \"name\":\"CustomerReviews.Calculation.Method\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"Average\"\r\n            },\r\n            {\r\n               \"value\":\"Wilson\"\r\n            }\r\n         ],\r\n         \"defaultValue\":\"Average\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"Average\",\r\n               \"value\":\"Average\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"Collapsed\",\r\n         \"id\":\"36a8aba8-f5a9-44f5-90f7-5f2c392c009c\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"SEO\",\r\n         \"name\":\"Stores.SeoLinksType\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"None\"\r\n            },\r\n            {\r\n               \"value\":\"Short\"\r\n            },\r\n            {\r\n               \"value\":\"Collapsed\"\r\n            },\r\n            {\r\n               \"value\":\"Long\"\r\n            }\r\n         ],\r\n         \"defaultValue\":\"Collapsed\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"Collapsed\",\r\n               \"value\":\"Collapsed\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Statuses\",\r\n         \"name\":\"Customer.OrganizationDefaultStatus\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Customer\",\r\n         \"groupName\":\"Statuses\",\r\n         \"name\":\"Customer.ContactDefaultStatus\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"5957c0a3-c85f-486b-850d-1c2545808fcb\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders\",\r\n         \"name\":\"Order.CustomerOrderNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"CO{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"CO{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"CO{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"815089b1-4680-414a-8342-c9db7741af9a\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders\",\r\n         \"name\":\"Order.PaymentInNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"PI{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"PI{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"PI{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"c0e0d94f-3b7f-43d8-aa69-a7db9d35e01d\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Orders\",\r\n         \"groupName\":\"Orders\",\r\n         \"name\":\"Order.ShipmentNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"SH{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"SH{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"SH{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"93bd782d-dd42-40ae-a851-7be3706b2b17\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes\",\r\n         \"name\":\"Quotes.QuoteRequestNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"RFQ{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"RFQ{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Quote\",\r\n         \"groupName\":\"Quotes\",\r\n         \"name\":\"Quotes.EnableQuotes\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":\"ae801337-2ebc-4841-8131-a412fae472df\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.CategoryPageUpdateFrequency\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"always\"\r\n            },\r\n            {\r\n               \"value\":\"hourly\"\r\n            },\r\n            {\r\n               \"value\":\"daily\"\r\n            },\r\n            {\r\n               \"value\":\"weekly\"\r\n            },\r\n            {\r\n               \"value\":\"monthly\"\r\n            },\r\n            {\r\n               \"value\":\"yearly\"\r\n            },\r\n            {\r\n               \"value\":\"never\"\r\n            }\r\n         ],\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.CategoryPagePriority\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":\"658d4ae8-db6a-4e18-ae15-67ac0ec58d0b\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.ProductPageUpdateFrequency\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"always\"\r\n            },\r\n            {\r\n               \"value\":\"hourly\"\r\n            },\r\n            {\r\n               \"value\":\"daily\"\r\n            },\r\n            {\r\n               \"value\":\"weekly\"\r\n            },\r\n            {\r\n               \"value\":\"monthly\"\r\n            },\r\n            {\r\n               \"value\":\"yearly\"\r\n            },\r\n            {\r\n               \"value\":\"never\"\r\n            }\r\n         ],\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.ProductPagePriority\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":\"62e80748-bfbb-4073-a6a7-fbeaf9b91186\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.BlogPageUpdateFrequency\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":[\r\n            {\r\n               \"value\":\"always\"\r\n            },\r\n            {\r\n               \"value\":\"hourly\"\r\n            },\r\n            {\r\n               \"value\":\"daily\"\r\n            },\r\n            {\r\n               \"value\":\"weekly\"\r\n            },\r\n            {\r\n               \"value\":\"monthly\"\r\n            },\r\n            {\r\n               \"value\":\"yearly\"\r\n            },\r\n            {\r\n               \"value\":\"never\"\r\n            }\r\n         ],\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Sitemaps\",\r\n         \"groupName\":\"Sitemaps\",\r\n         \"name\":\"Sitemap.BlogPagePriority\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Decimal\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.EnableTracking\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleTagManagerId\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.GoogleAnalyticsTrackingId\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.CreateECommerceTransaction\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.GoogleEcommerceAnalytics\",\r\n         \"groupName\":\"Google Ecommerce Analytics\",\r\n         \"name\":\"GoogleEcommerceAnalytics.ReverseECommerceTransaction\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":null,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"b2211248-ac53-481a-843e-d3577a1d0379\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Return\",\r\n         \"groupName\":\"Return\",\r\n         \"name\":\"Return.ReturnNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"RET{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"RET{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"RET{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"16e8e1f9-c3ba-4a28-af9f-7ba7fdae4bd0\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions\",\r\n         \"name\":\"Subscription.EnableSubscriptions\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"id\":\"0d411da2-d07e-42fb-a47f-4556faecbcee\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Subscription\",\r\n         \"groupName\":\"Subscriptions\",\r\n         \"name\":\"Subscription.SubscriptionNewNumberTemplate\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"ShortText\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":\"SU{0:yyMMdd}-{1:D5}\",\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":\"SU{0:yyMMdd}-{1:D5}\",\r\n               \"value\":\"SU{0:yyMMdd}-{1:D5}\"\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabled\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":false,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":null,\r\n         \"id\":null,\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews\",\r\n         \"name\":\"CustomerReviews.CustomerReviewsEnabledForAnonymous\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":false,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":null,\r\n               \"value\":null\r\n            }\r\n         ]\r\n      },\r\n      {\r\n         \"itHasValues\":true,\r\n         \"objectId\":\"{{storeId}}\",\r\n         \"objectType\":\"Store\",\r\n         \"isReadOnly\":false,\r\n         \"value\":true,\r\n         \"id\":\"bdbb5d75-c78c-4116-b5f9-d415e4ab0385\",\r\n         \"restartRequired\":false,\r\n         \"moduleId\":\"VirtoCommerce.Store\",\r\n         \"groupName\":\"Product Reviews\",\r\n         \"name\":\"CustomerReviews.CanSubmitReviewWhenHasOrder\",\r\n         \"displayName\":null,\r\n         \"isRequired\":false,\r\n         \"isHidden\":false,\r\n         \"valueType\":\"Boolean\",\r\n         \"allowedValues\":null,\r\n         \"defaultValue\":true,\r\n         \"isDictionary\":false,\r\n         \"values\":[\r\n            {\r\n               \"id\":true,\r\n               \"value\":true\r\n            }\r\n         ]\r\n      }\r\n   ],\r\n   \"typeName\":\"Store\",\r\n   \"scopes\":null,\r\n   \"createdDate\":\"2015-10-06T22:39:51.553Z\",\r\n   \"modifiedDate\":\"2022-08-17T08:05:53.4670416Z\",\r\n   \"createdBy\":\"unknown\",\r\n   \"modifiedBy\":\"admin\",\r\n   \"id\":\"{{storeId}}\",\r\n   \"additionalLanguages\":[\r\n      \"fr-FR\",\r\n      \"de-DE\"\r\n   ],\r\n   \"additionalCurrencies\":[\r\n      \"XPT\",\r\n      \"EUR\"\r\n   ]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/stores",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"stores"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Set cartId1, userId1\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
																	"    pm.collectionVariables.set(\"userId1\", jsonData.data.cart.customerId);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(() => {}, 5000); "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
																"variables": ""
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add item",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Check items\", function(){\r",
																	"var jsonData = pm.response.json();\r",
																	"pm.expect(jsonData.data.addItemsCart.items).to.be.not.empty;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        total{amount}\r\n        taxTotal{amount}\r\n        items {\r\n            productId,\r\n            name,\r\n            quantity\r\n        \r\n        }\r\n    }\r\n}",
																"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"{{ProductId1}}\",\r\n        \"quantity\": 1\r\n    }\r\n    ]\r\n  }\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add cart payment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdatePayment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
																	"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"PaddressCart@email.com\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add cart shipment",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"AddOrUpdateShipment\", function(){\r",
																	"    var jSonData = pm.response.json();\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
																	"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
																	"    pm.expect(data.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId1}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart@email.com\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Add cart address",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
																	"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
																"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 18\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart@emai.ru\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create order from cart",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Order created\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.collectionVariables.set(\"orderId1\", json.data.createOrderFromCart.id);\r",
																	"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
																	"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
																	"    pm.expect(json.errors).to.be.undefined;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"TaxTotal > 0\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.createOrderFromCart.taxTotal.amount).greaterThan(0);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\ncreateOrderFromCart (command: $command) {\nid\nitems{\nid\nname\nquantity\nfulfillmentCenterId\nfulfillmentCenterName\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\ntaxTotal{\namount\n}\ntotal{\namount\n}\n}\n}",
																"variables": "{\n\"command\": {\n    \"cartId\": \"{{cartId1}}\"\n  }\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check order",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"C346138 TaxTotal > 0\", function () {\r",
																	"    var json = pm.response.json();\r",
																	"    pm.expect(json.data.order.taxTotal.amount).greaterThan(0);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "graphql",
															"graphql": {
																"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n    taxTotal{amount}\r\n    subTotal{amount}\r\n    items {\r\n      id\r\n      name\r\n        price{\r\n        amount\r\n              }\r\n\r\n    }\r\n\r\n  }\r\n}\r\n",
																"variables": "{\r\n  \"id\": \"{{orderId1}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
															}
														},
														"url": {
															"raw": "{{url}}/graphql",
															"host": [
																"{{url}}"
															],
															"path": [
																"graphql"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete order",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{AdminToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/order/customerOrders?ids={{orderId1}}",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"order",
																"customerOrders"
															],
															"query": [
																{
																	"key": "ids",
																	"value": "{{orderId1}}"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Get user's orders by user id (Admin token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261160 Get user's orders by user id (Admin token)\", function () {\r",
															"   \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"orderId5\"));\r",
															"  \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders(userId: \"{{userId2}}\") {\r\n      totalCount\r\n      \r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261151 Get order by id\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.order).to.not.eql(null);\r",
															"    pm.expect(data.data.order).to.be.an(\"object\");\r",
															"    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    number\n    customerId\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
														"variables": "{\n  \"id\": \"{{orderId5}}\",\n  \"cultureName\": \"{{cultureName}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's orders by user id. Orders does not exist [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C250943 Get user's orders by user id (Admin token)\", function () {\r",
															" var json = pm.response.json();\r",
															"    pm.expect(json.data.orders.items).to.be.empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders(userId: \"{{userId3}}\") {\r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Dynamic properties for order\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.updateOrderDynamicProperties.dynamicProperties).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrderDynamicProperties($command: InputUpdateOrderDynamicPropertiesType!) {   updateOrderDynamicProperties(command: $command) {     \r\nid     \r\nnumber     \r\ndynamicProperties { \r\nname \r\nvalue \r\nvalueType\r\ndynamicProperty {\r\nname\r\nlabel\r\nvalueType\r\n }\r\ndictionaryItem {\r\nlabel \r\nname\r\nid\r\n}}   } }",
														"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId5}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Decimal_1_0_0\",\r\n\"value\": {{decimal2}}\r\n},\r\n\r\n{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_1_0\",\r\n\"value\": \"{{html2}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}    ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties after addOrUpdate(order)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C327846 C327847 C327848 C327849 C327850 Check values\", function () {\r",
															"\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n  }\r\n    } ",
														"variables": "{\r\n  \"id\": \"{{orderId5}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for shipment in order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Dynamic properties for shipment order\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.updateOrderShipmentDynamicProperties.shipments[0].dynamicProperties).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrderShipmentDynamicProperties($command: InputUpdateOrderShipmentDynamicPropertiesType!) {\r\n\r\n    updateOrderShipmentDynamicProperties(command: $command) {\r\n\r\n        number\r\n\r\n        shipments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId5}}\",\r\n\"shipmentId\": \"{{orderShipmentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Boolean_0_0_0\",\r\n\"value\": {{bool1}}\r\n},{\r\n\"name\": \"OrdersModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_1_0\",\r\n\"value\": \"{{html2}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"OrdersModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"{{long2}} \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties after addOrUpdate(order_shipment)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C327888 C327889 C327890 C327891 C327892 Check values\", function () {\r",
															"     pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short10\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n    shipments {\r\n            id\r\n            dynamicProperties {\r\n                name\r\n                value \r\n                valueType\r\n                dictionaryItem {\r\n                    label \r\n                    name \r\n                    id\r\n                }\r\n      }\r\n    }\r\n  }\r\n    } ",
														"variables": "{\r\n  \"id\": \"{{orderId5}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for payments in order",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Dynamic properties for payment order\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.updateOrderPaymentDynamicProperties.inPayments[0].dynamicProperties).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrderPaymentDynamicProperties($command: InputUpdateOrderPaymentDynamicPropertiesType!) {\r\n\r\n    updateOrderPaymentDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        number\r\n\r\n        inPayments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dynamicProperty {\r\n\r\n                    name \r\n\r\n                    label \r\n\r\n                    valueType\r\n\r\n                } \r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId5}}\",\r\n\"paymentId\":\"{{orderPaymentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},\r\n{\r\n\"name\": \"OrdersModule_Paymentln_Boolean_0_0_0\",\r\n\"value\":\"{{bool1}}\"\r\n},\r\n{\r\n\"name\": \"OrdersModule_Paymentln_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Decimal_0_0_0\",\r\n\"value\": \"{{decimal1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_1_0\",\r\n\"value\": \"{{html1}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_1_0\",\r\n\"value\": \"{{html2}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_0_0_0\",\r\n\"value\": \"{{int1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_1_0_0\",\r\n\"value\": \"{{int2}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_1_0_0\",\r\n\"value\": \"{{int3}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties after addOrUpdate(order_payments)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C292426 C292427 C292428 C292429 C292430 Check values\", function () {\r",
															"\r",
															"     pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short10\"));\r",
															"    \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n   inPayments {\r\n            id\r\n            dynamicProperties {\r\n                name \r\n                value \r\n                valueType\r\n                dynamicProperty {\r\n                    name \r\n                    label \r\n                    valueType\r\n                } \r\n                dictionaryItem {\r\n                    label \r\n                    name \r\n                    id\r\n    }\r\n  }\r\n    } \r\n  }\r\n}",
														"variables": "{\r\n  \"id\": \"{{orderId5}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add dynamic properties for order lineitem",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Dynamic properties for lineitem order\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.updateOrderItemDynamicProperties.items[0].dynamicProperties).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation updateOrderItemDynamicProperties($command: InputUpdateOrderItemDynamicPropertiesType!) {\r\n\r\n    updateOrderItemDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        items {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
														"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId5}}\",\r\n\"lineItemId\":\"{{lineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"{{short1}}\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Boolean_0_0_0\",\r\n\"value\": {{bool2}}\r\n},{\r\n\"name\": \"OrdersModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"{{data1}}\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Decimal_0_0_0\",\r\n\"value\": {{decimal1}}\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_0_0\",\r\n\"value\": \"{{html1}}\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html4}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_1_0\",\r\n\"value\": \"{{html2}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Image_0_0_0\",\r\n\"value\": \"{{image}}\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_0_0_0\",\r\n\"value\": {{int1}}\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int2}}\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_1_0_0\",\r\n\"value\": {{int3}}\r\n},{\r\n\"name\": \"OrdersModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"{{long1}}\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"{{long2}}\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"{{short3}}\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"{{short5}}\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short8}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short9}}\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"{{short10}}\",\r\n\"cultureName\":\"fr-FR\"\r\n}  ]\r\n}\r\n}  "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check dynamic properties after addOrUpdate(order_lineitem)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"C327860 C327861 C327862 C327863 C327864 Check values\", function () {\r",
															"\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"image\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"bool2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"data1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"decimal1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"html4\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"int3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"long2\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short1\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short3\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short5\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short8\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short9\"));\r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"short10\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n    items{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n     \r\n      }\r\n    }\r\n    }\r\n  }\r\n",
														"variables": "{\r\n  \"id\": \"{{orderId5}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Index orders",
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "[{\"documentType\":\"CustomerOrder\",\"deleteExistingIndex\":true}]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/search/indexes/index",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"search",
														"indexes",
														"index"
													]
												}
											},
											"response": []
										},
										{
											"name": "get all orders",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261161 Orders\", function () {\r",
															"    var json = pm.response.json();\r",
															"    pm.expect(json.data.orders.items).to.be.not.empty;\r",
															"    pm.expect(json.errors).to.be.undefined;\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(() => {}, 5000); "
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nitems{\r\n    id\r\n}\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\ninPayments{\r\n    id\r\n}\r\n\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by short text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293137 Search order by short text\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders.items).to.not.be.empty;\r",
															"   pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\n    totalCount\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"\\\"OrdersModule_CustomerOrder_ShortText_0_0_0\\\":\\\"{{short1}}\\\"\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by long text",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293768 Search order by long text\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"\\\"OrdersModule_CustomerOrder_LongText_0_0_0\\\":\\\"{{long1}}\\\"\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by integer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293146 Search order by integer\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"ordersmodule_customerorder_integer_1_0_0:{{int2}}\",\n\"cultureName\": \"en-US\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by decimal",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293147 Search order by decimal\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"ordersmodule_customerorder_decimal_1_0_0:{{decimal2}}\",\n\"cultureName\": \"en-US\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by bool",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293140 Search orders by bool\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"ordersmodule_customerorder_boolean_0_0_0:{{bool1}}\",\n\"cultureName\": \"en-US\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by date",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293142 Search orders by datetime\", function () {\r",
															"    var data = pm.response.json();\r",
															"\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"searchPhrase\": \"\\\"OrdersModule_CustomerOrder_DateTime_0_0_0\\\":\\\"{{data1}}\\\"\", \n\"cultureName\": \"en-US\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by html",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293765 Search order by html\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders).to.be.not.empty;\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"OrdersModule_CustomerOrder_Html_0_0_0:{{html1}}\",\n\"cultureName\": \"en-US\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "orders by image",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C293766 Search order by decimal\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.orders).to.not.eql(null);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
														"variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_image_0_0_0\\\":\\\"{{image}}\\\"\",\n\"cultureName\": \"en-US\"\n} "
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Order User [ID]",
									"item": [
										{
											"name": "Get user's orders by user id (User token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261153 Get user's orders by user id (User token)\", function () {\r",
															"     \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"orderId5\"));\r",
															"  });\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders(userId: \"{{userId2}}\") {\r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get user's orders by user id. User id does not belong to user (User token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261156 Get user's orders by user id. User id does not belong to user (User token)\", function () {  \r",
															"var json = pm.response.json();\r",
															"    pm.expect(json.data.orders.items[0].createdBy).to.include(pm.collectionVariables.get(\"userName1\"));\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders(userId: \"{{userId2}}\") {\r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      createdBy\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get all user's orders (User token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261163 Get all user's orders (User token)\", function () {\r",
															"    pm.expect(pm.response.json().data.orders.totalCount).to.eql(1);\r",
															"   \r",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"orderId5\"));\r",
															"  \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query {\r\n  orders {\r\n    totalCount\r\n    items {\r\n      id\r\n      status\r\n      number\r\n      createdDate\r\n      modifiedDate\r\n      customerId\r\n      customerName\r\n      shipments {\r\n        id\r\n        status\r\n        shipmentMethodCode\r\n        shipmentMethodOption\r\n        total {\r\n          amount\r\n        }\r\n      }\r\n      addresses {\r\n        id\r\n        firstName\r\n        lastName\r\n        line1\r\n        countryName\r\n        countryCode\r\n        postalCode\r\n      }\r\n      total {\r\n        amount\r\n      }\r\n      subTotal {\r\n        amount\r\n      }\r\n      discountTotal {\r\n        amount\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Change order status [ID]",
									"item": [
										{
											"name": "Check Order  Status = New",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Check Status = New\", function () {\r",
															"    var data = pm.response.json();\r",
															"    pm.expect(data.data.order.status).to.be.eql(\"New\");\r",
															"\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    number\n    status\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
														"variables": "{\n  \"id\": \"{{orderId5}}\",\n  \"cultureName\": \"{{cultureName}}\"\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change order status to \"Pending\" by order id (User token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327905 Change status to Pending by order id (User token)\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.changeOrderStatus).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token2}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeOrderStatus {\r\n    changeOrderStatus (command: { orderId: \"{{orderId5}}\",  status: \"Pending\"})\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change order status to \"Processing\" by order id (Other user authorization token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C327906 Change order status to Pending by order id (Other user token)\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].message).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{Token1}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeOrderStatus {\r\n    changeOrderStatus (command: { orderId: \"{{orderId5}}\",  status: \"Processing\"})\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change order status to \"Pending\" by user id without Authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C328710 Change order status to Pending by user id without Authorization\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.errors[0].message).to.include(\"VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Access denied\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeOrderStatus {\r\n    changeOrderStatus (command: { orderId: \"{{orderId5}}\",  status: \"Pending\"})\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change any order status to \"Processing\" by orderId (Admin token)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"C261167 Change any order status to Processing by orderId (Admin authorization token)\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.changeOrderStatus).to.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation changeOrderStatus {\r\n    changeOrderStatus (command: { orderId: \"{{orderId5}}\",  status: \"Processing\"})\r\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Clear all",
									"item": [
										{
											"name": "Delete a product 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId1}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a product 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId2}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a product 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/catalog/products?ids={{ProductId3}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"catalog",
														"products"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{ProductId3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete user's Orders[admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([204, 202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AdminToken}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/order/customerOrders?ids={{orderId4}}&ids={{orderId5}}",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"order",
														"customerOrders"
													],
													"query": [
														{
															"key": "ids",
															"value": "{{orderId4}}"
														},
														{
															"key": "ids",
															"value": "{{orderId5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete users [admin]",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Delete users [admin]\", function(){\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
															"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
															"    pm.expect(data.errors).to.be.undefined;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"userNames\":[\"{{userName1}}\",\"{{userName2}}\",\"{{userName3}}\"]\r\n   \r\n  }\r\n}\r\n"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contact_1",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contact_2",
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Contact_3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
														"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId3}}\"\r\n  }\r\n}"
													}
												},
												"url": {
													"raw": "{{url}}/graphql",
													"host": [
														"{{url}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AdminToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "FinishBlocks",
							"item": [
								{
									"name": "DeleteCatalog",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/catalog/catalogs/{{catalogQA}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"catalogs",
												"{{catalogQA}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCategory",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"objectIds\":[\"{{categoryId}}\",\"{{categoryId2}}\"]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/catalog/listentries/delete",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"catalog",
												"listentries",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteStore",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/stores?ids={{storeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"stores"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{storeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelist",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/pricelists?ids={{pricelistId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"pricelists"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "DeletePricelistAssignment",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/pricing/assignments?ids={{pricelistAssignmentId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"pricing",
												"assignments"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{pricelistAssignmentId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*pm.test(\"Error message\", function () {",
					"",
					"    if(pm.response.json().errors[0] != \"\")",
					"    {",
					"    console.log(jsonData.errors[0].message);",
					"    }",
					"});*/"
				]
			}
		}
	],
	"variable": [
		{
			"key": "AdminToken",
			"value": ""
		},
		{
			"key": "Token1",
			"value": ""
		},
		{
			"key": "Token2",
			"value": ""
		},
		{
			"key": "Token3",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "urlQA",
			"value": "https://vcptcore-qa.paas.govirto.com"
		},
		{
			"key": "adminQA",
			"value": "https://vcptcore-qa.paas.govirto.com"
		},
		{
			"key": "urlStoreFrontQA",
			"value": "https://vcptcore-qa-storefront.paas.govirto.com",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "catalogQA",
			"value": "{{catalogQA}}"
		},
		{
			"key": "categoryQA",
			"value": "0d4ad9bab9184d69a6e586effdf9c2ea"
		},
		{
			"key": "categoryId",
			"value": "4b50b398ff584af9b6d69c082c94844b"
		},
		{
			"key": "categoryId2",
			"value": "{{categoryId2}}",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "storeId",
			"value": "B2B-store"
		},
		{
			"key": "storeId1",
			"value": "Registration",
			"type": "string"
		},
		{
			"key": "storeId2",
			"value": "B2B-store",
			"type": "string"
		},
		{
			"key": "storeCustomerStatus",
			"value": "storeCustomerStatus",
			"type": "string"
		},
		{
			"key": "storeCompanyStatus",
			"value": "storeCompanyStatus",
			"type": "string"
		},
		{
			"key": "currencyCode",
			"value": "USD"
		},
		{
			"key": "cultureName",
			"value": "en-US"
		},
		{
			"key": "after",
			"value": "0"
		},
		{
			"key": "first",
			"value": "2"
		},
		{
			"key": "sort",
			"value": ""
		},
		{
			"key": "filter",
			"value": "bool:true"
		},
		{
			"key": "password",
			"value": "eXp1Z1qad"
		},
		{
			"key": "email",
			"value": "eXp1@mail.com"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "roleId",
			"value": "org-maintainer"
		},
		{
			"key": "roleName",
			"value": "Organization maintainer"
		},
		{
			"key": "roleNormName",
			"value": "ORGANIZATION MANAGER",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "787585c5-8240-4617-8bf9-30c07201a17a"
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "userId3",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId4",
			"value": ""
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userName1",
			"value": "userName_1"
		},
		{
			"key": "userName2",
			"value": "user_Assign_2"
		},
		{
			"key": "userName3",
			"value": "user_Assign_2333333"
		},
		{
			"key": "userName4",
			"value": "superUser4@a"
		},
		{
			"key": "userPassword1",
			"value": "Password",
			"type": "string"
		},
		{
			"key": "customerEmail1",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "contactId",
			"value": "71df1001-efeb-46e4-bafd-92f69da032df"
		},
		{
			"key": "contactId1",
			"value": "4cbd2f3c-cad5-434c-be59-1dbcbe66fded"
		},
		{
			"key": "contactId2",
			"value": "b855a16c-b43f-488f-a570-bada5ca0566d"
		},
		{
			"key": "contactId3",
			"value": "889abe65-b6e2-4f20-8348-f5c983d076cc"
		},
		{
			"key": "contactId4",
			"value": "429e3548-4a98-4f5e-aeaa-d47f3d3c1e39"
		},
		{
			"key": "contactName1",
			"value": ""
		},
		{
			"key": "firstName1",
			"value": "User",
			"type": "string"
		},
		{
			"key": "middleName1",
			"value": ""
		},
		{
			"key": "lastName1",
			"value": "Postman",
			"type": "string"
		},
		{
			"key": "phoneNumber1",
			"value": "",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "organizationId",
			"value": "3b85ef22-f9fa-43bc-83d1-cb6f1be4eb0f"
		},
		{
			"key": "organizationId1",
			"value": ""
		},
		{
			"key": "organizationId2",
			"value": ""
		},
		{
			"key": "organizationName1",
			"value": "organizationName1",
			"type": "string"
		},
		{
			"key": "companyEmail1",
			"value": ""
		},
		{
			"key": "organizationDescription1",
			"value": ""
		},
		{
			"key": "   ",
			"value": "",
			"type": "string"
		},
		{
			"key": "xapi_code",
			"value": ""
		},
		{
			"key": "Code1",
			"value": ""
		},
		{
			"key": "Code2",
			"value": ""
		},
		{
			"key": "Code3",
			"value": ""
		},
		{
			"key": "Code4",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "Nameofproduct",
			"value": ""
		},
		{
			"key": "Nameofproduct1",
			"value": ""
		},
		{
			"key": "Nameofproduct2",
			"value": ""
		},
		{
			"key": "Nameofproduct3",
			"value": ""
		},
		{
			"key": "Nameofproduct4",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "promotionId",
			"value": "f24a5558-2fa3-46f3-838d-02482d4d6d3b"
		},
		{
			"key": "xapi_promo_code",
			"value": "xapi_promo_code"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "listId",
			"value": ""
		},
		{
			"key": "listId1",
			"value": ""
		},
		{
			"key": "listId2",
			"value": ""
		},
		{
			"key": "price",
			"value": "569.0"
		},
		{
			"key": "ProductPrice1",
			"value": "9999"
		},
		{
			"key": "ProductPrice2",
			"value": "101"
		},
		{
			"key": "ProductPrice3",
			"value": "900"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "productIdQA",
			"value": ""
		},
		{
			"key": "ProductId",
			"value": "ac8da6c50cef42ad97d6f1effe2abaee"
		},
		{
			"key": "variationId",
			"value": ""
		},
		{
			"key": "ProductId1",
			"value": "eab75312-4dec-44c2-98cf-3411b40e44a6"
		},
		{
			"key": "ProductId2",
			"value": "22222222"
		},
		{
			"key": "ProductId3",
			"value": "33333333"
		},
		{
			"key": "ProductId4",
			"value": "c13541d5-b154-4165-99ec-67bbc873a372"
		},
		{
			"key": "ProductId5",
			"value": "ad4ae79ffdbc4c97959139a0c387c72e",
			"type": "string"
		},
		{
			"key": "ProductId6",
			"value": "f1b26974b7634abaa0900e575a99476f",
			"type": "string"
		},
		{
			"key": "ProductId7",
			"value": "9cbd8f316e254a679ba34a900fccb076",
			"type": "string"
		},
		{
			"key": "ProductId8",
			"value": "e7eee66223da43109502891b54bc33d3",
			"type": "string"
		},
		{
			"key": "ProductId9",
			"value": "4ed55441810a47da88a483e5a1ee4e94",
			"type": "string"
		},
		{
			"key": "ProductId10",
			"value": "bd8e58948c3648e8b08e1fb4ed4e01bb",
			"type": "string"
		},
		{
			"key": "ProductId11",
			"value": "6e37b94d874247e4ab7469e8fefd247e",
			"type": "string"
		},
		{
			"key": "ProductId12",
			"value": "cb8b439491444dad94030be5f551901c",
			"type": "string"
		},
		{
			"key": "ProductId13",
			"value": "8e3a763a3cff407b97e2a2f6390b4048",
			"type": "string"
		},
		{
			"key": "variationId1",
			"value": "variationId1",
			"type": "string"
		},
		{
			"key": "variationId2",
			"value": "variationId2",
			"type": "string"
		},
		{
			"key": "variationId3",
			"value": "variationId3",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "DefaultFFCId",
			"value": "vendor-fulfillment"
		},
		{
			"key": "DefaultFFCName",
			"value": "Los Angeles Branch"
		},
		{
			"key": "AvaibleFFCId",
			"value": "142ba5568ae4454aad553ece41b9c3b5"
		},
		{
			"key": "AvaibleFFCName",
			"value": "Chicago Branch"
		},
		{
			"key": "ffcId1",
			"value": ""
		},
		{
			"key": "ffcId2",
			"value": ""
		},
		{
			"key": "ffcId3",
			"value": ""
		},
		{
			"key": "ffcId4",
			"value": ""
		},
		{
			"key": "ffcShortDescription1",
			"value": "",
			"type": "string"
		},
		{
			"key": "ffcDescription1",
			"value": "",
			"type": "string"
		},
		{
			"key": "ffcName1",
			"value": "",
			"type": "string"
		},
		{
			"key": "ffcCity1",
			"value": "",
			"type": "string"
		},
		{
			"key": "ffcGeoLocation1",
			"value": "",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "total1",
			"value": ""
		},
		{
			"key": "total2",
			"value": ""
		},
		{
			"key": "cartId",
			"value": "961a0f8c-3451-4255-84c9-382516e73e3d"
		},
		{
			"key": "cartId1",
			"value": ""
		},
		{
			"key": "cartId2",
			"value": ""
		},
		{
			"key": "cartName",
			"value": "default"
		},
		{
			"key": "cartType ",
			"value": "null"
		},
		{
			"key": "cartAddress",
			"value": ""
		},
		{
			"key": "cartAddressId",
			"value": ""
		},
		{
			"key": "shippingAddressId1",
			"value": ""
		},
		{
			"key": "shippingAddressId2",
			"value": ""
		},
		{
			"key": "billingAddressId1",
			"value": ""
		},
		{
			"key": "billingAddressId2",
			"value": "",
			"type": "string"
		},
		{
			"key": "BillingAndShippingId1",
			"value": "876fec0a-f726-440f-b069-3223dc9232a5",
			"type": "string"
		},
		{
			"key": "billingKey",
			"value": ""
		},
		{
			"key": "shipmentKey",
			"value": ""
		},
		{
			"key": "lineItemId",
			"value": "7a2e595a-8d06-487e-b1c5-878c12e9774a"
		},
		{
			"key": "cartLineItem1",
			"value": ""
		},
		{
			"key": "cartLineItem2",
			"value": ""
		},
		{
			"key": "lineItemId1",
			"value": ""
		},
		{
			"key": "lineItemId2",
			"value": ""
		},
		{
			"key": "lineItemsComment",
			"value": "commentForItemNew"
		},
		{
			"key": "paymentNumber",
			"value": "PI210628-00401"
		},
		{
			"key": "paymentId1",
			"value": ""
		},
		{
			"key": "paymentId2",
			"value": ""
		},
		{
			"key": "paymentId3",
			"value": ""
		},
		{
			"key": "shipmentId1",
			"value": ""
		},
		{
			"key": "shipmentId2",
			"value": ""
		},
		{
			"key": "comment",
			"value": "commentForCartOLD",
			"type": "string"
		},
		{
			"key": "newComment",
			"value": "commentForCartNew",
			"type": "string"
		},
		{
			"key": "nativePaymentMethodId1",
			"value": ""
		},
		{
			"key": "nativePaymentMethodCode1",
			"value": ""
		},
		{
			"key": "nativePaymentMethodName1",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "shipment_update",
			"value": "1234567",
			"type": "string"
		},
		{
			"key": "payment_update",
			"value": "7645321 p",
			"type": "string"
		},
		{
			"key": "orderPaymentId",
			"value": "dfb38a0c-b9ce-4e4d-b580-85dd80104653"
		},
		{
			"key": "orderShipmentId",
			"value": "5db3dd0f-a2c0-44bb-b100-22600b98e03b"
		},
		{
			"key": "orderNumber",
			"value": "CO210628-00401"
		},
		{
			"key": "orderId",
			"value": "ce1553ab-67f2-4c3c-8fbc-de485331a4bb"
		},
		{
			"key": "orderId1",
			"value": ""
		},
		{
			"key": "orderId2",
			"value": ""
		},
		{
			"key": "orderId3",
			"value": ""
		},
		{
			"key": "orderId4",
			"value": ""
		},
		{
			"key": "orderId5",
			"value": ""
		},
		{
			"key": "orderId6",
			"value": ""
		},
		{
			"key": "  ",
			"value": "",
			"type": "string"
		},
		{
			"key": "city1",
			"value": "Vienna"
		},
		{
			"key": " ",
			"value": "",
			"type": "string"
		},
		{
			"key": "propertyId",
			"value": "d21b2008-c5be-4050-a74f-355b0d7012f4"
		},
		{
			"key": "propertyId1",
			"value": ""
		},
		{
			"key": "propertyId2",
			"value": "9a762d98-c039-4784-a7df-05a2cd9730a1",
			"type": "string"
		},
		{
			"key": "propertyId3",
			"value": "2728a0e3-a83d-470c-9483-a1cb66d09126",
			"type": "string"
		},
		{
			"key": "propertyId4",
			"value": "dc84c1a9-3737-45a6-ad7f-5140e1b55718",
			"type": "string"
		},
		{
			"key": "propertyId5",
			"value": "4d74e9c3-51fc-4105-8808-068c9bba9e2f"
		},
		{
			"key": "propertyId6",
			"value": "89890fa1-6b01-45a6-ad8a-4622231cbfcf"
		},
		{
			"key": "propertyId7",
			"value": "8cd92f30-2a3d-4005-9ba2-030129a607a8",
			"type": "string"
		},
		{
			"key": "propertyId8",
			"value": "2c4e0d0d-81bf-4e2d-a8b1-a9657d8896df",
			"type": "string"
		},
		{
			"key": "propertyId9",
			"value": "ca98d5bb-7321-4dfb-afb4-bf32ac24c6db",
			"type": "string"
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "decimal1",
			"value": "112.11234",
			"type": "string"
		},
		{
			"key": "decimal2",
			"value": "661.21234",
			"type": "string"
		},
		{
			"key": "decimal3",
			"value": "551.51234",
			"type": "string"
		},
		{
			"key": "int1",
			"value": "123",
			"type": "string"
		},
		{
			"key": "int2",
			"value": "801",
			"type": "string"
		},
		{
			"key": "int3",
			"value": "901",
			"type": "string"
		},
		{
			"key": "long1",
			"value": "ndkvncvkdvnjednvksnmdklvndekvn11",
			"type": "string"
		},
		{
			"key": "long2",
			"value": "this is long text for languages1",
			"type": "string"
		},
		{
			"key": "data1",
			"value": "2021-11-25T21:00:00",
			"type": "string"
		},
		{
			"key": "date1",
			"value": "2021-11-25",
			"type": "string"
		},
		{
			"key": "data_update",
			"value": "2022-02-14T14:00:00",
			"type": "string"
		},
		{
			"key": "bool1",
			"value": "true",
			"type": "string"
		},
		{
			"key": "bool2",
			"value": "false",
			"type": "string"
		},
		{
			"key": "html1",
			"value": "value_texthtmlHHH1",
			"type": "string"
		},
		{
			"key": "html2",
			"value": "textHHHH001=en1",
			"type": "string"
		},
		{
			"key": "html3",
			"value": "textHHHH002=de1",
			"type": "string"
		},
		{
			"key": "html4",
			"value": "textHHHH003=fr1",
			"type": "string"
		},
		{
			"key": "image",
			"value": "image",
			"type": "string"
		},
		{
			"key": "short1",
			"value": "text for short",
			"type": "string"
		},
		{
			"key": "short2",
			"value": "1111111112",
			"type": "string"
		},
		{
			"key": "short3",
			"value": "cbe42029-527d-4fad-b55a-0f969175eb04",
			"type": "string"
		},
		{
			"key": "short4",
			"value": "text value for en-US1",
			"type": "string"
		},
		{
			"key": "short5",
			"value": "text value for fr-FR1",
			"type": "string"
		},
		{
			"key": "short6",
			"value": "value11",
			"type": "string"
		},
		{
			"key": "short7",
			"value": "value21",
			"type": "string"
		},
		{
			"key": "short8",
			"value": "value22-en",
			"type": "string"
		},
		{
			"key": "short9",
			"value": "value25-de",
			"type": "string"
		},
		{
			"key": "short10",
			"value": "value26-fr",
			"type": "string"
		},
		{
			"key": "short11",
			"value": "6d6a6c88-f2a6-4342-a0b3-40084fd3816f",
			"type": "string"
		},
		{
			"key": "short12",
			"value": "ef327e04-7414-4683-95f9-29efc81f978a",
			"type": "string"
		},
		{
			"key": "short13",
			"value": "1ad328b7-41f6-4beb-a1ab-3c5cbfb2af2c",
			"type": "string"
		},
		{
			"key": "short14",
			"value": "4adc3561-ea8c-4c4b-aad3-714daef29247",
			"type": "string"
		},
		{
			"key": "short15",
			"value": "b93fe520-711a-432c-a55c-9ca7e4ceb71f",
			"type": "string"
		},
		{
			"key": "decimal_update",
			"value": "23.45",
			"type": "string"
		},
		{
			"key": "long_update",
			"value": "Long text new",
			"type": "string"
		},
		{
			"key": "html_update",
			"value": "htmltextnew",
			"type": "string"
		},
		{
			"key": "image_update",
			"value": "https://regression-platform.qa.govirto.com/cms-content/assets/catalog/SAGN4N910CBK/1280x1280_4257_9450.jpg",
			"type": "string"
		},
		{
			"key": "int_update",
			"value": "100",
			"type": "string"
		},
		{
			"key": "int2_update",
			"value": "2300",
			"type": "string"
		},
		{
			"key": "int3_update",
			"value": "674",
			"type": "string"
		},
		{
			"key": "short_update",
			"value": "f7c1984d-a48c-4720-9a97-4c6a9c508b24",
			"type": "string"
		},
		{
			"key": "short2_update",
			"value": "6882b02b-d42e-4ba3-82f2-0f16c45c8da7",
			"type": "string"
		},
		{
			"key": "short3_update",
			"value": "value_3",
			"type": "string"
		},
		{
			"key": "short4_update",
			"value": "value_4",
			"type": "string"
		},
		{
			"key": "Sex",
			"value": "d58bedc559c6420fbde35666adae3251",
			"type": "string"
		},
		{
			"key": "occupation",
			"value": "9a21cdb9583e4794b200f2579bce55b9",
			"type": "string"
		},
		{
			"key": "Defaultship",
			"value": "aDefault",
			"type": "string"
		},
		{
			"key": "Purchase order number",
			"value": "new value_1_2",
			"type": "string"
		},
		{
			"key": "Decimal",
			"value": "33.88",
			"type": "string"
		},
		{
			"key": "A_line_long",
			"value": "Long comment",
			"type": "string"
		},
		{
			"key": "Brand",
			"value": "Asus",
			"type": "string"
		},
		{
			"key": "lineItemId3",
			"value": ""
		},
		{
			"key": "emptyDynamic",
			"value": "",
			"type": "string"
		},
		{
			"key": "quoteId",
			"value": ""
		},
		{
			"key": "quoteId1",
			"value": ""
		},
		{
			"key": "quoteId2",
			"value": ""
		},
		{
			"key": "quoteNumber",
			"value": ""
		},
		{
			"key": "quoteStatusDraft",
			"value": "Draft",
			"type": "string"
		},
		{
			"key": "quoteStatusProcess",
			"value": "Processing",
			"type": "string"
		},
		{
			"key": "shipmentKey1",
			"value": ""
		},
		{
			"key": "CatalogQA",
			"value": ""
		},
		{
			"key": "pricelistId",
			"value": ""
		},
		{
			"value": "",
			"type": "string"
		},
		{
			"key": "forbiddenError",
			"value": "VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.ForbiddenError: Access denied",
			"type": "string"
		},
		{
			"key": "authorizationErrorAnonim",
			"value": "VirtoCommerce.ExperienceApiModule.Core.Infrastructure.Authorization.AuthorizationError: Can't run the operation under anonymous user or the token expired or invalid.",
			"type": "string"
		},
		{
			"key": "au",
			"value": "",
			"type": "string"
		},
		{
			"key": "pricelistAssignmentId",
			"value": ""
		},
		{
			"key": "VariationId1",
			"value": ""
		},
		{
			"key": "customerEmail2",
			"value": ""
		},
		{
			"key": "ffcName1Postman",
			"value": ""
		},
		{
			"key": "ffcId1Postman",
			"value": ""
		},
		{
			"key": "ffcName1PostmanAvailable",
			"value": ""
		},
		{
			"key": "ffcId1PostmanAvailable",
			"value": ""
		}
	]
}