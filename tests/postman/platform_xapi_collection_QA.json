{
	"info": {
		"_postman_id": "d7b26677-db76-4842-85de-998fb5705259",
		"name": "XAPI_QA_ENV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Ready_for_CI",
			"item": [
				{
					"name": "GetToken",
					"item": [
						{
							"name": "GetAdminToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set admin token\", function () {\r",
											"   \r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "grand_type",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "grant_type=password&scope=offline_access&username=admin&password=store",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{url}}/connect/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contacts",
					"item": [
						{
							"name": "Assign user to organization (no permission)",
							"item": [
								{
									"name": "createOrganization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set organizationId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign\",\n\"addresses\": []\n}\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "createContact1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set contactId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_user_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
												"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"user11_Acc@mailto.plus\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }}\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check added user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check user\", function () {\r",
													"    var data = pm.response.json();\r",
													" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
													"    pm.expect(data.errors).to.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "createContact 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set contactId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_user_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
												"variables": "{\n\"command\":\n  {\n \n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"user223_Acc@mailto.plus\",\n    \"password\":\"{{userName2}}\",\n    \"userName\": \"{{userName2}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId2}}\"\n     }      \n  }\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check added user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check user\", function () {\r",
													"    var data = pm.response.json();\r",
													" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
													"    pm.expect(data.errors).to.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index Contact",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}},{{contactId2}}\"]}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index Organization",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token_for_User1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set Token1\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "grand_type",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{url}}/connect/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to update Contact2 address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Access denied\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
													"    console.log(jsonData.errors[0].message);\r",
													"});\r",
													"\r",
													"\r",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId2}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Steven\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Checknot update address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address wasn't add\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.contact.addresses).to.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        addresses {items{email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }}\r\n    }\r\n    }\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to update Contact2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Access denied\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
													"    console.log(jsonData.errors[0].message);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"id\": \"{{contactId2}}\",\r\n    \"name\": \"UserA\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [],\r\n    \"fullName\": \"Contact22\",\r\n    \"firstName\": \"Contact22\",\r\n    \"lastName\": \"Contact22\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check not update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Contact wasn't update\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.contact.fullName).to.not.eql(\"Contact22\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        \r\n    }\r\n    }\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to delete Contact2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Access denied\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
													"    console.log(jsonData.errors[0].message);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"contact not deleted\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.contact.fullName).to.not.empty;\r",
													"});\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete users admin",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete contact1 admin",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete contact2 admin",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete organization admin",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/api/members?ids={{organizationId1}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"members"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{organizationId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Assign user to organization (permission)",
							"item": [
								{
									"name": "Add role \"organization manager\"",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{roleId}}\",\"name\":\"{{roleName}}\",\"permissions\":[{\"id\":\"customer:read\",\"name\":\"customer:read\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:create\",\"name\":\"customer:create\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:access\",\"name\":\"customer:access\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:update\",\"name\":\"customer:update\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:delete\",\"name\":\"customer:delete\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[],\"isChecked\":true}]}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/platform/security/roles",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"platform",
												"security",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "createOrganization",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set organizationId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign\",\n\"addresses\": []\n}\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "createContact1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set contactId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_user_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n    \n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
												"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"user11_Acc@mailto.plus\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }}\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check added user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check user\", function () {\r",
													"    var data = pm.response.json();\r",
													" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
													"    pm.expect(data.errors).to.be.undefined;\r",
													"});\r",
													"pm.test(\"Set userId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"userId\", jsonData.data.contact.securityAccounts[0].id);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "add manager role to user1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AdminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateUser ($command: InputUpdateUserType!) {\r\n    updateUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n",
												"variables": "{\"command\":{\r\n\"applicationUser\":{\r\n  \"userType\": \"Customer\",\r\n  \"roles\": [{   \r\n           \"name\":\"{{roleName}}\",\r\n           \"id\":\"{{roleId}}\",\r\n           \"permissions\":[]\r\n        }],\r\n\r\n  \"securityStamp\": \"RandomData\",\r\n  \"storeId\":\"Electronics\",\r\n  \"id\":\"{{userId1}}\",\r\n  \"email\": \"user11_Acc@mailto.plus\",\r\n  \"userName\":\"{{userName1}}\"\r\n\r\n}\r\n}\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "createContact 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set contactId\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
												"variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "add_user_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
												"variables": "{\n\"command\":\n  {\n     \"applicationUser\":{\n    \"createdBy\": \"eXp16\",\n    \"email\": \"user223_Acc@mailto.plus\",\n    \"password\":\"{{userName2}}\",\n    \"userName\": \"{{userName2}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId2}}\"\n     }\n  }\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check added user2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check user\", function () {\r",
													"    var data = pm.response.json();\r",
													" pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
													"    pm.expect(data.errors).to.be.undefined;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index Contact",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}},{{contactId2}}\"]}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								},
								{
									"name": "Index Organization",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/search/indexes/index",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"search",
												"indexes",
												"index"
											]
										}
									},
									"response": []
								},
								{
									"name": "Token_for_User1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Set Token1\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "grand_type",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{url}}/connect/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"connect",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to update Contact2 address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Address was add\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.updateMemberAddresses.addresses).to.not.empty;\r",
													"});\r",
													"\r",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId2}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Stevewn\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check update address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Address was add\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.contact.addresses).to.not.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        addresses { firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n    }\r\n    }\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to update Contact2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Contact updated\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.updateContact.fullName).to.eql(\"Contact22\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"id\": \"{{contactId2}}\",\r\n    \"name\": \"UserA\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [],\r\n    \"fullName\": \"Contact22\",\r\n    \"firstName\": \"Contact22\",\r\n    \"lastName\": \"Contact22\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Contact updated\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.contact.fullName).to.eql(\"Contact22\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        \r\n    }\r\n    }\r\n\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Try to delete Contact2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Token1}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"contact deleted\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.contact).to.null;\r",
													"});\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete users admin",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete contact1 admin",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete contact2 admin",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/graphql",
											"host": [
												"{{url}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete organization admin",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
												"variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
											}
										},
										"url": {
											"raw": "{{url}}/api/members?ids={{organizationId1}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"members"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{organizationId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{AdminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "createContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set contactId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"contactId\", jsonData.data.createContact.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
										"variables": "{\n\"command\": {\n\"name\": \"{{contactName}}\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA\",\n\"firstName\": \"UserA\",\n\"lastName\": \"UserA\"\n}\n}\n\n"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CheckId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.updateContact.id).to.eql(pm.collectionVariables.get(\"contactId\"));\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check changes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.updateContact.fullName).to.eql(\"UserA111\");\r",
											"    pm.expect(jsonData.data.updateContact.lastName).to.eql(\"UserB\");\r",
											"    pm.expect(jsonData.data.updateContact.name).to.eql(\"UserA111\");\r",
											"});\r",
											"\r",
											"pm.test(\"Address is emppty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.updateContact.addresses.items).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\naddresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }}\n}\n}",
										"variables": "{\n\"command\": {\n\"id\": \"{{contactId}}\",\n\"name\": \"UserB\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA111\",\n\"firstName\": \"UserB\",\n\"lastName\": \"UserB\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateAddresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Address was add\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.updateContact.addresses.items).to.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateContact ($command: InputUpdateContactType!) {\n    updateContact (command: $command) {\n         addresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }\n        }\n        }\n    }",
										"variables": "{\n\"command\": {\n\"id\":\"{{contactId}}\",\n\"firstName\":\"UserB\",\n\"lastName\":\"UserB\",\n\"addresses\": [{\n\"addressType\": 2,\n\"city\": \"1Thousand oaks 25\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States\",\n\"email\": \"alivemenone@gmail.com\",\n\"firstName\": \"Steven\",\n\"lastName\": \"Woodward\",\n\"line1\": \"1888, colgate dr\",\n\"name\": \"Steven Woodward 1888, colgate dr Thousand oaks California 91360 United States\",\n\"postalCode\": \"91360\",\n\"regionId\": \"CA\",\n\"regionName\": \"California\"\n}]\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update contact dynamic property",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname\r\n        dynamicProperties {\r\n          name value\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"{{contactId}}\",\r\n    \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Decimal_0_0_0\",\r\n          \"value\": \"122.50000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_0_0\",\r\n          \"value\": \"Newtexthtml\"\r\n        },\r\n                {\r\n          \"name\": \"Married\",\r\n          \"value\": \"false\"\r\n        },\r\n        {\r\n         \"name\": \"Sex\",\r\n          \"value\": \"d58bedc559c6420fbde35666adae3251\"\r\n        },\r\n        {\r\n        \"name\": \"occupation\",\r\n        \"value\":\"9a21cdb9583e4794b200f2579bce55b9\"\r\n        }, \r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"aDefault\"\r\n        },            \r\n            {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": \"30\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": \"22\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_0_0_0\",\r\n          \"value\": \"22\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"html11\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"html12\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"html10\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Boolean_0_0_0\",\r\n          \"value\": \"True\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_DateTime_0_0_0\",\r\n          \"value\": \"08/01/2021 00:00:00\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": \"15.30000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": \"17.50000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_0_0\",\r\n          \"value\": \"very loong text\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_0\",\r\n          \"value\": \"super_short\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Image_0_0_0\",\r\n          \"value\": \"link to image\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_1_0\",\r\n          \"value\": \"this is loooong text for FR languages\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_1\",\r\n          \"value\": \"short_value1\"          \r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"value1V\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n         \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"value2V\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"short_text value for en-US\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n          {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"short_text value for de-DE\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n           \"value\": \"short_text value for fr-FR\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"valueV1\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"valueV2\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"value22\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"value22\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"value11\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_1\",\r\n          \"value\": \"88629653-094f-476e-8be7-50bca237e132\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        }\r\n  \t]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Index Contact",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId}}\"]}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/search/indexes/index",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"search",
										"indexes",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by bool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by bool\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Boolean_0_0_0:true\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by integer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by integer\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Integer_1_0_0:22\"\r\n      }\r\n\r\n"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by long text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by long text\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_LongText_0_0_0\\\":\\\"very loong text\\\"\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by date\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"date:2021-07-28\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by image\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_Image_0_0_0\\\":\\\"link to image\\\"\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by decimal\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Decimal_0_0_0:122.50000\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by html\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Html_0_1_0:html11\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts by short text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search contacts by short text\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_ShortText_1_1_0\\\":\\\"value22\\\"\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Your test name\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.contact).to.not.eql(null);\r",
											"    pm.expect(json.data.contact).to.be.an(\"object\");\r",
											"    pm.expect(json.data.contact.id).to.be.a(\"string\");\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n    dynamicProperties\n    {\n      dictionaryItem\n      {\n       id\n      label\n      }\n      name\n      value\n    }\n  }\n    }\n",
										"variables": "{\n  \"id\": \"{{contactId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search orders\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"after\": \"0\",\r\n\"first\": 20,\r\n\"sort\": \"name:desc\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteContact",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation deleteContact ($command: InputDeleteContactType!) {\n    deleteContact (command: $command)\n}",
										"variables": "{\n  \"command\": {\n    \"contactId\": \"{{contactId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Organizations",
					"item": [
						{
							"name": "createOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set organizationId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"organizationId\", jsonData.data.createOrganization.id);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
										"variables": "{\n\"command\": {\n\"name\": \"OrganizationxApiReg123456\",\n\"addresses\": []\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CheckId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.updateOrganization.id).to.eql(pm.collectionVariables.get(\"organizationId\"));\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check changes\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.updateOrganization.name).to.eql(\"OrganizationxApiReg_Updat2e1\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n\t\t\t\t\t\t\t\t\t\t}\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
										"variables": "{\n\"command\": {\n\"id\": \"{{organizationId}}\",\n\"name\": \"OrganizationxApiReg_Updat2e1\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update_organizatiom_dynamic_property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname \r\n        dynamicProperties {\r\n          name value \r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"{{organizationId}}\",\r\n    \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Organization_Decimal_0_0_0\",\r\n          \"value\": \"112.00000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_0_0\",\r\n          \"value\": \"Org_texthtmlHHH1\"\r\n        }, \r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"aDefault1\"\r\n        },  \r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_0_0_0\",\r\n          \"value\": \"40001\"\r\n        },          \r\n            {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\": \"801\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\": \"901\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"textHHHH001=en1\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"textHHHH002=de1\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"textHHHH003=fr1\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Boolean_0_0_0\",\r\n          \"value\": \"false\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_DateTime_0_0_0\",\r\n          \"value\": \"05/05/2021 11:00:01\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\r\n          \"value\": \"661.20000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\r\n          \"value\": \"551.50000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_LongText_0_0_0\",\r\n          \"value\": \"ndkvncvkdvnjednvks\\nmdklvndekvn11\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_0\",\r\n          \"value\": \"Go_org1\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Image_0_0_0\",\r\n          \"value\": \"https://regression-platform.qa.govirto.com/cms-content/assets/catalog/Camcorders/102320611.jpg\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_LongText_0_1_0\",\r\n          \"value\": \"this is long text for FR languages1\",\r\n                   \"cultureName\":\"fr-FR\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_1\",\r\n          \"value\": \"11111111122\"          \r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_1\",\r\n          \"value\": \"value00111\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n         \"name\": \"CustomerModule_Organization_ShortText_0_1_1\",\r\n          \"value\": \"value00211\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\r\n          \"value\": \"text value for en-US1\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\r\n           \"value\": \"text value for fr-FR1\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\r\n          \"value\": \"value11\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\r\n          \"value\": \"value21\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"value21\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"value21\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"value11\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"shortandmulti011\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"shortandmulti011\",\r\n\t\t    \"cultureName\": \"de-DE\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"shortandmulti011\",\r\n\t\t    \"cultureName\": \"fr-FR\"\r\n        }\r\n  \t]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Index Organization",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/search/indexes/index",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"search",
										"indexes",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by bool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by bool\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Boolean_0_0_0:false\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by integer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by integer\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n     \"searchPhrase\": \"CustomerModule_Organization_Integer_0_0_0:40001\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by long text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by long text\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"\\\"CustomerModule_Organization_LongText_0_0_0\\\":\\\"ndkvncvkdvnjednvks\\nmdklvndekvn11\\\"\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by date\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"\\\"CustomerModule_Organization_DateTime_0_0_0\\\":\\\"05/05/2021 11:00:01\\\"\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by image\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_Image_0_0_0\\\":\\\"https://regression-platform.qa.govirto.com/cms-content/assets/catalog/Camcorders/102320611.jpg\\\"\"\r\n}\r\n"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by decimal\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Decimal_0_0_0:112.00000\"\r\n\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by html\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Html_0_0_0:Org_texthtmlHHH1\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations by short text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search organizations by short text\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_ShortText_0_0_0\\\":\\\"Go_org1\\\"\"\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Get organization\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.organization).to.not.eql(null);\r",
											"    pm.expect(json.data.organization).to.be.an(\"object\");\r",
											"    pm.expect(json.data.organization.id).to.be.a(\"string\");\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://localhost:5001/connect/token",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "store",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
										"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get all organizations\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
										"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"after\": \"0\",\r\n    \"first\": 20,\r\n    \"sort\": \"name:desc\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteOrganization",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/organizations?ids={{organizationId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"organizations"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{organizationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check organization sfter delete\", function () {\r",
											"    var data = pm.response.json();\r",
											" pm.expect(data.data.organization).to.be.null\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://localhost:5001/connect/token",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "store",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
										"variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Cart",
					"item": [
						{
							"name": "getCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set cartId2, randomUser2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
											"    pm.collectionVariables.set(\"userId\", jsonData.data.cart.customerId);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "clearCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"clearCart\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
											"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check items\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }   \r\n    ]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "cartAfterAddItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/\r",
											"pm.test(\"Set lineitemId\", function(){\r",
											" var jasonData =pm.response.json();  \r",
											"pm.collectionVariables.set(\"lineItemId\", jasonData.data.cart.items[0].id);\r",
											"pm.collectionVariables.set(\"cartId\", jasonData.data.cart.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeCartItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check after remove lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.removeCartItem).to.be.an(\"object\");\r",
											"    pm.expect(data.data.removeCartItem.items).to.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
										"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check additem\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.addItem).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.addItem.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.addItem.items[0]).to.be.an(\"object\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Set lineitemId\", function(){\r",
											" var jasonData =pm.response.json();  \r",
											" pm.collectionVariables.set(\"lineItemId\", jasonData.data.addItem.items[0].id);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userName}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{productId}}\",\n    \"quantity\": 5,\n    \"price\": 100.00,\n    \"comment\": \"{{comment}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeCartItemQuantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check after change qty\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.changeCartItemQuantity).to.be.an(\"object\");\r",
											"    pm.expect(data.data.changeCartItemQuantity.id).to.be.a(\"string\");\r",
											"    pm.expect(data.data.changeCartItemQuantity.items).to.not.empty\r",
											"    pm.expect(data.data.changeCartItemQuantity.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
										"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"quantity\": 2\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeCartItemPrice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check after change price\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.changeCartItemPrice).to.be.an(\"object\");\r",
											"    pm.expect(data.data.changeCartItemPrice.id).to.be.a(\"string\");\r",
											"    pm.expect(data.data.changeCartItemPrice.items).to.not.empty\r",
											"    pm.expect(data.data.changeCartItemPrice.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
											"     pm.expect(data.data.changeCartItemPrice.items[0].listPrice.amount).to.exist\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
										"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"price\": 6400\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Add comment\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.changeComment.comment).to.be.a(\"string\");     \r",
											"pm.expect(jsonData.data.changeComment.id).to.be.a(\"string\");    \r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"Text\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeCartItemComment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check after change lineitems comment\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.changeCartItemComment).to.be.an(\"object\");\r",
											"    pm.expect(data.data.changeCartItemComment.id).to.be.a(\"string\");\r",
											"    pm.expect(data.data.changeCartItemComment.items).to.not.empty\r",
											"    pm.expect(data.data.changeCartItemComment.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
											"     pm.expect(data.data.changeCartItemComment.items[0].note).equal(pm.collectionVariables.get(\"lineItemsComment\"))\r",
											"    \r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
										"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterAddItem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set cartId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic property to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicproperty to cart\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartDynamicProperties.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[3].value).to.be.an(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": \"false\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for lineitems in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicproperties for lineitems\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0].value).to.be.a(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": \"false\"\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\": \"45.0\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"7\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterAddDynamicPropertiesLineItems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addOrUpdateCartPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"AddOrUpdatePayment\", function(){\r",
											"    var jSonData = pm.response.json();\r",
											"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
											"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
											"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
											"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for payments in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicPropertiesPayment\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0].dynamicProperties).to.be.not.empty;\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\": \"false\"\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterAddPaymentDynamicProperties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addOrUpdateCartShipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"AddOrUpdateShipment\", function(){\r",
											"    var jSonData = pm.response.json();\r",
											"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
											"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
											"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for shipments in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add CartShipmentDynamicProperties\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0].id).to.be.a(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterAddShipmentDynamicproperties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Set total1\", function(){\r",
											"    var json = pm.response.json();\r",
											"pm.collectionVariables.set(\"total1\", json.data.cart.total.amount);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "validateCoupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check validateCoupon\", function(){\r",
											"var jSon = pm.response.json();\r",
											"pm.expect(jSon.data.validateCoupon).to.be.a(\"boolean\");\r",
											"pm.expect(data.error).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation validateCoupon ($command: InputValidateCouponType!) {\n    validateCoupon (command: $command)\n    \n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": null,\n    \"coupon\": \"TestxApi\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addCoupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check AddCoupon\", function(){\r",
											"var jSon = pm.response.json();\r",
											"pm.expect(jSon.data.addCoupon).to.not.empty;\r",
											"pm.expect(jSon.data.addCoupon.coupons[0]).to.be.an(\"object\");\r",
											"pm.expect(jSon.data.addCoupon.coupons[0].code).to.be.a(\"string\");\r",
											"pm.expect(jSon.data.addCoupon.coupons[0].isAppliedSuccessfully).to.be.equal(true);\r",
											"pm.expect(data.error).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"TestxApi\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "cartAfterAddCoupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check totals\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.cart.items.total).to.be.not.equal(\"total1\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\ndiscounts{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeCoupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check removeCoupon\", function(){\r",
											"var json = pm.response.json();\r",
											"pm.expect(json.data.removeCoupon).not.empty;\r",
											"pm.expect(json.data.removeCoupon.discountTotal.amount).to.be.equal(0.0);\r",
											"pm.expect(data.error).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"TestxApi\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "cartAfterRemoveCoupon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check totals\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"var total1 = pm.collectionVariables.get(\"total1\");\r",
											"pm.expect(jsonData.data.cart.total.amount).to.be.equal(total1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addOrUpdateCartAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
											"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeCartAddress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"removeCartAddress\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.removeCartAddress).to.be.not.empty;\r",
											"    pm.expect(json.data.removeCartAddress.id).to.be.not.empty;\r",
											"    pm.expect(json.data.removeCartAddress.addresses[0].id).to.be.a(\"string\");\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "clearShipments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"clearShipments\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.clearShipments).to.be.not.empty;\r",
											"    pm.expect(json.data.clearShipments.shipments).to.be.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeShipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"removeShipment\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.removeShipment).to.be.not.empty;\r",
											"    pm.expect(json.data.removeShipment.shipments).to.be.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterClearShipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check items in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.items).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check dynamic properties for payments\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"\r",
											"});\r",
											"pm.test(\"Check shipment after remove\", function () {\r",
											"    var data = pm.response.json();\r",
											"     pm.expect(data.data.cart.shipments).to.be.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "clearPayments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"clearPayments\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.clearPayments).to.be.not.empty;\r",
											"    pm.expect(json.data.clearPayments.payments).to.be.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "clearCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"clearCart\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
											"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterClearCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Check dynamicProperties in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"RemoveCart\", function(){\r",
											"    var jSonData = pm.response.json();\r",
											"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
											"    pm.expect(data.error).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "afterremoveCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart after remove\", function(){\r",
											"var jSonData = pm.response.json();\r",
											"pm.expect(jSonData.data.cart.id).not.to.be.equal(pm.collectionVariables.get(\"cartId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Partial update",
					"item": [
						{
							"name": "Get cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set randomCart, randomCustomer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"randomCart\", jsonData.data.cart.id);\r",
											"    pm.collectionVariables.set(\"randomCustomer\", jsonData.data.cart.customerId);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add address to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses).to.not.empty;\r",
											"    pm.expect(jsonData.data.addOrUpdateCartAddress).to.be.an(\"object\");\r",
											"    pm.collectionVariables.set(\"cartAddressId\", jsonData.data.addOrUpdateCartAddress.addresses[0].id);\r",
											"       \r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\r\n  addOrUpdateCartAddress(command: $command) {\r\n    id\r\n    addresses {\r\n      addressType\r\n      city\r\n      countryCode\r\n      countryName\r\n      email\r\n      firstName\r\n      id\r\n      key\r\n      lastName\r\n      line1\r\n      line2\r\n      middleName\r\n      name\r\n      organization\r\n      phone\r\n      postalCode\r\n      regionId\r\n      regionName\r\n      zip\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{randomCart}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{default}}\",\r\n    \"userId\": \"{{randomCustomer}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\":\"{{cultureName}}\",\r\n    \"cartType\": \"null\",\r\n        \"address\": {\r\n      \"id\": \"{{$randomUUID}}\",\r\n      \"key\": \"{{$randomUUID}}\",\r\n      \"city\": \"City 22\",\r\n      \"countryCode\": \"RU\",\r\n      \"countryName\": \"Russia\",\r\n      \"email\": \"test123@email.com\",\r\n      \"firstName\": \"First test name\",\r\n      \"lastName\": \"Last name test\",\r\n      \"line1\": \"Address Line 1\",\r\n      \"line2\": \"Address line 2\",\r\n      \"middleName\": \"Test Middle Name\",\r\n      \"name\": \"First name address\",\r\n      \"organization\": \"OrganizationTestName\",\r\n      \"phone\": \"88005553535\",\r\n      \"postalCode\": \"111111\",\r\n      \"regionId\": \"Test region\",\r\n      \"regionName\": \"Region 15\",\r\n      \"zip\": \"13413\",\r\n      \"addressType\": 1\r\n    }\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add payment to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check add paymnet address\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments).to.not.empty;\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment).to.be.an(\"object\");\r",
											"    pm.collectionVariables.set(\"billingAddressId\", jsonData.data.addOrUpdateCartPayment.payments[0].id);\r",
											"    pm.collectionVariables.set(\"billingKey\", jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.key);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\r\n  addOrUpdateCartPayment(command: $command) {\r\n    id\r\n    payments {\r\n      id\r\n      outerId\r\n      paymentGatewayCode\r\n      price {\r\n        amount\r\n      }\r\n      amount {\r\n        amount\r\n      }\r\n      billingAddress {\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        middleName\r\n        name\r\n        organization\r\n        phone\r\n        postalCode\r\n        regionId\r\n        regionName\r\n        zip\r\n      }\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n\"command\": {\r\n\"cartId\": \"{{randomCart}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{randomCustomer}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": \"null\",\r\n\"payment\": {\r\n\"id\": \"{{$randomUUID}}\",\r\n\"outerId\": \"paymentouterud_default_test_1\",\r\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\r\n\"billingAddress\": {\r\n\"id\": \"{{$randomUUID}}\",\r\n\"key\": \"{{$randomUUID}}\",\r\n\"city\": \"City 17\",\r\n\"countryCode\": \"RU\",\r\n\"countryName\": \"Russia\",\r\n\"email\": \"addressCart email test\",\r\n\"firstName\": \"First test name\",\r\n\"lastName\": \"Last name test\",\r\n\"line1\": \"Address Line 1\",\r\n\"line2\": \"Address line 2\",\r\n\"middleName\": \"Test Middle Name\",\r\n\"name\": \"First name address\",\r\n\"organization\": \"OrganizationTestName\",\r\n\"phone\": \"88005553535\",\r\n\"postalCode\": \"111111\",\r\n\"regionId\": \"Test region\",\r\n\"regionName\": \"Region 15\",\r\n\"zip\": \"13413\",\r\n\"addressType\": 1\r\n},\r\n\"currency\": \"USD\",\r\n\"price\": 1050,\r\n\"amount\": 1050\r\n}\r\n}\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add shipment to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check add shipment to cart\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments).to.not.empty;\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment).to.be.an(\"object\");\r",
											"    pm.collectionVariables.set(\"shipmentAddressId\", jsonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
											"    pm.collectionVariables.set(\"shipmentKey\", jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.key);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartShipment($command: InputAddOrUpdateCartShipmentType!) {\r\n  addOrUpdateCartShipment(command: $command) {\r\n    shipments {\r\n      id\r\n      shipmentMethodCode\r\n      shipmentMethodOption\r\n      fulfillmentCenterId\r\n      price{\r\n        amount\r\n      }\r\n      deliveryAddress {\r\n        id\r\n        key\r\n        city\r\n        countryCode\r\n        countryName\r\n        email\r\n        firstName\r\n        lastName\r\n        line1\r\n        line2\r\n        middleName\r\n        name\r\n        organization\r\n        phone\r\n        postalCode\r\n        regionId\r\n        regionName\r\n        zip\r\n      }\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{randomCart}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomCustomer}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\":\"{{cultureName}}\",\r\n    \"cartType\": \"null\",\r\n    \"shipment\": {\r\n      \"id\": \"{{$randomUUID}}\",\r\n      \"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\r\n      \"height\": 123,\r\n      \"length\": 432,\r\n      \"measureUnit\": \"mm\",\r\n      \"shipmentMethodCode\": \"FixedRate\",\r\n      \"shipmentMethodOption\": \"Ground\",\r\n      \"volumetricWeight\": 151,\r\n      \"weight\": 15643,\r\n      \"weightUnit\": \"116\",\r\n      \"width\": 114,\r\n      \"deliveryAddress\": {\r\n        \"id\":\"{{$randomUUID}}\",\r\n        \"city\": \"City 17\",\r\n        \"countryCode\": \"RU\",\r\n        \"countryName\": \"Russia\",\r\n        \"email\": \"addressCart email test\",\r\n        \"firstName\": \"First test name\",\r\n        \"key\": \"{{$randomUUID}}\",\r\n        \"lastName\": \"Last name test\",\r\n        \"line1\": \"Address Line 1\",\r\n        \"line2\": \"Address line 2\",\r\n        \"middleName\": \"Test Middle Name\",\r\n        \"name\": \"First name address\",\r\n        \"organization\": \"OrganizationTestName\",\r\n        \"phone\": \"88005553535\",\r\n        \"postalCode\": \"111111\",\r\n        \"regionId\": \"Test region\",\r\n        \"regionName\": \"Region 15\",\r\n        \"zip\": \"13413\",\r\n        \"addressType\": 1\r\n      },\r\n      \"currency\": \"USD\",\r\n      \"price\": 10.00\r\n    }\r\n  }\r\n}\r\n\r\n"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check update address\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses).to.not.empty;\r",
											"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0]).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0].city).to.equal(\"Rostov\");\r",
											"     pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0].firstName).to.equal(\"Anna\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartAddress.addresses[0].lastName).to.equal(\"Ivanova\");\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\r\n  addOrUpdateCartAddress(command: $command) {\r\n    id\r\n    addresses {\r\n      id\r\n      key\r\n      addressType\r\n      city\r\n      countryCode\r\n      countryName\r\n      email\r\n      firstName\r\n      lastName\r\n      line1\r\n      line2\r\n      middleName\r\n      name\r\n      organization\r\n      phone\r\n      regionId\r\n      regionName\r\n      zip\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n\"cartId\": \"{{randomCart}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{randomCustomer}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": \"null\",\r\n\r\n   \"address\": {\r\n      \"addressType\": 1,\r\n      \"id\":\"{{cartAddressId}}\",\r\n      \"key\":\"{{cartAddressId}}\",\r\n      \"countryCode\": \"RU\",\r\n      \"countryName\": \"Russia\",\r\n       \"firstName\": \"Anna\",\r\n       \"lastName\": \"Ivanova\",\r\n       \"city\": \"Rostov\"\r\n\r\n}\r\n}\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update shipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check update shipment\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments).to.not.empty;\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.city).to.equal(\"Kirov\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.line1).to.equal(\"Lenina 15\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.firstName).to.equal(\"Anna\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartShipment.shipments[0].deliveryAddress.lastName).to.equal(\"Ivanova\");\r",
											"    });\r",
											"    \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!)\r\n{\r\n  addOrUpdateCartShipment(command: $command) {\r\nshipments {\r\nid\r\nshipmentMethodCode\r\nshipmentMethodOption\r\nfulfillmentCenterId\r\n  height\r\n  length\r\ndeliveryAddress {\r\nid\r\nkey\r\n            city\r\n            countryCode\r\n            countryName\r\n            email\r\n            firstName\r\n            lastName\r\n            line1\r\n            line2\r\n            name\r\n            organization\r\n            phone\r\n            regionId\r\n            regionName\r\n        }\r\n    }\r\n}\r\n}",
										"variables": "{\r\n\"command\": {\r\n\"cartId\": \"{{randomCart}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{randomCustomer}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": \"null\",\r\n\"shipment\": {\r\n      \"id\": \"{{shipmentAddressId}}\",\r\n      \"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\r\n      \"height\": 222,\r\n      \"length\": 555,\r\n           \"deliveryAddress\": {\r\n            \"id\": \"{{shipmentKey}}\",\r\n            \"key\":\"{{shipmentKey}}\",\r\n        \"firstName\": \"Anna\",\r\n       \"lastName\":\"Ivanova\",\r\n       \"countryCode\": \"RUS\",\r\n        \"countryName\": \"Russia\",\r\n          \"city\": \"Kirov\",\r\n           \"line1\": \"Lenina 15\"\r\n           },\r\n      \"currency\": \"USD\",\r\n      \"price\": 10.00\r\n    }\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check update payment\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments).to.not.empty;\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment).to.be.an(\"object\");\r",
											"\r",
											"\r",
											"    pm.test(\"Check update value for billing address\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.city).to.equal(\"Berlin\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.countryCode).to.equal(\"DE\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.countryName).to.equal(\"Germany\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.firstName).to.equal(\"Anna\");\r",
											"    pm.expect(jsonData.data.addOrUpdateCartPayment.payments[0].billingAddress.lastName).to.equal(\"Ivanova\");\r",
											"    \r",
											"    });\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\r\naddOrUpdateCartPayment(command: $command) {\r\nid\r\npayments{\r\nid\r\nbillingAddress {\r\nid\r\nkey\r\ncity\r\ncountryCode\r\ncountryName\r\nemail\r\n  firstName\r\n  lastName\r\nline1\r\nline2\r\nmiddleName\r\nname\r\norganization\r\nphone\r\nregionId\r\nregionName\r\nzip\r\n}\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"command\": {\r\n\"cartId\": \"{{randomCart}}\",\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{randomCustomer}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\":\"{{cultureName}}\",\r\n\"cartType\": null,\r\n  \"payment\": {\r\n    \"id\": \"{{billingAddressId}}\",\r\n\"billingAddress\": {\r\n\"id\": \"{{billingKey}}\",\r\n\"key\":\"{{billingKey}}\",\r\n  \"firstName\": \"Anna\",\r\n  \"lastName\":\"Ivanova\",\r\n\"city\": \"Berlin\",\r\n\"countryCode\": \"DE\",\r\n\"countryName\": \"Germany\"\r\n}\r\n}\r\n}\r\n}\r\n\r\n"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check updated value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check update value for address\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.cart.addresses).to.not.empty;\r",
											"    pm.expect(jsonData.data.cart.addresses[0]).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data.cart.addresses[0].city).to.equal(\"Rostov\");\r",
											"    pm.expect(jsonData.data.cart.addresses[0].firstName).to.equal(\"Anna\");\r",
											"    pm.expect(jsonData.data.cart.addresses[0].lastName).to.equal(\"Ivanova\");\r",
											"     \r",
											"});\r",
											"\r",
											"pm.test(\"Check update value for shipment\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.cart.shipments).to.not.empty;\r",
											"    pm.expect(jsonData.data.cart.shipments[0]).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.data.cart.shipments[0].deliveryAddress.city).to.equal(\"Kirov\");\r",
											"    pm.expect(jsonData.data.cart.shipments[0].deliveryAddress.line1).to.equal(\"Lenina 15\");\r",
											"    pm.expect(jsonData.data.cart.shipments[0].deliveryAddress.firstName).to.equal(\"Anna\");\r",
											"    pm.expect(jsonData.data.cart.shipments[0].deliveryAddress.lastName).to.equal(\"Ivanova\");\r",
											"    });\r",
											"\r",
											"\r",
											"     pm.test(\"Check update value for billing address\", function () {\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.data.cart.payments[0].billingAddress.city).to.equal(\"Berlin\");\r",
											"    pm.expect(jsonData.data.cart.payments[0].billingAddress.countryCode).to.equal(\"DE\");\r",
											"    pm.expect(jsonData.data.cart.payments[0].billingAddress.countryName).to.equal(\"Germany\");\r",
											"    pm.expect(jsonData.data.cart.payments[0].billingAddress.firstName).to.equal(\"Anna\");\r",
											"    pm.expect(jsonData.data.cart.payments[0].billingAddress.lastName).to.equal(\"Ivanova\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{randomCustomer}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"\"\r\n)\r\n{\r\nid\r\naddresses{\r\n  addressType\r\n  id\r\n  key\r\n            city\r\n            countryCode\r\n            countryName\r\n            email\r\n            firstName\r\n            lastName\r\n            line1\r\n            line2\r\n            name\r\n            organization\r\n            phone\r\n            zip\r\n            regionId\r\n            regionName\r\n            \r\n}\r\nitems\r\n{\r\n  productId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\n    id\r\n    name\r\n}\r\nitems\r\n{\r\nid\r\nname\r\n}\r\n  shipments {\r\nid\r\nshipmentMethodCode\r\nshipmentMethodOption\r\nfulfillmentCenterId\r\n    height\r\n    length\r\ndeliveryAddress {\r\nid\r\nkey\r\n            city\r\n            countryCode\r\n            countryName\r\n            email\r\n            firstName\r\n            lastName\r\n            line1\r\n            line2\r\n            name\r\n            organization\r\n            phone\r\n            regionId\r\n            regionName\r\n        }\r\n    }\r\npayments\r\n{\r\n    id\r\n  billingAddress\r\n {\r\n  id\r\n  key\r\n    city\r\n    firstName\r\n    lastName\r\n    line1\r\n    line2\r\n    countryName\r\n    phone\r\n    regionId\r\n    regionName\r\n    zip\r\n    countryCode\r\n  }\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Merge carts",
					"item": [
						{
							"name": "getCart1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set cartId1, randomUser1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
											"    pm.collectionVariables.set(\"randomUser1\", jsonData.data.cart.customerId);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCart2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set cartId2, randomUser2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"cartId2\", jsonData.data.cart.id);\r",
											"    pm.collectionVariables.set(\"randomUser2\", jsonData.data.cart.customerId);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addItemsToCart1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check items\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "addItemsTorCart2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check items\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"cbd8eab4f76b4e34b779d9c59dbc13fe\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"6e7a31c35c814fb389dc2574aa142b63\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "mergeCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Count number of items\", function () {\r",
											"    var data = pm.response.json().data.mergeCart.items;\r",
											"    pm.expect(data.length).to.equal(4);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{randomUser1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{cartId2}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "cartAfterMerge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Count number of items\", function () {\r",
											"    var data = pm.response.json().data.cart.items;\r",
											"    pm.expect(data.length).to.equal(4);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{randomUser1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "CreateOrderFromCart",
					"item": [
						{
							"name": "Create product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set ProductId\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"ProductId\", jsonData.id);\r",
											"pm.collectionVariables.set(\"Nameofproduct\", jsonData.name);\r",
											"pm.collectionVariables.set(\"Code\", jsonData.code);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"Product1\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"isActive\": true,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add price to the product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productId\": \"{{ProductId}}\",\r\n  \"product\": {\r\n    \"code\": \"{{Code}}\",\r\n    \"name\": \"Product1\",\r\n    \"catalogId\": \"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n    \"categoryId\": \"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n    \"outline\": \"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n    \"path\": \"Cell phones\",\r\n    \"isBuyable\": true,\r\n    \"isActive\": true,\r\n    \"trackInventory\": true,\r\n    \"maxQuantity\": 0,\r\n    \"minQuantity\": 0,\r\n    \"productType\": \"Physical\",\r\n    \"startDate\": \"2021-10-13T11:15:17.8103888Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [],\r\n    \"images\": [],\r\n    \"assets\": [],\r\n    \"links\": [],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [\r\n      {\r\n        \"semanticUrl\": \"product1\",\r\n        \"objectId\": \"a9c8297d-ce0d-4ec6-99de-270105e80a98\",\r\n        \"objectType\": \"CatalogProduct\",\r\n        \"isActive\": true,\r\n        \"languageCode\": \"en-US\",\r\n        \"id\": \"3e03dc62-18c2-42e6-a220-cc95e042cf76\"\r\n      }\r\n    ],\r\n    \"reviews\": [],\r\n    \"associations\": [],\r\n    \"referencedAssociations\": [],\r\n    \"outlines\": [\r\n      {\r\n        \"items\": [\r\n          {\r\n            \"id\": \"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"seoObjectType\": \"Catalog\",\r\n            \"name\": \"Electronics\",\r\n            \"hasVirtualParent\": false\r\n          },\r\n          {\r\n            \"id\": \"Cell-phones\",\r\n            \"seoObjectType\": \"Category\",\r\n            \"seoInfos\": [\r\n              {\r\n                \"semanticUrl\": \"cell-phones\",\r\n                \"objectId\": \"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                \"objectType\": \"Category\",\r\n                \"isActive\": true,\r\n                \"languageCode\": \"en-US\",\r\n                \"id\": \"73642cc7f2e44d92af13e94c79c73456\"\r\n              }\r\n            ],\r\n            \"name\": \"Cell phones\",\r\n            \"hasVirtualParent\": false\r\n          },\r\n          {\r\n            \"id\": \"DDR-234304560\",\r\n            \"seoObjectType\": \"CatalogProduct\",\r\n            \"seoInfos\": [\r\n              {\r\n                \"semanticUrl\": \"product1\",\r\n                \"objectId\": \"a9c8297d-ce0d-4ec6-99de-270105e80a98\",\r\n                \"objectType\": \"CatalogProduct\",\r\n                \"isActive\": true,\r\n                \"languageCode\": \"en-US\",\r\n                \"id\": \"3e03dc62-18c2-42e6-a220-cc95e042cf76\"\r\n              }\r\n            ],\r\n            \"name\": \"Product1\",\r\n            \"hasVirtualParent\": false\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"2021-10-13T11:15:17.8142229Z\",\r\n    \"modifiedDate\": \"2021-10-13T11:15:17.8142229Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"a9c8297d-ce0d-4ec6-99de-270105e80a98\",\r\n    \"_priority\": 0\r\n  },\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId}}\",\r\n      \"list\": 999,\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"934da94516a74f9ab4ec001343ac928a\",\r\n      \"name\": \"ElectronicsUSD\",\r\n      \"catalog\": \"Electronics virtual, Electronics\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/products/{{ProductId}}/prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"products",
										"{{ProductId}}",
										"prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add stock qty to the product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add stock qty to the product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/inventory/products/{{ProductId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"inventory",
										"products",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product prices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get product prices\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].list).to.eql(999);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/products/{{ProductId}}/prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"products",
										"{{ProductId}}",
										"prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "getCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set orderCart, randomUser3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"orderCart\", jsonData.data.cart.id);\r",
											"    pm.collectionVariables.set(\"randomUser3\", jsonData.data.cart.customerId);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "add items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check items\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser3}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{orderCart}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId}}\",\r\n        \"quantity\": 3\r\n    }\r\n    ]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check product price in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check product price in cart\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart.items).to.not.empty;\r",
											"    pm.expect(data.data.cart.items[0].product.id).equal(pm.collectionVariables.get(\"ProductId\"));\r",
											"    pm.expect(data.data.cart.items[0].product.price.list.amount).to.be.equal(999);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{randomUser3}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n  {\r\n    items{\r\n      product{\r\n      id\r\n      name\r\n      price{\r\n        list{\r\n          amount\r\n        }\r\n      }\r\n      }\r\n    }\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "createOrderFromCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CreateOrderFromCart\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.collectionVariables.set(\"orderid1\", json.data.createOrderFromCart.id);\r",
											"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
											"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\ncreateOrderFromCart (command: $command) {\nid\nitems{\nid\nname\nquantity\nfulfillmentCenterId\nfulfillmentCenterName\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\ntaxTotal{\namount\n}\ntotal{\namount\n}\n}\n}",
										"variables": "{\n\"command\": {\n    \"cartId\": \"{{orderCart}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "checkOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"checkOrder\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.order).to.not.eql(null);\r",
											"    pm.expect(data.data.order).to.be.an(\"object\");\r",
											"    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
											"    pm.expect(data.data.order.items[1].price.amount).to.equal(1500);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    items {\r\n      id\r\n      name\r\n        price{\r\n        amount\r\n              }\r\n      dynamicProperties {\r\n        dictionaryItem {\r\n          id\r\n          name\r\n          label\r\n        }\r\n        dynamicProperty {\r\n          valueType\r\n          id\r\n          label\r\n          name\r\n        }\r\n      }\r\n    }\r\n    shipments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n    inPayments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"id\": \"{{orderid1}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "clearCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"clearCart\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.clearCart).to.be.not.empty;\r",
											"    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation clearCart ($command: InputClearCartType!) {\r\nclearCart (command: $command) {\r\nid\r\ntotal{\r\namount\r\n}\r\n}\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{orderCart}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser3}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"{{cartType}}\"\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "removeCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"RemoveCart\", function(){\r",
											"    var jSonData = pm.response.json();\r",
											"    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
											"    pm.expect(data.error).to.be.undefined;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
										"variables": "{\n  \"command\": {\n    \"cartId\": \"{{orderCart}}\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products?ids={{ProductId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ProductId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products/{{ProductId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Breadcrumbs",
					"item": [
						{
							"name": "Product does not contains category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product does not contains category\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n} ",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product contain one category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product does not contains category\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") \r\n { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product contains several nested categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product does not contains category\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Variation. Product does not contains category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product does not contains category\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Variation. Product contain one category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product does not contains category\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Variation. Parent product contains several nested categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Product does not contains category\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Create product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set ProductId\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"ProductId\", jsonData.id);\r",
											"pm.collectionVariables.set(\"Nameofproduct\", jsonData.name);\r",
											"pm.collectionVariables.set(\"Code\", jsonData.code);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"NewProduct3\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"isActive\": true,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add to product few description (en-US, de-DE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check review\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect (jsonData.reviews[0]).to.be.not.empty;\r",
											"pm.expect (jsonData.reviews[0].content).to.be.a(\"String\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{Code}}\",\r\n    \"name\": \"{{Nameofproduct}}\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"f440c64e-68f8-40fe-9df6-f09ab8fc2c12\",\r\n    \"outline\": \"bb811c7d-5e43-48f0-b85c-373d39ab87c5\",\r\n    \"path\": \"First\",\r\n    \"isActive\": true,\r\n    \"productType\": \"Physical\",\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property\",\r\n            \"required\": false,\r\n            \"dictionary\": true,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a81ee40f-800b-43e4-98dd-d7199cf904be\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"9a42e81b-eb2b-4885-8d20-4501b444148f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"LongText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"d46f175e-bbbb-4ed8-b5d2-57fa7953fafa\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property2\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Category\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"407243f0-c126-4441-b352-931e4445c490\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"DateTime\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a33e4fb0-495a-4f2f-b2b2-59d54ce138a8\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property5\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": true,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"e77e4b74-8700-486e-85f7-a9018a775028\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"reviews\": [\r\n                {\r\n            \"languageCode\": \"en-US\",\r\n            \"reviewType\": \"QuickReview\",\r\n            \"content\": \"Absolutly new content\"\r\n        },\r\n        {\r\n            \"languageCode\": \"de-DE\",\r\n            \"reviewType\": \"QuickReview\",\r\n            \"content\": \"Test\"\r\n        }\r\n    ],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"2021-10-11T16:35:25.9728931Z\",\r\n    \"modifiedDate\": \"2021-10-12T07:27:19.2991469Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{ProductId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add to product few seo (en-US, de-DE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check SEO\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect (jsonData.seoInfos[0]).to.be.not.empty;\r",
											"pm.expect (jsonData.seoInfos[0].semanticUrl).to.be.a(\"String\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{Code}}\",\r\n    \"name\": \"{{Nameofproduct}}\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"outline\": \"bb811c7d-5e43-48f0-b85c-373d39ab87c5\",\r\n    \"path\": \"First\",\r\n    \"isActive\": true,\r\n    \"productType\": \"Physical\",\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property\",\r\n            \"required\": false,\r\n            \"dictionary\": true,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a81ee40f-800b-43e4-98dd-d7199cf904be\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"9a42e81b-eb2b-4885-8d20-4501b444148f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"LongText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"d46f175e-bbbb-4ed8-b5d2-57fa7953fafa\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property2\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Category\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"407243f0-c126-4441-b352-931e4445c490\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"DateTime\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a33e4fb0-495a-4f2f-b2b2-59d54ce138a8\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property5\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": true,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"e77e4b74-8700-486e-85f7-a9018a775028\"\r\n        }\r\n    ],\r\n  \"seoObjectType\": \"CatalogProduct\",\r\n  \"seoInfos\": [\r\n    {\r\n      \"isActive\": true,\r\n      \"semanticUrl\": \"new-product3\",\r\n      \"storeId\": \"Electronics\",\r\n      \"languageCode\": \"en-US\",\r\n      \"pageTitle\": \"prod3\",\r\n      \"metaDescription\": \"newdescription\",\r\n      \"metaKeywords\": \"product3\",\r\n      \"imageAltDescription\": \"altimage\"\r\n    },\r\n    {\r\n      \"isActive\": true,\r\n      \"semanticUrl\": \"product_A\",\r\n      \"storeId\": \"Electronics\",\r\n      \"languageCode\": \"de-DE\",\r\n      \"pageTitle\": \"product_A\",\r\n      \"metaDescription\": \"Test new description A\",\r\n      \"metaKeywords\": \"product_A\",\r\n      \"imageAltDescription\": \"altimage\"  \r\n    }\r\n  ],\r\n  \"isInherited\": false,\r\n    \"createdDate\": \"2021-10-11T16:35:25.9728931Z\",\r\n    \"modifiedDate\": \"2021-10-11T16:35:25.9728931Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{ProductId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Index product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check Index\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect (jsonData.errorCount).to.be.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId}}\"\r\n        ]\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/search/indexes/index",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"search",
										"indexes",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product properties labels and descriptions (en-US)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check labels and descriptions (en-US)\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect (jsonData.data.product.description.languageCode).to.be.equal(\"en-US\");\r",
											"pm.expect (jsonData.data.product.properties[0].label).to.be.equal(\"Brand-en\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n  product(\r\n    id: \"{{ProductId}}\"\r\n    storeId: \"Electronics\"\r\n    cultureName: \"en-US\"\r\n    currencyCode: \"USD\")\r\n    {\r\n    id\r\n    code\r\n      description{\r\n        content\r\nreviewType\r\nlanguageCode\r\n}\r\n       properties\r\n    {\r\n      name\r\n      label\r\n      value\r\n      valueType\r\n      multivalue\r\n      id\r\n    }\r\n  }\r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product properties labels and descriptions (de-DE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check labels and descriptions (de-DE)\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect (jsonData.data.product.description.languageCode).to.be.equal(\"de-DE\");\r",
											"pm.expect (jsonData.data.product.properties[0].label).to.be.equal(\"de\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\n  product(\r\n    id: \"{{ProductId}}\"\r\n    storeId: \"Electronics\"\r\n    cultureName: \"de-DE\"\r\n    currencyCode: \"USD\")\r\n    {\r\n    id\r\n    code\r\n      description{\r\n        content\r\nreviewType\r\nlanguageCode\r\n}\r\n   properties\r\n    {\r\n      name\r\n      label\r\n      value\r\n      valueType\r\n      multivalue\r\n      id\r\n    }\r\n  }\r\n}\r\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}",
									"host": [
										"{{url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products?ids={{ProductId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ProductId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products/{{ProductId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products",
										"{{ProductId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "createUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CreateUser\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.createUser).to.not.empty;\r",
											"    pm.expect(jsonData.data.createUser.succeeded).to.be.equal(true);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
										"variables": "{\n\"command\": {\n\"createdBy\": \"eXp1\",\n\"email\": \"{{email}}\",\n\"password\":\"{{password}}\",\n\"userName\": \"{{userName1}}\",\n\"userType\": \"Customer\"\n}\n}\n\n"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"get user\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.user).to.not.eql(null);\r",
											"    pm.expect(json.data.user).to.be.an(\"object\");\r",
											"    pm.expect(json.data.user.id).to.be.a(\"string\");\r",
											"    pm.expect(json.data.user.email).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"    pm.collectionVariables.set(\"userIdblock\", json.data.user.id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query user(\n  $id: String\n  $userName: String\n  $email: String\n  $loginProvider: String\n  $providerKey: String\n) {\n  user(\n    id: $id\n    userName: $userName\n    email: $email\n    loginProvider: $loginProvider\n    providerKey: $providerKey\n  ) {\n    id\n    isAdministrator\n        userName\n    email\n    storeId\n    userName\n    userType\n    roles{\n      id\n      name\n      description\n      permissions\n    }\n  }\n}",
										"variables": "{\n//\"id\": \"9d30a8a0-9ecf-4dc7-b273-51f6739bec87\",\n\"userName\": \"{{userName1}}\",\n//\"email\": \"eXp100@mail.com\",\n\"loginProvider\":\"\",\n\"providerKey\": \"\"\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"updateUser\", function(){\r",
											"\r",
											"        var jsonData = pm.response.json();\r",
											"        pm.expect(jsonData.data.updateUser).to.be.empty;\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateUser ($command: InputUpdateUserType!) {\n    updateUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
										"variables": "\n{\n\"command\":{\n\"userType\": \"Customer\",\n\"roles\": [],\n\"id\": \"{{userIdblock}}\",\n\"userName\": \"eXp1001@mail.com\",\n\"email\": \"_loGIN0101@gmail.com\",\n\"securityStamp\": \"RandomData\",\n\"storeId\":\"{{storeId}}\"\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"deleteUsers\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
											"    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
										"variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName1}}\"\n]\n}\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "get all orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Orders\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.orders.items).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"orderId\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.collectionVariables.set(\"orderId\",jsonData.data.orders.items[0].id);\r",
											"    pm.collectionVariables.set(\"orderShipmentId\",jsonData.data.orders.items[0].shipments[0].id);\r",
											"    pm.collectionVariables.set(\"orderPaymentId\",jsonData.data.orders.items[0].inPayments[0].id);\r",
											"    pm.collectionVariables.set(\"orderLineItemId\",jsonData.data.orders.items[0].items[0].id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nitems{\r\n    id\r\n}\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\ninPayments{\r\n    id\r\n}\r\n\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dynamic properties for order\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.updateOrderDynamicProperties.dynamicProperties).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateOrderDynamicProperties($command: InputUpdateOrderDynamicPropertiesType!) {   updateOrderDynamicProperties(command: $command) {     \r\nid     \r\nnumber     \r\ndynamicProperties { \r\nname \r\nvalue \r\nvalueType\r\ndynamicProperty {\r\nname\r\nlabel\r\nvalueType\r\n }\r\ndictionaryItem {\r\nlabel \r\nname\r\nid\r\n}}   } }",
										"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}    ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for shipment in order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dynamic properties for shipment order\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.updateOrderShipmentDynamicProperties.shipments[0].dynamicProperties).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateOrderShipmentDynamicProperties($command: InputUpdateOrderShipmentDynamicPropertiesType!) {\r\n\r\n    updateOrderShipmentDynamicProperties(command: $command) {\r\n\r\n        number\r\n\r\n        shipments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"shipmentId\": \"{{orderShipmentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for payments in order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dynamic properties for payment order\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.updateOrderPaymentDynamicProperties.inPayments[0].dynamicProperties).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateOrderPaymentDynamicProperties($command: InputUpdateOrderPaymentDynamicPropertiesType!) {\r\n\r\n    updateOrderPaymentDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        number\r\n\r\n        inPayments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dynamicProperty {\r\n\r\n                    name \r\n\r\n                    label \r\n\r\n                    valueType\r\n\r\n                } \r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"paymentId\":\"{{orderPaymentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for order lineitem",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Dynamic properties for lineitem order\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.expect(json.data.updateOrderItemDynamicProperties.items[0].dynamicProperties).to.be.not.empty;\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateOrderItemDynamicProperties($command: InputUpdateOrderItemDynamicPropertiesType!) {\r\n\r\n    updateOrderItemDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        items {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"lineItemId\":\"{{orderLineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}  ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get order by id\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.order).to.not.eql(null);\r",
											"    pm.expect(data.data.order).to.be.an(\"object\");\r",
											"    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    number\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
										"variables": "{\n  \"id\": \"{{orderId}}\",\n  \"cultureName\": \"en-US\"\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Index Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"documentType\":\"CustomerOrder\",\"documentIds\":[\"{{orderId}}\"]}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/search/indexes/index",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"search",
										"indexes",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by short text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search order by shorttext\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders).to.not.eql(null);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_shorttext_0_0_0\\\":\\\"test short text value\\\"\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by html",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search order by html\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders).to.not.eql(null);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"ordersmodule_customerorder_html_0_0_0:<a>link</a>\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search order by decimal\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders).to.not.eql(null);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"ordersmodule_customerorder_decimal_0_0_0:3.65000\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search order by decimal\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders).to.not.eql(null);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_image_0_0_0\\\":\\\"link to image\\\"\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Your test name\", function () {\r",
											"    var data = pm.response.json();\r",
											"\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"datecreation:2021/07/24\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by long text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search order by long text\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders).to.not.eql(null);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_longtext_0_0_0\\\":\\\"Test updated value text\\\"\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by integer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search order by integer\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders).to.not.eql(null);\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"ordersmodule_customerorder_integer_1_0_0:6\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders by bool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search orders by bool\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
										"variables": "{\n\"filter\": \"ordersmodule_customerorder_boolean_0_0_0:true\",\n\"cultureName\": \"en-US\"\n} "
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "changeOrderStatus",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation changeOrderStatus ($command: InputChangeOrderStatusType!) {\n    changeOrderStatus (command: $command)\n}",
										"variables": "{\n  \"command\": {\n    \"orderId\": \"{{orderId}}\",\n    \"status\": \"Paid\"\n  }\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "changePaymentStatus from New > Paid",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation processOrderPayment($command: InputProcessOrderPaymentType!) {\r\n  processOrderPayment(command: $command) {\r\n   newPaymentStatus\r\n    isSuccess\r\n    errorMessage\r\n  }\r\n}",
										"variables": "{\r\n\"command\": {\r\n\"orderId\": {{orderId}},\r\n\"paymentId\": {{orderPaymentId}},\r\n   \"bankCardInfo\": {\r\n      \"bankCardNumber\": \"4242424242424242\",\r\n      \"bankCardType\": \"Visa\",\r\n      \"bankCardMonth\": 11,\r\n      \"bankCardYear\": 22,\r\n      \"bankCardCVV2\": \"111\",\r\n      \"cardholderName\": \"Name1 Name2\"\r\n    }\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "payments",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://localhost:5001/connect/token",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "store",
											"type": "string"
										},
										{
											"key": "tokenType",
											"value": "Bearer",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query payments ($after: String, $first: Int, $filter: String, $sort: String, $cultureName: String, $userId: String!) {\npayments (after: $after, first: $first, filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\ntotalCount\nitems\n{\nid\norderId\ncustomerId\nstatus\nsum{\namount\n}\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"filter\": \"{{filter}}\",\n  \"sort\": \"{{sort}}\",\n  \"cultureName\": \"{{cultureName}}\",\n  \"userId\": \"{{userId}}\"\n}\n\n"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "sort orders by total",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\norders(sort:\"total:asc\") {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Auth token",
					"item": [
						{
							"name": "Expired token > Run mutation with required token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"errors\", function () {\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://regression-platform.qa.govirto.com/connect/token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "Expired token",
											"type": "string"
										},
										{
											"key": "password",
											"value": "store",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createUser ($command: InputCreateUserType!) {\r\n    createUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n      \r\n    }\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"createdBy\": \"eXp1\",\r\n\"email\": \"22eXp1@mail.com\",\r\n\"password\":\"eXp1@mail.com\",\r\n\"userName\": \"eXp122@mail.com\",\r\n\"userType\": \"Customer\"\r\n}\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Expired token > Run query with required token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"errors\", function () {\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "client_authentication",
											"value": "header",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "https://regression-platform.qa.govirto.com/connect/token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "Expired token",
											"type": "string"
										},
										{
											"key": "password",
											"value": "store",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n} ",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove token > Run mutations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"errors\", function () {\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createUser ($command: InputCreateUserType!) {\r\ncreateUser (command: $command) {\r\nerrors {\r\ncode\r\ndescription\r\n}\r\nsucceeded\r\n\r\n}\r\n}",
										"variables": "{\r\n\"command\": {\r\n\"createdBy\": \"eXp1\",\r\n\"email\": \"22eXp1@mail.com\",\r\n\"password\":\"eXp1@mail.com\",\r\n\"userName\": \"eXp132@mail.com\",\r\n\"userType\": \"Customer\"\r\n}\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove token > Run query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"errors\", function () {\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n} ",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Correct token > Run mutation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Correct token > Run mutation\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.createUser.errors).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createUser ($command: InputCreateUserType!) {\r\ncreateUser (command: $command) {\r\nerrors {\r\ncode\r\ndescription\r\n}\r\nsucceeded\r\n\r\n}\r\n}",
										"variables": "{\r\n\"command\": {\r\n\"createdBy\": \"eXp1\",\r\n\"email\": \"22eXp1@mail.com\",\r\n\"password\":\"eXp1@mail.com\",\r\n\"userName\": \"eXp122@mail.com\",\r\n\"userType\": \"Customer\"\r\n}\r\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Correct token > Run query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Correct token > Run query\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AdminToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Transferring dynamic properties from Cart to Order",
					"item": [
						{
							"name": "getCart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set cartId2, randomUser2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.collectionVariables.set(\"cartId2\", jsonData.data.cart.id);\r",
											"    pm.collectionVariables.set(\"randomUser2\", jsonData.data.cart.customerId);\r",
											"});\r",
											"pm.test(\"Check cart by user ID\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart).to.not.eql(null);\r",
											"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
											"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available payment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
											"     pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"pm.test(\"Check available shipment method\", function () {\r",
											"    var data = pm.response.json();\r",
											"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
											" pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "add items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check items\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Set LineitemsId\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"cartLineItem1\",jsonData.data.addItemsCart.items[0].id);\r",
											"pm.collectionVariables.set(\"cartLineItem2\",jsonData.data.addItemsCart.items[1].id);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity,\r\n            id\r\n\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }   \r\n    ]\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "addOrUpdateCartPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"AddOrUpdatePayment\", function(){\r",
											"    var jSonData = pm.response.json();\r",
											"    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
											"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
											"    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
											"    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId2}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{randomUser2}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "addOrUpdateCartShipment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"AddOrUpdateShipment\", function(){\r",
											"    var jSonData = pm.response.json();\r",
											"    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
											"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
											"    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
											"    pm.expect(data.errors).to.be.undefined;\r",
											"    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
										"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId2}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{randomUser2}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic property to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicproperty to cart\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartDynamicProperties.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[3].value).to.be.an(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId2}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{randomUser2}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n      \"name\":\"Purchase order number\",\r\n      \"value\":\"new value_1_2\"\r\n  },\r\n  {\r\n    \"name\":\"Decimal\",\r\n    \"value\":\"33.88\"\r\n  }   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for lineitem_1 in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicproperties for lineitems\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0].value).to.be.a(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId2}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{randomUser2}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{cartLineItem1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"A_line_long\",\r\n\"value\": \"Long comment\"\r\n},\r\n{\"name\": \"Brand\",\r\n\"value\": \"Asus\"\r\n}  ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for lineitem_2 in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicproperties for lineitems\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0].value).to.be.a(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId2}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{randomUser2}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{cartLineItem2}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"A_line_long\",\r\n\"value\": \"Long comment\"\r\n},\r\n{\"name\": \"Brand\",\r\n\"value\": \"Asus\"\r\n}  ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for payments in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add dynamicPropertiesPayment\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0].dynamicProperties).to.be.not.empty;\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId2}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{randomUser2}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n  {\r\n\r\n\"name\": \"A_long_multilang\",\r\n\"value\": \"Looong text\",\r\n    \"cultureName\": \"de-DE\"\r\n},\r\n{\r\n\"name\": \"A_paymnet\",\r\n\"value\":\"5cf67d1c-9881-46bc-a33e-4eab3abaef4d\"\r\n  },\r\n       {\r\n\"name\": \"Boolean-true\",\r\n\"value\": \"true\"\r\n}\r\n\r\n ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add dynamic properties for shipments in cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add CartShipmentDynamicProperties\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties).to.not.eql(null);     \r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.id).to.be.a(\"string\");    \r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0]).to.be.an(\"object\");\r",
											"pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0].id).to.be.a(\"string\");\r",
											"pm.expect(data.errors).to.be.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
										"variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId2}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{randomUser2}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n      {\r\n\"name\": \"Purchase order number\",\r\n\"value\": \"Test22\"\r\n  },\r\n{\r\n\"name\": \"Shipment_decimal\",\r\n\"value\": \"2.6\"\r\n},\r\n  {\r\n\"name\": \"Shipment_decimal\",\r\n\"value\": \"4.55\"\r\n  },\r\n  {\r\n  \"name\": \"Shipment_Integer_multi\",\r\n\"value\": \"23\"\r\n  },\r\n  {\r\n      \"name\": \"Shipment_Integer_multi\",\r\n\"value\": \"66\"\r\n}\r\n   ]\r\n}\r\n}  "
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Order with dynamic properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"CreateOrderFromCart\", function () {\r",
											"    var json = pm.response.json();\r",
											"    pm.collectionVariables.set(\"cartOrderId_2\", json.data.createOrderFromCart.id);\r",
											"    pm.expect(json.data.createOrderFromCart.items[0]).to.be.not.empty;\r",
											"    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
											"    pm.expect(json.errors).to.be.undefined;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\r\ncreateOrderFromCart (command: $command) {\r\nid\r\nitems{\r\nid\r\nname\r\nquantity\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\n}\r\ntotal{\r\namount\r\n}\r\ndiscountTotal{\r\namount\r\n}\r\ntaxTotal{\r\namount\r\n}\r\ntotal{\r\namount\r\n}\r\n}\r\n}",
										"variables": "{\r\n\"command\": {\r\n    \"cartId\": \"{{cartId2}}\"\r\n  }\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check dynamic properties for Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    items {\r\n      id\r\n      name\r\n      dynamicProperties {\r\n        dictionaryItem {\r\n          id\r\n          name\r\n          label\r\n        }\r\n        dynamicProperty {\r\n          valueType\r\n          id\r\n          label\r\n          name\r\n        }\r\n      }\r\n    }\r\n    shipments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n    inPayments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"id\": \"{{cartOrderId_2}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check dynamic properties for Shipments in Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    items {\r\n      id\r\n      name\r\n      dynamicProperties {\r\n        dictionaryItem {\r\n          id\r\n          name\r\n          label\r\n        }\r\n        dynamicProperty {\r\n          valueType\r\n          id\r\n          label\r\n          name\r\n        }\r\n      }\r\n    }\r\n    shipments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n    inPayments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"id\": \"{{cartOrderId_2}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check dynamic properties for Payments in Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    items {\r\n      id\r\n      name\r\n      dynamicProperties {\r\n        dictionaryItem {\r\n          id\r\n          name\r\n          label\r\n        }\r\n        dynamicProperty {\r\n          valueType\r\n          id\r\n          label\r\n          name\r\n        }\r\n      }\r\n    }\r\n    shipments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n    inPayments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"id\": \"{{cartOrderId_2}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check dynamic properties for LineItems in Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    items {\r\n      id\r\n      name\r\n      dynamicProperties {\r\n        dictionaryItem {\r\n          id\r\n          name\r\n          label\r\n        }\r\n        dynamicProperty {\r\n          valueType\r\n          id\r\n          label\r\n          name\r\n        }\r\n      }\r\n    }\r\n    shipments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n    inPayments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n  }\r\n}\r\n",
										"variables": "{\r\n  \"id\": \"{{cartOrderId_2}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
									}
								},
								"url": {
									"raw": "{{urlQA}}",
									"host": [
										"{{urlQA}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "queries",
			"item": [
				{
					"name": "me",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query me  {\n    me {\n        accessFailedCount\n        contact {\n            addresses {\n                items{\n                addressType\n                city\n                countryCode\n                countryName\n                email\n                firstName\n                key\n                lastName\n                line1\n                line2\n                middleName\n                name\n                organization\n                phone\n                postalCode\n                regionId\n                regionName\n                zip\n            }}\n            birthDate\n            firstName\n            fullName\n            id\n            lastName\n            memberType\n            middleName\n            name\n            organizationId\n            organizations {items{\n                addresses {items{\n                    addressType\n                    city\n                    countryCode\n                    countryName\n                    email\n                    firstName\n                    key\n                    lastName\n                    line1\n                    line2\n                    middleName\n                    name\n                    organization\n                    phone\n                    postalCode\n                    regionId\n                    regionName\n                    zip\n                }}}\n                items\n                contacts  {\n                    edges {\n                        cursor\n                    }\n                    items {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    pageInfo {\n                        endCursor\n                        hasNextPage\n                        hasPreviousPage\n                        startCursor\n                    }\n                    totalCount\n                }\n                description\n                emails\n                groups\n                id\n                memberType\n                name\n                outerId\n                ownerId\n                parentId\n                phones\n                seoObjectType\n            }\n            organizationsIds\n            outerId\n            phones\n            securityAccounts {\n                accessFailedCount\n                contact {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizationsIds\n                    outerId\n                    phones\n                }\n                createdBy\n                createdDate\n                email\n                emailConfirmed\n                id\n                isAdministrator\n                lockoutEnabled\n                lockoutEnd\n                memberId\n                modifiedBy\n                modifiedDate\n                normalizedEmail\n                normalizedUserName\n                passwordExpired\n                permissions\n                phoneNumber\n                phoneNumberConfirmed\n                photoUrl\n                roles {\n                    description\n                    id\n                    name\n                    normalizedName\n                    permissions\n                }\n                securityStamp\n                storeId\n                twoFactorEnabled\n                userName\n                userType\n            }\n        }\n        createdBy\n        createdDate\n        email\n        emailConfirmed\n        id\n        isAdministrator\n        lockoutEnabled\n        lockoutEnd\n        memberId\n        modifiedBy\n        modifiedDate\n        normalizedEmail\n        normalizedUserName\n        passwordExpired\n        permissions\n        phoneNumber\n        phoneNumberConfirmed\n        photoUrl\n        roles {\n            description\n            id\n            name\n            normalizedName\n            permissions\n        }\n        securityStamp\n        storeId\n        twoFactorEnabled\n        userName\n        userType\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query role ($roleName: String!) {\n    role (roleName: $roleName) {\n        description\n        id\n        name\n        normalizedName\n        permissions\n    }\n}",
								"variables": "{\n  \"roleName\": \"Organization maintainer\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "mutations",
			"item": [
				{
					"name": "send notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($command: InputSendVerifyEmailType){\r\nsendVerifyEmail(command: $command)\r\n}",
								"variables": "{\r\n\"command\": {\r\n\"email\": \"{atz@virtoway.com}\"\r\n}\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"updateRole\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.updateRole.succeeded).to.be.eql(true);\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateRole ($command: InputUpdateRoleType!) {\n    updateRole (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
								"variables": "{\n\"command\":{\n    \"role\":\n    {\n\"id\": \"d1e0b7f9-32e4-4b2f-98c1-0406a4d48112\",\n\"description\":\"sdfdsfsdfsdf\",\n\"name\": \"CustomerUpdate_test111\",\n\"permissions\": [{\n\"name\": \"customer:update\",\n\"assignedScopes\": [{\n\"scope\": \"USERID\",\n\"type\": \"OnlyOrderResponsibleScope\"\n}]\n}]\n}\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "newUpdateRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"updateRole\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.updateRole.succeeded).to.be.eql(true);\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateRole ($command: InputUpdateRoleType!) {\n    updateRole (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
								"variables": "{\n\"command\":{\n    \"role\":{\n\"id\": \"d1e0b7f9-32e4-4b2f-98c1-0406a4d48112\",\n\"description\":\"sdfdsfsdfsdf\",\n\"name\": \"CustomerUpdate_test111\",\n\"permissions\": [{\n\"name\": \"customer:update\",\n\"assignedScopes\": [{\n\"scope\": \"USERID\",\n\"type\": \"OnlyOrderResponsibleScope\"\n}]\n}]\n}\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Properties",
			"item": [
				{
					"name": "get properties for category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"{{category_Id}}\", cultureName:\"de-DE\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties for specific category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for specific category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.properties.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", filter:\"categoryId:53e239451c844442a3b2fe9aa82d95c8\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    \r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one property with dictionary items for specific culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one property with dictionary items for specific culture\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.property.propertyDictItems.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperty (id:\"{{propertyId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\npropertyDictItems\r\n{\r\nitems\r\n{\r\nvalue\r\n}\r\n}\r\n}\r\n} \r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties with dictionary, cultureName, name and types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties with dictionary,cultureName, name and types\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.properties.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\", filter:\"keyword:Brand\", types:[PRODUCT, VARIATION])\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check meta information about dynamic property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
								"variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{AdminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Sort products",
					"item": [
						{
							"name": "Create product 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set ProductId\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"ProductId1\", jsonData.id);\r",
											"pm.collectionVariables.set(\"Nameofproduct1\", jsonData.name);\r",
											"pm.collectionVariables.set(\"Code1\", jsonData.code);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"000\",\r\n    \"name\": \"000\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"isActive\": true,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": -1,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"2001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Set ProductId\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"ProductId2\", jsonData.id);\r",
											"pm.collectionVariables.set(\"Nameofproduct2\", jsonData.name);\r",
											"pm.collectionVariables.set(\"Code2\", jsonData.code);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"ZZZZZZZZZZZZZZZZZZZZZZZZZZ\",\r\n    \"name\": \"zzzzzzzzzzzzzzzzzzzzzlast_product\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"isActive\": true,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 10,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"2021-11-11T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "add price to product1",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\":\"{{ProductId1}}\",\r\n   \"product\":{\r\n      \"code\":\"{{Code1}}\",\r\n      \"name\":\"{{Nameofproduct1}}\",\r\n      \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n      \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n      \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n      \"path\":\"Cell phones\",\r\n      \"isBuyable\":true,\r\n      \"isActive\":true,\r\n      \"trackInventory\":true,\r\n      \"maxQuantity\":0,\r\n      \"minQuantity\":0,\r\n      \"productType\":\"Physical\",\r\n      \"startDate\":\"2021-10-20T15:18:03.2697789Z\",\r\n      \"priority\":-1,\r\n      \"properties\":[\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Brand\",\r\n            \"required\":true,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Marke\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"name\":\"Brand-en\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Brand2\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"german\",\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"7d7be8bc-db74-49ae-ba92-11a3914e43dc\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"brand3\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"e7c98d04-4298-4cf6-a2c0-75768f5031ca\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"brand4_multilingual\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"brand4_multilingualen\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"brand4_multilingualde\",\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"08512d04-1721-49fe-9b1b-c552311c7ef6\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Catalog_long\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"LongText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"8a0ad192-ccbf-4c8d-9155-d3cd6d1d3d77\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"category_decimal\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"6e9f37df-3caa-42b0-b556-3b5162793800\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Category_long\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"LongText\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"86727f51-816b-425a-9754-bf0333ba23d4\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Color\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Color\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"Farber\",\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"dictionary\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"de\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"en\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"fe55902d-b298-4aef-9e18-5f0ebfaf8978\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Display_size\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Bildschirmgröße\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"Display size\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Font_camera\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"f88029fb-2bb2-475d-99bd-23db67f3b98a\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Front_camera_MP\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Full_name\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ddf9e753-db37-4385-b7c6-92f485b74185\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Inger_multi\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"af036906-3643-4f0b-9c27-505de22234cb\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"int1\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"570a5567-7442-4202-b77f-d6e572a6bd91\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Internal_Storage_GB\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Memory_Card_Slot\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Multi_int312\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"1daa49e9-0ccd-4fe7-9323-84559a85a775\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"multiInt_product\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"2341b9c1-7c80-42b4-b33d-22277e4c3a93\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Multilanguage\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"66c1b244-21a6-44b0-9cb1-2f6d9b206a57\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"multilingual\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ac335397-6f6c-4ccd-8a28-6b10a5a4e841\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"multint_variation\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"bbe3bd7f-3880-42b1-ba6e-ed0402d0c871\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Multint1\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"lab1\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"lab2\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"lab3\",\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ef21c905-4c1d-4856-87ce-8da49d3e1147\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"multivalue\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"559e6cd9-923e-4178-8d2e-3183394a09e5\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"multivalue_multiligual_property1\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"labelde\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"labelen\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"b1be3e6c-63a2-46f9-98b1-a4d11eee19f1\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"new_property234\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"qww\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"qw\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"7c48c81c-e7f2-49fe-b79f-5d938e81acd1\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"NFC\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Operating_system\",\r\n            \"required\":true,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Pixels_Per_Inch_ppi\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Processor_Core_GHz\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"RAM_Memory_GB\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Rear_camera_MP\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"SIM_Card_Slots\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"test11\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"749bf945-0f15-45cc-8b98-68cf6d58500a\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"testprop\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"a617db33-096f-4bd1-8727-ac15302b15e6\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Two_SIM_cards\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Type_of_product\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Produkttyp\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"Type_of_product\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"Type de produit\",\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"300a6918-58bb-403a-8f1b-0a3ac38b05d9\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Video_Recording\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Waterproof\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Weight_oz\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Year_Released\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n         }\r\n      ],\r\n      \"images\":[\r\n         \r\n      ],\r\n      \"assets\":[\r\n         \r\n      ],\r\n      \"links\":[\r\n         \r\n      ],\r\n      \"seoObjectType\":\"CatalogProduct\",\r\n      \"seoInfos\":[\r\n         {\r\n            \"semanticUrl\":\"{{Nameofproduct1}}\",\r\n            \"objectId\":\"{{ProductId1}}\",\r\n            \"objectType\":\"CatalogProduct\",\r\n            \"isActive\":true,\r\n            \"languageCode\":\"en-US\",\r\n            \"id\":\"3102cd2f-ad52-4892-be11-1aed4211053f\"\r\n         }\r\n      ],\r\n      \"reviews\":[\r\n         \r\n      ],\r\n      \"associations\":[\r\n         \r\n      ],\r\n      \"referencedAssociations\":[\r\n         \r\n      ],\r\n      \"outlines\":[\r\n         {\r\n            \"items\":[\r\n               {\r\n                  \"id\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n                  \"seoObjectType\":\"Catalog\",\r\n                  \"name\":\"Electronics\",\r\n                  \"hasVirtualParent\":false\r\n               },\r\n               {\r\n                  \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                  \"seoObjectType\":\"Category\",\r\n                  \"seoInfos\":[\r\n                     {\r\n                        \"semanticUrl\":\"cell-phones\",\r\n                        \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                        \"objectType\":\"Category\",\r\n                        \"isActive\":true,\r\n                        \"languageCode\":\"en-US\",\r\n                        \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                     }\r\n                  ],\r\n                  \"name\":\"Cell phones\",\r\n                  \"hasVirtualParent\":false\r\n               },\r\n               {\r\n                  \"id\":\"{{ProductId1}}\",\r\n                  \"seoObjectType\":\"CatalogProduct\",\r\n                  \"seoInfos\":[\r\n                     {\r\n                        \"semanticUrl\":\"{{Nameofproduct1}}\",\r\n                        \"objectId\":\"{{ProductId1}}\",\r\n                        \"objectType\":\"CatalogProduct\",\r\n                        \"isActive\":true,\r\n                        \"languageCode\":\"en-US\",\r\n                        \"id\":\"3102cd2f-ad52-4892-be11-1aed4211053f\"\r\n                     }\r\n                  ],\r\n                  \"name\":\"{{Nameofproduct1}}\",\r\n                  \"hasVirtualParent\":false\r\n               }\r\n            ]\r\n         }\r\n      ],\r\n      \"isInherited\":false,\r\n      \"createdDate\":\"2001-01-01T00:00:00Z\",\r\n      \"modifiedDate\":\"2001-01-01T00:00:00Z\",\r\n      \"createdBy\":\"admin\",\r\n      \"modifiedBy\":\"admin\",\r\n      \"id\":\"{{ProductId1}}\",\r\n      \"_priority\":-1\r\n   },\r\n   \"prices\":[\r\n      {\r\n         \"productId\":\"{{ProductId1}}\",\r\n         \"list\":0,\r\n         \"minQuantity\":1,\r\n         \"currency\":\"USD\",\r\n         \"pricelistId\":\"934da94516a74f9ab4ec001343ac928a\",\r\n         \"name\":\"ElectronicsUSD\",\r\n         \"catalog\":\"Electronics virtual, Electronics\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/products/{{ProductId1}}/prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"products",
										"{{ProductId1}}",
										"prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "add price to product1 Copy",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\":\"{{ProductId2}}\",\r\n   \"product\":{\r\n      \"code\":\"{{Code2}}\",\r\n      \"name\":\"{{Nameofproduct2}}\",\r\n      \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n      \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n      \"outline\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n      \"path\":\"Cell phones\",\r\n      \"isBuyable\":true,\r\n      \"isActive\":true,\r\n      \"trackInventory\":true,\r\n      \"maxQuantity\":0,\r\n      \"minQuantity\":0,\r\n      \"productType\":\"Physical\",\r\n      \"startDate\":\"2021-10-20T15:31:44.811377Z\",\r\n      \"priority\":10,\r\n      \"properties\":[\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Brand\",\r\n            \"required\":true,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Marke\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"name\":\"Brand-en\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"43d14478-d142-4a65-956f-0a308d0c4ee8\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Brand2\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"german\",\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"7d7be8bc-db74-49ae-ba92-11a3914e43dc\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"brand3\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"e7c98d04-4298-4cf6-a2c0-75768f5031ca\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"brand4_multilingual\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"brand4_multilingualen\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"brand4_multilingualde\",\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"08512d04-1721-49fe-9b1b-c552311c7ef6\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Catalog_long\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"LongText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"8a0ad192-ccbf-4c8d-9155-d3cd6d1d3d77\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"category_decimal\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"6e9f37df-3caa-42b0-b556-3b5162793800\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Category_long\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"LongText\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"86727f51-816b-425a-9754-bf0333ba23d4\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Color\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Color\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"Farber\",\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"87fd1cec-79c2-4652-83b4-36e241ede571\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"dictionary\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"de\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"en\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"fe55902d-b298-4aef-9e18-5f0ebfaf8978\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Display_size\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Bildschirmgröße\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"Display size\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"fa4a86b5-d85b-464b-b27c-00f316a979e7\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Font_camera\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"f88029fb-2bb2-475d-99bd-23db67f3b98a\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Front_camera_MP\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"7ae290e2-b198-42b0-ae63-26537281d53b\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Full_name\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ddf9e753-db37-4385-b7c6-92f485b74185\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Inger_multi\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"af036906-3643-4f0b-9c27-505de22234cb\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"int1\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"570a5567-7442-4202-b77f-d6e572a6bd91\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Internal_Storage_GB\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"1e94acae-f338-44a3-8216-194c01260628\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Memory_Card_Slot\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"3309e819-a77a-437c-915d-28450d55bab6\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Multi_int312\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"1daa49e9-0ccd-4fe7-9323-84559a85a775\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"multiInt_product\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"2341b9c1-7c80-42b4-b33d-22277e4c3a93\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Multilanguage\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"66c1b244-21a6-44b0-9cb1-2f6d9b206a57\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"multilingual\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ac335397-6f6c-4ccd-8a28-6b10a5a4e841\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"multint_variation\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"fr-FR\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"bbe3bd7f-3880-42b1-ba6e-ed0402d0c871\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Multint1\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Integer\",\r\n            \"type\":\"Category\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"lab1\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"lab2\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"lab3\",\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ef21c905-4c1d-4856-87ce-8da49d3e1147\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"multivalue\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"559e6cd9-923e-4178-8d2e-3183394a09e5\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"multivalue_multiligual_property1\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"labelde\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"labelen\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"b1be3e6c-63a2-46f9-98b1-a4d11eee19f1\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"new_property234\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"qww\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"qw\",\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"7c48c81c-e7f2-49fe-b79f-5d938e81acd1\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"NFC\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"29007dd4-2f23-417b-902c-8d6565615eea\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Operating_system\",\r\n            \"required\":true,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"f5ac5fae-b80b-4f88-8042-e7f89c998eff\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Pixels_Per_Inch_ppi\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"0e3029bd-dc69-4617-9163-78ac53ee8a6e\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Processor_Core_GHz\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"85daf769-12c7-4135-9e8a-a0bcf74db4c3\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"RAM_Memory_GB\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"f06daf73-efd3-4b6d-9143-bf08a0715991\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Rear_camera_MP\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"ee496813-1a59-4707-9816-85e639c55534\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"SIM_Card_Slots\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"552a29f0-fb63-4ea2-ba12-293cd8c9410c\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"test11\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"749bf945-0f15-45cc-8b98-68cf6d58500a\"\r\n         },\r\n         {\r\n            \"isReadOnly\":true,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"testprop\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Catalog\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"a617db33-096f-4bd1-8727-ac15302b15e6\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Two_SIM_cards\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"b2e01868-4545-4159-8936-5f21a338cc2d\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"name\":\"Type_of_product\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":true,\r\n            \"multilanguage\":true,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Variation\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"name\":\"Produkttyp\",\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"name\":\"Type_of_product\",\r\n                  \"languageCode\":\"en-US\"\r\n               },\r\n               {\r\n                  \"name\":\"Type de produit\",\r\n                  \"languageCode\":\"fr-FR\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"300a6918-58bb-403a-8f1b-0a3ac38b05d9\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Video_Recording\",\r\n            \"required\":false,\r\n            \"dictionary\":true,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"ShortText\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"2d8f8a03-9c7d-464f-96b8-959e60e91214\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Waterproof\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Boolean\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"a897f2bd-bbbf-4efb-9a8e-000d1568bd96\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Weight_oz\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"13e822a6-9a07-4889-88df-52a3e7eef488\"\r\n         },\r\n         {\r\n            \"isReadOnly\":false,\r\n            \"isManageable\":true,\r\n            \"isNew\":false,\r\n            \"catalogId\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"categoryId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n            \"name\":\"Year_Released\",\r\n            \"required\":false,\r\n            \"dictionary\":false,\r\n            \"multivalue\":false,\r\n            \"multilanguage\":false,\r\n            \"hidden\":false,\r\n            \"valueType\":\"Number\",\r\n            \"type\":\"Product\",\r\n            \"values\":[\r\n               \r\n            ],\r\n            \"attributes\":[\r\n               \r\n            ],\r\n            \"displayNames\":[\r\n               {\r\n                  \"languageCode\":\"de-DE\"\r\n               },\r\n               {\r\n                  \"languageCode\":\"en-US\"\r\n               }\r\n            ],\r\n            \"validationRules\":[\r\n               \r\n            ],\r\n            \"isInherited\":true,\r\n            \"id\":\"6283167f-5f8f-4210-9612-790d9b2eefa0\"\r\n         }\r\n      ],\r\n      \"images\":[\r\n         \r\n      ],\r\n      \"assets\":[\r\n         \r\n      ],\r\n      \"links\":[\r\n         \r\n      ],\r\n      \"seoObjectType\":\"CatalogProduct\",\r\n      \"seoInfos\":[\r\n         {\r\n            \"semanticUrl\":\"{{Nameofproduct2}}\",\r\n            \"objectId\":\"{{ProductId2}}\",\r\n            \"objectType\":\"CatalogProduct\",\r\n            \"isActive\":true,\r\n            \"languageCode\":\"en-US\",\r\n            \"id\":\"7c9c3399-2d01-4736-8c2b-33faef03cfae\"\r\n         }\r\n      ],\r\n      \"reviews\":[\r\n         \r\n      ],\r\n      \"associations\":[\r\n         \r\n      ],\r\n      \"referencedAssociations\":[\r\n         \r\n      ],\r\n      \"outlines\":[\r\n         {\r\n            \"items\":[\r\n               {\r\n                  \"id\":\"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n                  \"seoObjectType\":\"Catalog\",\r\n                  \"name\":\"Electronics\",\r\n                  \"hasVirtualParent\":false\r\n               },\r\n               {\r\n                  \"id\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                  \"seoObjectType\":\"Category\",\r\n                  \"seoInfos\":[\r\n                     {\r\n                        \"semanticUrl\":\"cell-phones\",\r\n                        \"objectId\":\"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                        \"objectType\":\"Category\",\r\n                        \"isActive\":true,\r\n                        \"languageCode\":\"en-US\",\r\n                        \"id\":\"73642cc7f2e44d92af13e94c79c73456\"\r\n                     }\r\n                  ],\r\n                  \"name\":\"Cell phones\",\r\n                  \"hasVirtualParent\":false\r\n               },\r\n               {\r\n                  \"id\":\"{{ProductId2}}\",\r\n                  \"seoObjectType\":\"CatalogProduct\",\r\n                  \"seoInfos\":[\r\n                     {\r\n                        \"semanticUrl\":\"{{Nameofproduct2}}\",\r\n                        \"objectId\":\"{{ProductId2}}\",\r\n                        \"objectType\":\"CatalogProduct\",\r\n                        \"isActive\":true,\r\n                        \"languageCode\":\"en-US\",\r\n                        \"id\":\"7c9c3399-2d01-4736-8c2b-33faef03cfae\"\r\n                     }\r\n                  ],\r\n                  \"name\":\"{{Nameofproduct2}}\",\r\n                  \"hasVirtualParent\":false\r\n               }\r\n            ]\r\n         }\r\n      ],\r\n      \"isInherited\":false,\r\n      \"createdDate\":\"2021-11-11T00:00:00Z\",\r\n      \"modifiedDate\":\"2021-11-11T00:00:00Z\",\r\n      \"createdBy\":\"admin\",\r\n      \"modifiedBy\":\"admin\",\r\n      \"id\":\"{{ProductId2}}\",\r\n      \"_priority\":10\r\n   },\r\n   \"prices\":[\r\n      {\r\n         \"productId\":\"{{ProductId2}}\",\r\n         \"list\":9999999999,\r\n         \"minQuantity\":1,\r\n         \"currency\":\"USD\",\r\n         \"pricelistId\":\"934da94516a74f9ab4ec001343ac928a\",\r\n         \"name\":\"ElectronicsUSD\",\r\n         \"catalog\":\"Electronics virtual, Electronics\"\r\n      }\r\n   ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/products/{{ProductId2}}/prices",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"products",
										"{{ProductId2}}",
										"prices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Index products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check Index\", function(){\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect (jsonData.errorCount).to.be.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId1}}\",\"{{ProductId2}}\"\r\n        ]\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/search/indexes/index",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"search",
										"indexes",
										"index"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by name:asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = 1first_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
											"\r",
											" \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"name:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n\n}}}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"name:asc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by name:desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = zlast_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"name:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n\n}}}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"name:desc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by price:asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = 0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"   pm.expect(jsonData.data.products.items[0].price.list.amount).to.equal(0);\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"price:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n price\n {\n     list\n {\n     amount\n     currency{\n         code\n     }\n     }}\n\n}}}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"price:asc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by price:desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = xFold CINEMA X12 RTF U7, amount =  23638.0\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"price:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n price\n {\n     list\n {\n     amount\n     }}\n\n}}}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"EUR\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"price:desc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by createdDate:asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = 1first_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"createdDate:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"createdDate:asc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by createdDate:desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = zlast_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"createdDate:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"createdDate:desc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by priority:asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = 1first_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"priority:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"priority:asc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by priority:desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = zlast_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"priority:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"priority:desc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by sku:asc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = 1first_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct1\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"sku:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"sku:asc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sort by sku:desc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"first product = zlast_product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											" pm.expect(jsonData.data.products.items[0].name).to.eql(pm.collectionVariables.get(\"Nameofproduct2\"));\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"sku:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
										"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"sku:desc\",\n  \"productIds\": [ \n  ]\n}"
									}
								},
								"url": {
									"raw": "{{url}}/graphql",
									"host": [
										"{{url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a product 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products?ids={{ProductId1}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ProductId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a product 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/catalog/products?ids={{ProductId2}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"catalog",
										"products"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{ProductId2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get properties with dictionary, cultureName, name and types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties with dictionary,cultureName, name and types\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.properties.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\", filter:\"keyword:Brand\", types:[PRODUCT, VARIATION])\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one property with dictionary items for specific culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one property with dictionary items for specific culture\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.property.propertyDictItems.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperty (id:\"{{propertyId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\npropertyDictItems\r\n{\r\nitems\r\n{\r\nvalue\r\n}\r\n}\r\n}\r\n} \r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties for specific category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for specific category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.properties.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", filter:\"categoryId:53e239451c844442a3b2fe9aa82d95c8\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    \r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties for category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"{{category_Id}}\", cultureName:\"de-DE\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get property with Multilvalue type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get property with Multilanguage type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties multi\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    var text = JSON.stringify(pm.response.json());\r",
									"    pm.expect(text.to.include(\"\\\"multivalue\\\": false\"));\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = JSON.stringify( pm.response.json());\r",
									"    var multivalueF = \"\\\"multivalue\\\": false\"\r",
									"    var jsonText = pm.response.text() \r",
									"    console.log(jsonData )\r",
									"    console.log(multivalueF)\r",
									"    pm.expect(jsonData.to.include(multivalueF))\r",
									"   \r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\ncategory (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n{\r\nname\r\nproperties\r\n\r\n{\r\ntype\r\nname\r\nvalue\r\nmultivalue\r\n}\r\n}\r\n}\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get property with dictionary and Multilanguage type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get property with Multilanguage and Multivalue type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Dictionary&Multivalue&Multilanguage type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n    categories ( storeId:\"Electronics\", cultureName:\"fr-FR\") {\n      items\n    {\n      id\n      name\n      properties\n      {\n        id\n        value\n        multivalue\n        label\n        propertyDictItems\n        {\n          items\n          {\n            id\n            value\n          }\n        }\n      }}\n      }}",
								"variables": "{\n  \"after\": {{after}},\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"cultureName\": \"{{cultureName}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"\"\n }"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\nproduct(id: \"{{productId}}\", cultureName: \"de-DE\",storeId: \"{{storeId}}\") {\nid\nname\ncode\nvariations{\nid\ncode\n}\ndescription {\nid\nlanguageCode\nreviewType\ncontent\n}\ndescriptions{\nid\nlanguageCode\nreviewType\ncontent\n}\n\nproperties{\nname\nvalue\nlabel\n}\nimages {\nurl\nrelativeUrl\ncultureName\n}\nassets {\nid\nname\ncultureName\n}\nseoInfo {\nname\nsemanticUrl\nmetaKeywords\nmetaDescription\n}\nprice {\npricelistId\nlist {\namount\n}\nsale {\namount\n}\ndiscountAmount {\namount\n}\n}\n}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "product description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Description not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.product.descriptions).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  product(\n    id: \"{{productId}}\"\n    storeId: \"{{storeId}}\"\n    cultureName: \"{{cultureName}}\"\n    currencyCode: \"{{currencyCode}}\")\n    {\n    id\n    code\n    descriptions\n    {\n      content\n      reviewType\n      languageCode\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\ncategory(id: \"{{categoryId}}\", storeId: \"{{storeId}}\") {\nname\ncode\n}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check meta information about dynamic property Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Items not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.dynamicProperties.items).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
								"variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check meta information about dynamic property Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Items not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.dynamicProperties.items).to.be.not.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
								"variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Organization\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": null
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{AdminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Facet search",
			"item": [
				{
					"name": "get facet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get facet\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"__outline\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									" pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"__outline\", storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n}\r\n}\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get few terms facet (products)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get few terms facet (products)\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Color\");\r",
									" pm.expect(data.data.products.term_facets[1].terms).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Brand Color\", filter:\"\" storeId: \"{{storeId}}\") {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get few terms facet (filter by color)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get few terms facet (filter by color)\", function () {\r",
									"    var data = pm.response.json();\r",
									" \r",
									" pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Color\");\r",
									" pm.expect(data.data.products.term_facets[1].terms).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Color Brand\", filter:\"Color:Black\" storeId: \"{{storeId}}\") \r\n{\r\n  \r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get few terms facet (filter by Brand)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get few terms facet (filter by Brand)\", function () {\r",
									"    var data = pm.response.json();\r",
									" \r",
									" pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Color\");\r",
									" pm.expect(data.data.products.term_facets[1].terms).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Color Brand\", filter:\"Color:Black Brand:Microsoft\"  storeId: \"{{storeId}}\") {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get facet with some languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get facet with some languages\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"multivalue_multilingual\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n    products(facet: \"multivalue_multilingual\", cultureName:\"{{cultureName}}\"  storeId: \"{{storeId}}\") {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active facet (filter: single word)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get active facet (filter: single word)\", function () {\r",
									"    var data = pm.response.json();\r",
									"  pm.expect(data.data.products.items).to.be.not.empty;\r",
									"  pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Brand\");\r",
									"  pm.expect(data.data.products.term_facets[1].terms[0].term).to.be.equal(\"Asus\");\r",
									"  pm.expect(data.data.products.term_facets[3].name).to.be.equal(\"Color\");\r",
									"  pm.expect(data.data.products.term_facets[3].terms).to.be.not.empty;\r",
									"  pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  products(storeId: \"{{storeId}}\", filter: \"color:Black, Red brand:Asus\") {\r\n    totalCount\r\n    items {\r\n      id\r\n      name\r\n    }\r\n\r\n    term_facets {\r\n      name\r\n      terms {\r\n        term\r\n        isSelected\r\n        count\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active facet (filter: words with spaces)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get active facet (filter: words with spaces)\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Brand\");\r",
									"  pm.expect(data.data.products.term_facets[1].terms[0].term).to.be.equal(\"Samsung\");\r",
									"  pm.expect(data.data.products.term_facets[3].name).to.be.equal(\"Color\");\r",
									"  pm.expect(data.data.products.term_facets[3].terms[2].term).to.be.equal(\"Gold Platinum\");\r",
									"  pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  products(\r\n    storeId: \"{{storeId}}\"\r\n    filter: \"color:\\\"Gold Platinum\\\" brand:Samsung\"\r\n  ) {\r\n    totalCount\r\n    items {\r\n      id\r\n      name\r\n    }\r\n    term_facets {\r\n      name\r\n      terms {\r\n        term\r\n        isSelected\r\n        count\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get inactive facet BLOCKED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get inactive facet\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets).to.be.empty;\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Deep\", filter:\"\",  storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm }\r\n}\r\n}\r\n} ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active facet \"price:[TO 100)\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get active facet price:[TO 100)\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
									"\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"price.USD:[TO 100)\", filter:\"\"  storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\n  range_facets\r\n  {\r\n    name\r\n    ranges\r\n    {\r\n      count\r\n      includeTo\r\n      includeFrom\r\n      min\r\n      to\r\n      max\r\n    }\r\n  }\r\n  filter_facets\r\n  {\r\n    name\r\n    \r\nfacetType\r\n  \r\n  }\r\n}\r\n} ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get active facet \"price:[100 TO 200]\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get active facet price:[100 TO 200]\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
									"\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"price.USD:[100 TO 200]\", filter:\"\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get facets \"price:[0 TO 100),[600 TO 1000]\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"price:[0 TO 100),[600 TO 1000]\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
									"\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"price.USD:[0 TO 100),[600 TO 1000])\", filter:\"\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product's facet \"category.path\" Blocked",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get product's facet category.path\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Camcorder Type\", filter:\"Camcorder.path:4974648a41df4e6ea67ef2ad76d7bbd4/45d3fc9a913d4610a5c7d0470558c4b2\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get produt's facet \"properties.{propertyName}\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get produt's facet properties.{propertyName}\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									"  pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"properties.Brand\", filter:\"properties.Brand:LG\" storeId: \"{{storeId}}\")\r\n {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get terms and range facets.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get terms and range facets\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"properties.Brand\", filter:\"properties.Brand:LG\" storeId: \"{{storeId}}\") {\r\nitems\r\n{id\r\nname}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}   ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get few range facets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get few range facets\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"price.USD:[TO 100), [600 TO 1000]\", filter:\"\" storeId: \"{{storeId}}\") {\r\nitems\r\n{id\r\nname}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}   ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Label for facet with some languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Label for facet with some languages\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets[0].label).to.be.a(\"String\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
									" pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Brand\",cultureName:\"de-DE\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\n  label\r\nterms {\r\n  label\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n  pageInfo\r\n  {\r\n    startCursor\r\n    endCursor\r\n    hasNextPage\r\n    hasPreviousPage\r\n  }\r\n  totalCount\r\n}\r\n}  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Label for term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Label for term\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.term_facets[0].label).to.be.a(\"String\");\r",
									" pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
									" pm.expect(data.data.products.term_facets[0].terms[0].label).to.be.a(\"String\");\r",
									" pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"Color\",cultureName:\"de-DE\" storeId: \"Electronics\") {\r\nterm_facets {\r\nfacetType\r\nname\r\n  label\r\nterms {\r\n  label\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n  pageInfo\r\n  {\r\n    startCursor\r\n    endCursor\r\n    hasNextPage\r\n    hasPreviousPage\r\n  }\r\n  totalCount\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Query without \"facet\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Query without facet\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.products.items).to.be.not.empty;  \r",
									" pm.expect(data.data.products.term_facets[0]).to.be.not.empty;\r",
									" pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  products(\r\n    storeId: \"Electronics\"\r\n    cultureName: \"en-US\"\r\n    sort: \"priority\"\r\n  ) {\r\n    items {\r\n      name\r\n    }\r\n    term_facets {\r\n      name\r\n    }\r\n        range_facets\r\n    {\r\n      name\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n      hasPreviousPage\r\n      startCursor\r\n      endCursor\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}/graphql",
							"host": [
								"{{url}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{AdminToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessTokenUrl",
				"value": "https://regression-platform.qa.govirto.com/connect/token",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "QAToken",
				"type": "string"
			},
			{
				"key": "password",
				"value": "store",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "password_credentials",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"/*pm.test(\"Error message\", function () {",
					"",
					"    if(pm.response.json().errors[0] != \"\")",
					"    {",
					"    console.log(jsonData.errors[0].message);",
					"    }",
					"});*/"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://regression-platform.qa.govirto.com"
		},
		{
			"key": "adminurl",
			"value": "https://regression-platform.qa.govirto.com"
		},
		{
			"key": "storeId",
			"value": "Electronics"
		},
		{
			"key": "userId",
			"value": "787585c5-8240-4617-8bf9-30c07201a17a"
		},
		{
			"key": "currencyCode",
			"value": "USD"
		},
		{
			"key": "cultureName",
			"value": "en-US"
		},
		{
			"key": "cartName",
			"value": "default"
		},
		{
			"key": "filter",
			"value": "bool:true"
		},
		{
			"key": "categoryId",
			"value": "4b50b398ff584af9b6d69c082c94844b"
		},
		{
			"key": "contactId",
			"value": "71df1001-efeb-46e4-bafd-92f69da032df"
		},
		{
			"key": "orderId",
			"value": "ce1553ab-67f2-4c3c-8fbc-de485331a4bb"
		},
		{
			"key": "orderNumber",
			"value": "CO210628-00401"
		},
		{
			"key": "after",
			"value": "0"
		},
		{
			"key": "first",
			"value": "2"
		},
		{
			"key": "sort",
			"value": ""
		},
		{
			"key": "organizationId",
			"value": "3b85ef22-f9fa-43bc-83d1-cb6f1be4eb0f"
		},
		{
			"key": "productId",
			"value": "143e3eb3d1ee4a2bbf8fa0ecacfd1222"
		},
		{
			"key": "userName",
			"value": "admin"
		},
		{
			"key": "price",
			"value": "569.0"
		},
		{
			"key": "cartId",
			"value": "961a0f8c-3451-4255-84c9-382516e73e3d"
		},
		{
			"key": "cartType ",
			"value": "null"
		},
		{
			"key": "lineItemId",
			"value": "7a2e595a-8d06-487e-b1c5-878c12e9774a"
		},
		{
			"key": "lineItemsComment",
			"value": "this text"
		},
		{
			"key": "secondCartId",
			"value": ""
		},
		{
			"key": "paymentId",
			"value": "b0e840a8-c340-4acb-8828-684f029cce25"
		},
		{
			"key": "shipmentId",
			"value": "1475d660-a11b-4c91-9525-3ed95bd43539"
		},
		{
			"key": "orderLineItemId",
			"value": "48876932-22e5-4624-af0f-7667d53b9753"
		},
		{
			"key": "orderPaymentId",
			"value": "dfb38a0c-b9ce-4e4d-b580-85dd80104653"
		},
		{
			"key": "orderShipmentId",
			"value": "5db3dd0f-a2c0-44bb-b100-22600b98e03b"
		},
		{
			"key": "paymentNumber",
			"value": "PI210628-00401"
		},
		{
			"key": "category_Id",
			"value": "53e239451c844442a3b2fe9aa82d95c8"
		},
		{
			"key": "propertyId",
			"value": "3851575f-f128-4c04-97a1-668d057b2eb4"
		},
		{
			"key": "total1",
			"value": ""
		},
		{
			"key": "email",
			"value": "eXp1@mail.com"
		},
		{
			"key": "password",
			"value": "eXp1@mail.com"
		},
		{
			"key": "userName1",
			"value": "eXp121122@mail.com"
		},
		{
			"key": "userIdblock",
			"value": ""
		},
		{
			"key": "paymentId1",
			"value": ""
		},
		{
			"key": "shipmentId1",
			"value": ""
		},
		{
			"key": "cartAddress",
			"value": ""
		},
		{
			"key": "cartId1",
			"value": ""
		},
		{
			"key": "randomUser1",
			"value": ""
		},
		{
			"key": "cartId2",
			"value": ""
		},
		{
			"key": "randomUser2",
			"value": ""
		},
		{
			"key": "orderCart",
			"value": ""
		},
		{
			"key": "randomUser3",
			"value": ""
		},
		{
			"key": "Token1",
			"value": ""
		},
		{
			"key": "contactId2",
			"value": ""
		},
		{
			"key": "contactId1",
			"value": ""
		},
		{
			"key": "userName1",
			"value": "User_Assign_1"
		},
		{
			"key": "AdminToken",
			"value": ""
		},
		{
			"key": "userName2",
			"value": "User_Assign_2"
		},
		{
			"key": "organizationId1",
			"value": ""
		},
		{
			"key": "ProductId",
			"value": ""
		},
		{
			"key": "Nameofproduct",
			"value": ""
		},
		{
			"key": "Code",
			"value": ""
		},
		{
			"key": "AdminToken",
			"value": ""
		},
		{
			"key": "orderid1",
			"value": ""
		},
		{
			"key": "urlQA",
			"value": "https://vcplatform-platform.qa.govirto.com"
		},
		{
			"key": "adminQA",
			"value": "https://vcplatform-platform.qa.govirto.com"
		},
		{
			"key": "catalogQA",
			"value": "4974648a41df4e6ea67ef2ad76d7bbd4"
		},
		{
			"key": "categoryQA",
			"value": "0d4ad9bab9184d69a6e586effdf9c2ea"
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "roleId",
			"value": "12345678901"
		},
		{
			"key": "roleName",
			"value": "organization manager"
		},
		{
			"key": "randomCart",
			"value": ""
		},
		{
			"key": "randomCustomer",
			"value": ""
		},
		{
			"key": "billingAddressId",
			"value": ""
		},
		{
			"key": "shipmentAddressId",
			"value": ""
		},
		{
			"key": "cartAddressId",
			"value": ""
		},
		{
			"key": "billingKey",
			"value": ""
		},
		{
			"key": "shipmentKey",
			"value": ""
		},
		{
			"key": "ProductId1",
			"value": ""
		},
		{
			"key": "Nameofproduct1",
			"value": ""
		},
		{
			"key": "Code1",
			"value": ""
		},
		{
			"key": "ProductId2",
			"value": ""
		},
		{
			"key": "Nameofproduct2",
			"value": ""
		},
		{
			"key": "Code2",
			"value": ""
		},
		{
			"key": "cartLineItem1",
			"value": ""
		},
		{
			"key": "cartLineItem2",
			"value": ""
		},
		{
			"key": "cartOrderId_2",
			"value": ""
		}
	]
}
