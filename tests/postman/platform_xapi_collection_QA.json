{
	"info": {
		"_postman_id": "0f83e21b-6370-4345-b9b5-ab5e22cb547d",
		"name": "RegressionXAPI New version",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "mutations",
			"item": [
				{
					"name": "addCoupon",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
								"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"Real30\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addItem",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userName}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{productId}}\",\n    \"quantity\": 50,\n    \"price\": 100.00,\n    \"comment\": \"{{comment}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addOrUpdateCartAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Carts\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
									"    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
									"    pm.expect(json.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
								"variables": "{\n\"command\": {\n\"cartId\": \"855a724f-6a0d-4ec7-9b58-f60c3fa8e46c\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"127a437d-bd2c-4514-9434-b319d75365a2\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest11\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addOrUpdateCartPayment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
								"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"payment\": {\n\"id\": \"paymentid_default_test_1\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": \"1050\",\n\"amount\": \"1050\"\n}\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addOrUpdateCartShipment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
								"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"shipmentID_1\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": \"123\",\n\"length\": \"432\",\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": \"151\",\n\"weight\": \"15643\",\n\"weightUnit\": \"116\",\n\"width\": \"114\",\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": \"10\"\n}\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "cancelOrderPayment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation cancelOrderPayment ($command: InputCancelOrderPaymentType!) {\n    cancelOrderPayment (command: $command)\n}",
								"variables": "{\n\"command\": {\n\"payment\": {\n\"id\":\"{{orderPaymentId}}\",\n\"operationType\": \"\",\n\"number\": \"{{paymentNumber}}\",\n\"isApproved\": true,\n\"isCancelled\": true,\n\"cancelReason\": \"\",\n\"customerId\": \"{{userId}}\",\n\"orderId\": \"{{orderId}}\",\n\"sum\": \"100\",\n\"taxTotal\": \"120\",\n\"currency\": \"USD\",\n\"paymentStatus\": 02\n}\n}\n}\n\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "changeCartItemComment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Check after change lineitems comment\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart).to.not.eql(null);\r",
									"    pm.expect(data.data.changeCartItemComment).to.be.an(\"object\");\r",
									"    pm.expect(data.data.changeCartItemComment.id).to.be.a(\"string\");\r",
									"    pm.expect(data.data.changeCartItemComment.items).to.not.empty\r",
									"    pm.expect(data.data.changeCartItemComment.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
									"     pm.expect(data.data.changeCartItemComment.items[0].note).equal(pm.collectionVariables.get(\"lineItemsComment\"))\r",
									"    \r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
								"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "changeCartItemPrice",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Check after change price\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart).to.not.eql(null);\r",
									"    pm.expect(data.data.changeCartItemPrice).to.be.an(\"object\");\r",
									"    pm.expect(data.data.changeCartItemPrice.id).to.be.a(\"string\");\r",
									"    pm.expect(data.data.changeCartItemPrice.items).to.not.empty\r",
									"    pm.expect(data.data.changeCartItemPrice.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
									"     pm.expect(data.data.changeCartItemPrice.items[0].listPrice.amount).to.exist\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
								"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"price\": {{price}}\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "changeCartItemQuantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Check after change qty\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart).to.not.eql(null);\r",
									"    pm.expect(data.data.changeCartItemQuantity).to.be.an(\"object\");\r",
									"    pm.expect(data.data.changeCartItemQuantity.id).to.be.a(\"string\");\r",
									"    pm.expect(data.data.changeCartItemQuantity.items).to.not.empty\r",
									"    pm.expect(data.data.changeCartItemQuantity.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
								"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"quantity\": 5\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "changeComment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"Text\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "changeOrderStatus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation changeOrderStatus ($command: InputChangeOrderStatusType!) {\n    changeOrderStatus (command: $command)\n}",
								"variables": "{\n  \"command\": {\n    \"orderId\": \"{{orderId}}\",\n    \"status\": \"Paid\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "clearCart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
								"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "clearPayments",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "clearShipments",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
								"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "confirmOrderPayment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation confirmOrderPayment ($command: InputConfirmOrderPaymentType!) {\n    confirmOrderPayment (command: $command)\n}",
								"variables": "{\n\"command\": {\n\"payment\": {\n\"id\":\"{{orderPaymentId}}\",\n\"operationType\": \"\",\n\"number\": \"{{paymentNumber}}\",\n\"isApproved\": true,\n\"isCancelled\": true,\n\"cancelReason\": \"\",\n\"customerId\": \"{{userId}}\",\n\"orderId\": \"{{orderId}}\",\n\"sum\": \"100\",\n\"taxTotal\": \"120\",\n\"currency\": \"USD\",\n\"paymentStatus\": 02\n}\n}\n}\n\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createContact",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
								"variables": "{\n\"command\": {\n\"name\": \"UserA\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA\",\n\"firstName\": \"UserA\",\n\"lastName\": \"UserA\"\n}\n}\n\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrderFromCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Carts\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
									"    pm.expect(json.data.createOrderFromCart.id).to.be.not.empty;\r",
									"    pm.expect(json.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\ncreateOrderFromCart (command: $command) {\nid\nitems{\nid\nname\nquantity\nfulfillmentCenterId\nfulfillmentCenterName\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\ntaxTotal{\namount\n}\ntotal{\namount\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createOrganization",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
								"variables": "{\n\"command\": {\n\"name\": \"NewOrgADMIN\",\n\"addresses\": []\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
								"variables": "{\n\"command\": {\n\"createdBy\": \"eXp1\",\n\"email\": \"22eXp1@mail.com\",\n\"password\":\"eXp1@mail.com\",\n\"userName\": \"eXp12112@mail.com\",\n\"userType\": \"Customer\"\n}\n}\n\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteContact",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteContact ($command: InputDeleteContactType!) {\n    deleteContact (command: $command)\n}",
								"variables": "{\n  \"command\": {\n    \"contactId\": \"{{contactId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUsers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
								"variables": "{\n\"command\": {\n\"userNames\": [\n\"eXp1@mail.com\"\n]\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "mergeCart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{secondCartId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeCart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
								"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeCartAddress",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeCartItem",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Check after remove lineitems\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart).to.not.eql(null);\r",
									"    pm.expect(data.data.removeCartItem).to.be.an(\"object\");\r",
									"    pm.expect(data.data.removeCartItem.items).to.not.empty\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
								"variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeCoupon",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
								"variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"Real30\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeShipment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
								"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateAddresses",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateAddresses ($command: InputUpdateContactAddressType!) {\nupdateAddresses (command: $command) {\nfirstName\nlastName\naddresses { key city countryCode countryName email firstName lastName line1 line2 middleName name phone postalCode regionId regionName zip }\n}\n}",
								"variables": "{\n\"command\": {\n\"contactId\":\"{{contactId}}\",\n\"addresses\": [{\n\"addressType\": 2,\n\"city\": \"1Thousand oaks 25\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States\",\n\"email\": \"alivemenone@gmail.com\",\n\"firstName\": \"Steven\",\n\"lastName\": \"Woodward\",\n\"line1\": \"1888, colgate dr\",\n\"name\": \"Steven Woodward 1888, colgate dr Thousand oaks California 91360 United States\",\n\"postalCode\": \"91360\",\n\"regionId\": \"CA\",\n\"regionName\": \"California\"\n}]\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateContact",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
								"variables": "{\n\"command\": {\n\"id\": \"{{contactId}}\",\n\"name\": \"UserA\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA111\",\n\"firstName\": \"UserA\",\n\"lastName\": \"UserA\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateOrganization",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        addresses {\n            addressType\n            city\n            countryCode\n            countryName\n            email\n            firstName\n            key\n            lastName\n            line1\n            line2\n            middleName\n            name\n            organization\n            phone\n            postalCode\n            regionId\n            regionName\n            zip\n        }\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    addresses {\n                        addressType\n                        city\n                        countryCode\n                        countryName\n                        email\n                        firstName\n                        key\n                        lastName\n                        line1\n                        line2\n                        middleName\n                        name\n                        organization\n                        phone\n                        postalCode\n                        regionId\n                        regionName\n                        zip\n                    }\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                addresses {\n                    addressType\n                    city\n                    countryCode\n                    countryName\n                    email\n                    firstName\n                    key\n                    lastName\n                    line1\n                    line2\n                    middleName\n                    name\n                    organization\n                    phone\n                    postalCode\n                    regionId\n                    regionName\n                    zip\n                }\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    addresses {\n                        addressType\n                        city\n                        countryCode\n                        countryName\n                        email\n                        firstName\n                        key\n                        lastName\n                        line1\n                        line2\n                        middleName\n                        name\n                        organization\n                        phone\n                        postalCode\n                        regionId\n                        regionName\n                        zip\n                    }\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
								"variables": "{\n\"command\": {\n\"id\": \"{{organizationId}}\",\n\"name\": \"org2.com\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateRole",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateRole ($command: InputUpdateRoleType!) {\n    updateRole (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
								"variables": "{\n\"command\":{\n\"id\": \"d1e0b7f9-32e4-4b2f-98c1-0406a4d48112\",\n\"description\":\"sdfdsfsdfsdf\",\n\"name\": \"CustomerUpdate_test111\",\n\"permissions\": [{\n\"name\": \"customer:update\",\n\"assignedScopes\": [{\n\"scope\": \"USERID\",\n\"type\": \"OnlyOrderResponsibleScope\"\n}]\n}]\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUser ($command: InputUpdateUserType!) {\n    updateUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
								"variables": "\n{\n\"command\":{\n\"isAdministrator\": false,\n\"userType\": \"Customer\",\n\"roles\": [],\n\"id\": \"1f301327-55d9-493e-91b6-3b4d4b375029\",\n\"userName\": \"eXp122@mail.com\",\n\"email\": \"_loGIN999@gmail.com\",\n\"securityStamp\": \"RandomData\",\n\"storeId\":\"Electronics\",\n\"memberId\":\"0876fd33-d9db-4e01-9118-1b7bc9a8b063\"\n}\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "validateCoupon",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation validateCoupon ($command: InputValidateCouponType!) {\n    validateCoupon (command: $command)\n}",
								"variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"coupon\": \"Real30\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic property to cart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
								"variables": " {\r\n\"command\": {\r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddMultipleItems",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($command: InputAddItemsType!) {\r\naddItemsCart (command: $command)\r\n{\r\nid\r\nitems {\r\nproductId,\r\nquantity\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"command\": {\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartType\": \"\",\r\n\"cartId\": \"{{cartId}}\",\r\n\"cartItems\": [{\r\n\"productId\": \"44d62e31a783468fa161bccd1b7de19e\",\r\n\"quantity\": 2\r\n},\r\n{\r\n\"productId\": \"44d6222e31a783468fa161bccd1b7de19e\",\r\n\"quantity\": 5\r\n}]\r\n}\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for lineitems in cart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": " {\r\n\"command\": {\r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\":\"{{lineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for payments in cart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": " {\r\n\"command\": {\r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\":\"{{paymentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for shipments in cart",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": " {\r\n\"command\": {\r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOrderDynamicProperties($command: InputUpdateOrderDynamicPropertiesType!) {   updateOrderDynamicProperties(command: $command) {     \r\nid     \r\nnumber     \r\ndynamicProperties { \r\nname \r\nvalue \r\nvalueType\r\ndynamicProperty {\r\nname\r\nlabel\r\nvalueType\r\n }\r\ndictionaryItem {\r\nlabel \r\nname\r\nid\r\n}}   } }",
								"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"status\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for shipment in order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOrderShipmentDynamicProperties($command: InputUpdateOrderShipmentDynamicPropertiesType!) {\r\n\r\n    updateOrderShipmentDynamicProperties(command: $command) {\r\n\r\n        number\r\n\r\n        shipments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
								"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"shipmentId\": \"{{orderShipmentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for payments in order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOrderPaymentDynamicProperties($command: InputUpdateOrderPaymentDynamicPropertiesType!) {\r\n\r\n    updateOrderPaymentDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        number\r\n\r\n        inPayments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dynamicProperty {\r\n\r\n                    name \r\n\r\n                    label \r\n\r\n                    valueType\r\n\r\n                } \r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
								"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"paymentId\":\"{{orderPaymentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dynamic properties for order lineitem",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateOrderItemDynamicProperties($command: InputUpdateOrderItemDynamicPropertiesType!) {\r\n\r\n    updateOrderItemDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        items {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
								"variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"lineItemId\":\"{{orderLineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"Short Text Property\",\r\n\"value\": \"Test updated value\"\r\n},{\r\n\"name\": \"bool\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"date\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"decimal\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"html\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"html multilingual\",\r\n\"value\": \"<a>link</a>\",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"image\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"integer\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"integer multivalue\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"long text\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"long text multilingual\",\r\n\"value\": \"Test updated value text FR \",\r\n\"locale\":\"fr-FR\"\r\n},{\r\n\"name\": \"short text dictionary\",\r\n\"value\": \"beeeed44-18ce-4b93-89ed-308324ab6f0b\"\r\n},{\r\n\"name\": \"short text multilingual\",\r\n\"value\": \"short text multilingual\",\r\n\"locale\":\"de-DE\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"locale\":\"en-US\"\r\n},{\r\n\"name\": \"short text multilingual multivalue\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"locale\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update organizatiom/contact dynamic property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname\r\n        dynamicProperties {\r\n          name value\r\n        }\r\n    }\r\n}",
								"variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"d7e2a9cb-0911-4ba5-9a93-f22523859ad9\",\r\n   \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"decimal\",\r\n          \"value\": \"10.00000\"\r\n        },\r\n        {\r\n          \"name\": \"html\",\r\n          \"value\": \"10texthtml\"\r\n        },\r\n        {\r\n          \"name\": \"occupation\",\r\n          \"value\": \"6fba64f496a24317b476b8101fddb57b\"\r\n        },\r\n        {\r\n          \"name\": \"Married\",\r\n          \"value\": \"true\"\r\n        },\r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"aDefault\"\r\n        },\r\n        {\r\n          \"name\": \"Multilanguage\",\r\n          \"value\": \"fr-value\"\r\n        },\r\n        {\r\n          \"name\": \"occupation\",\r\n          \"value\": \"578fadeb1d2a40b3b08b1daf8db09463\"\r\n        },\r\n        {\r\n          \"name\": \"Sex\",\r\n          \"value\": \"d58bedc559c6420fbde35666adae3251\"\r\n        },\r\n        {\r\n          \"name\": \"integer multivalue\",\r\n          \"value\": \"3\"\r\n        },\r\n        {\r\n          \"name\": \"integer multivalue\",\r\n          \"value\": \"2\"\r\n        },\r\n        {\r\n          \"name\": \"integer multivalue\",\r\n          \"value\": \"10\"\r\n        },\r\n        {\r\n          \"name\": \"html multilingual\",\r\n          \"value\": \"10\"\r\n        },\r\n        {\r\n          \"name\": \"bool\",\r\n          \"value\": \"True\"\r\n        },\r\n        {\r\n          \"name\": \"date\",\r\n          \"value\": \"06/30/2020 00:00:00\"\r\n        },\r\n        {\r\n          \"name\": \"decimal multivalue\",\r\n          \"value\": \"10.00000\"\r\n        },\r\n        {\r\n          \"name\": \"decimal multivalue\",\r\n          \"value\": \"10.50000\"\r\n        },\r\n        {\r\n          \"name\": \"long text\",\r\n          \"value\": \"this is long text\"\r\n        },\r\n        {\r\n          \"name\": \"short text\",\r\n          \"value\": \"test11 short text\"\r\n        },\r\n        {\r\n          \"name\": \"image\",\r\n          \"value\": \"link to image\"\r\n        },\r\n        {\r\n          \"name\": \"long text multilingual\",\r\n          \"value\": \"this is long text for FR languages\"\r\n        },\r\n        {\r\n          \"name\": \"integer\",\r\n          \"value\": \"3\"\r\n        },\r\n        {\r\n          \"name\": \"SEttings New property [CHANGED]\",\r\n          \"value\": null\r\n        },\r\n        {\r\n          \"name\": \"Settings property [Changed]\",\r\n          \"value\": null\r\n        },\r\n        {\r\n          \"name\": \"short text dictionaty\",\r\n          \"value\": null\r\n        },\r\n        {\r\n          \"name\": \"short text multilingual\",\r\n          \"value\": \"text value for en-US\",\r\n\t\t\t\t\t\"locale\": \"en-US\"\r\n        },{\r\n          \"name\": \"short text multilingual\",\r\n           \"value\": \"text value for fr-FR\",\r\n\t\t\t\t\t\"locale\": \"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"short text multivalue\",\r\n          \"value\": \"value1\"\r\n        },\r\n {\r\n          \"name\": \"short text multivalue\",\r\n          \"value\": \"value2\"\r\n},\r\n        {\r\n          \"name\": \"short text multivalue&multilingual\",\r\n          \"value\": \"value2\",\r\n\t\t\t\t\t\"locale\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"short text multivalue&multilingual\",\r\n          \"value\": \"value2\",\r\n\t\t\t\t\t\"locale\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"short text multivalue&multilingual\",\r\n          \"value\": \"value1\",\r\n\t\t\t\t\t\"locale\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"short text multivaue multilingual dictionary\",\r\n          \"value\": \"88629653-094f-476e-8be7-50bca237e132\",\r\n\t\t    \"locale\": \"en-US\"\r\n        }\r\n  \t]\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "send notification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($command: InputSendVerifyEmailType){\r\nsendVerifyEmail(command: $command)\r\n}",
								"variables": "{\r\n\"command\": {\r\n\"email\": \"{atz@virtoway.com}\"\r\n}\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add items",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($command: InputAddItemsType!) {\r\naddItemsCart (command: $command)\r\n{\r\nid\r\ncustomerId\r\nitems {\r\nproductId,\r\nquantity\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"command\": {\r\n\"storeId\": \"{{storeId}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartType\": \"\",\r\n\"cartId\": \"{{cartId}}\",\r\n\"cartItems\": [{\r\n\"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n\"quantity\": 2\r\n},\r\n{\r\n\"productId\": \"bd8e58948c3648e8b08e1fb4ed4e01bb\",\r\n\"quantity\": 5\r\n}]\r\n}\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "queries",
			"item": [
				{
					"name": "categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n    categories ( storeId:\"Electronics\", cultureName:\"fr-FR\") {\n      items\n    {\n      id\n      name\n      properties\n      {\n        id\n        value\n        multivalue\n        label\n        propertyDictItems\n        {\n          items\n          {\n            id\n            value\n          }\n        }\n      }}\n      }}",
								"variables": "{\n  \"after\": {{after}},\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"cultureName\": \"{{cultureName}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"\"\n }"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\ncategory(id: \"{{categoryId}}\", storeId: \"{{storeId}}\") {\nname\ncode\n}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "me",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query me  {\n    me {\n        accessFailedCount\n        contact {\n            addresses {\n                addressType\n                city\n                countryCode\n                countryName\n                email\n                firstName\n                key\n                lastName\n                line1\n                line2\n                middleName\n                name\n                organization\n                phone\n                postalCode\n                regionId\n                regionName\n                zip\n            }\n            birthDate\n            firstName\n            fullName\n            id\n            lastName\n            memberType\n            middleName\n            name\n            organizationId\n            organizations {\n                addresses {\n                    addressType\n                    city\n                    countryCode\n                    countryName\n                    email\n                    firstName\n                    key\n                    lastName\n                    line1\n                    line2\n                    middleName\n                    name\n                    organization\n                    phone\n                    postalCode\n                    regionId\n                    regionName\n                    zip\n                }\n                businessCategory\n                contacts  {\n                    edges {\n                        cursor\n                    }\n                    items {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    pageInfo {\n                        endCursor\n                        hasNextPage\n                        hasPreviousPage\n                        startCursor\n                    }\n                    totalCount\n                }\n                description\n                emails\n                groups\n                id\n                memberType\n                name\n                outerId\n                ownerId\n                parentId\n                phones\n                seoObjectType\n            }\n            organizationsIds\n            outerId\n            phones\n            securityAccounts {\n                accessFailedCount\n                contact {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizationsIds\n                    outerId\n                    phones\n                }\n                createdBy\n                createdDate\n                email\n                emailConfirmed\n                id\n                isAdministrator\n                lockoutEnabled\n                lockoutEnd\n                memberId\n                modifiedBy\n                modifiedDate\n                normalizedEmail\n                normalizedUserName\n                passwordExpired\n                permissions\n                phoneNumber\n                phoneNumberConfirmed\n                photoUrl\n                roles {\n                    description\n                    id\n                    name\n                    normalizedName\n                    permissions\n                }\n                securityStamp\n                storeId\n                twoFactorEnabled\n                userName\n                userType\n            }\n        }\n        createdBy\n        createdDate\n        email\n        emailConfirmed\n        id\n        isAdministrator\n        lockoutEnabled\n        lockoutEnd\n        memberId\n        modifiedBy\n        modifiedDate\n        normalizedEmail\n        normalizedUserName\n        passwordExpired\n        permissions\n        phoneNumber\n        phoneNumberConfirmed\n        photoUrl\n        roles {\n            description\n            id\n            name\n            normalizedName\n            permissions\n        }\n        securityStamp\n        storeId\n        twoFactorEnabled\n        userName\n        userType\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://localhost:5001/connect/token",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "store",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "Bearer",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query payments ($after: String, $first: Int, $filter: String, $sort: String, $cultureName: String, $userId: String!) {\npayments (after: $after, first: $first, filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\ntotalCount\nitems\n{\nid\norderId\ncustomerId\nstatus\nsum{\namount\n}\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"filter\": \"{{filter}}\",\n  \"sort\": \"{{sort}}\",\n  \"cultureName\": \"{{cultureName}}\",\n  \"userId\": \"{{userId}}\"\n}\n\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\nproduct(id: \"{{productId}}\", cultureName: \"de-DE\",storeId: \"{{storeId}}\") {\nid\nname\ncode\nvariations{\nid\ncode\n}\ndescription {\nid\nlanguageCode\nreviewType\ncontent\n}\ndescriptions{\nid\nlanguageCode\nreviewType\ncontent\n}\n\nproperties{\nname\nvalue\nlabel\n}\nimages {\nurl\nrelativeUrl\ncultureName\n}\nassets {\nid\nname\ncultureName\n}\nseoInfo {\nname\nsemanticUrl\nmetaKeywords\nmetaDescription\n}\nprice {\npricelistId\nlist {\namount\n}\nsale {\namount\n}\ndiscountAmount {\namount\n}\n}\n}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "products",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\nproducts(\nquery: \"\"\nstoreId: \"Electronics\"\nsort:\"priority:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\nimgSrc\nslug\nprice {\npricelistId\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\nproperties {\nname\n}\nseoInfo {\nsemanticUrl\nmetaKeywords\nmetaDescription\n}\n}\n}\n}",
								"variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"{{sort}}\",\n  \"productIds\": [ \n  ]\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "role",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query role ($roleName: String!) {\n    role (roleName: $roleName) {\n        description\n        id\n        name\n        normalizedName\n        permissions\n    }\n}",
								"variables": "{\n  \"roleName\": \"Organization maintainer\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check meta information about dynamic property",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
								"variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get facet",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproducts(facet: \"__outline_named\", storeId: \"Electronics\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n}\r\n}\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties with dictionary, cultureName, name and types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties with dictionary,cultureName, name and types\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.properties.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\", filter:\"keyword:Brand\", types:[PRODUCT, VARIATION])\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get one property with dictionary items for specific culture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get one property with dictionary items for specific culture\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.property.propertyDictItems.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperty (id:\"{{propertyId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\npropertyDictItems\r\n{\r\nitems\r\n{\r\nvalue\r\n}\r\n}\r\n}\r\n} \r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties for specific category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for specific category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.properties.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\nproperties (storeId:\"{{storeId}}\", filter:\"categoryId:53e239451c844442a3b2fe9aa82d95c8\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    \r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get properties for category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get properties for category\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.category.properties).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"{{category_Id}}\", cultureName:\"de-DE\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search orders\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"after\": \"0\",\r\n\"first\": 20,\r\n\"sort\": \"name:desc\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by bool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by bool\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"bool:true\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by integer\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"integer:10\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by long text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by long text\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"\\\"long text\\\":\\\"long text\\\"\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by date\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"date:2021-06-29\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by image\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"\\\"image\\\":\\\"link to image\\\"\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by decimal\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"decimal:123\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by html",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by html\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"html:<div></div>\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contacts by short text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search contacts by short text\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.contacts.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contacts($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(filter:$filter, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"\\\"short text\\\":\\\"short text\\\"\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.data.contact).to.not.eql(null);\r",
									"    pm.expect(json.data.contact).to.be.an(\"object\");\r",
									"    pm.expect(json.data.contact.id).to.be.a(\"string\");\r",
									"    pm.expect(json.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query contact ( $id: String!) {\n    contact (id: $id) {\n        addresses {\n            addressType\n            city\n            countryCode\n            countryName\n            email\n            firstName\n            key\n            lastName\n            line1\n            line2\n            middleName\n            name\n            organization\n            phone\n            postalCode\n            regionId\n            regionName\n            zip\n        }\n        birthDate\n        firstName\n        fullName\n        id\n        lastName\n        memberType\n        middleName\n        name\n        organizationId\n        organizations {\n            addresses {\n                addressType\n                city\n                countryCode\n                countryName\n                email\n                firstName\n                key\n                lastName\n                line1\n                line2\n                middleName\n                name\n                organization\n                phone\n                postalCode\n                regionId\n                regionName\n                zip\n            }\n            businessCategory\n            contacts  {\n                edges {\n                    cursor\n                    node {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                }\n                items {\n                    addresses {\n                        addressType\n                        city\n                        countryCode\n                        countryName\n                        email\n                        firstName\n                        key\n                        lastName\n                        line1\n                        line2\n                        middleName\n                        name\n                        organization\n                        phone\n                        postalCode\n                        regionId\n                        regionName\n                        zip\n                    }\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n                pageInfo {\n                    endCursor\n                    hasNextPage\n                    hasPreviousPage\n                    startCursor\n                }\n                totalCount\n            }\n            description\n            emails\n            groups\n            id\n            memberType\n            name\n            outerId\n            ownerId\n            parentId\n            phones\n            seoObjectType\n        }\n        organizationsIds\n        outerId\n        phones\n        securityAccounts {\n            accessFailedCount\n            contact {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizationsIds\n                outerId\n                phones\n            }\n            createdBy\n            createdDate\n            email\n            emailConfirmed\n            id\n            isAdministrator\n            lockoutEnabled\n            lockoutEnd\n            memberId\n            modifiedBy\n            modifiedDate\n            normalizedEmail\n            normalizedUserName\n            passwordExpired\n            permissions\n            phoneNumber\n            phoneNumberConfirmed\n            photoUrl\n            roles {\n                description\n                id\n                name\n                normalizedName\n                permissions\n            }\n            securityStamp\n            storeId\n            twoFactorEnabled\n            userName\n            userType\n        }\n    }\n}",
								"variables": "{\n \"searchPhrase\": \"\",\n  \"id\": \"{{contactId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"after\": \"0\",\r\n    \"first\": 20,\r\n    \"sort\": \"name:desc\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by bool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by bool\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"filter\": \"bool:true\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by integer\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n     \"filter\": \"integer:123\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by long text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by long text\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"filter\": \"\\\"long text\\\":\\\"long text\\\"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by date\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"filter\": \"date:2021-06-28\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by image\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n\"filter\": \"\\\"image\\\":\\\"https://regression-platform.qa.govirto.com/cms-content/assets/images/141209155114_cat_grumpy_cat_624x351_mediapunchrex.jpg\\\"\"\r\n}\r\n"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by decimal\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"filter\": \"decimal:1234\"\r\n\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by html",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by html\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"filter\": \"html:<div></div>\"\r\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Organizations by short text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search organizations by short text\", function () {\r",
									"    var data = pm.response.json();\r",
									" pm.expect(data.data.organizations.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organizations($filter: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (filter:$filter, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
								"variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"filter\": \"\\\"short text\\\":\\\"short text\\\"\"\r\n}  "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "organization",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://localhost:5001/connect/token",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "store",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "Bearer",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n        addresses {\n            addressType\n            city\n            countryCode\n            countryName\n            email\n            firstName\n            key\n            lastName\n            line1\n            line2\n            middleName\n            name\n            organization\n            phone\n            postalCode\n            regionId\n            regionName\n            zip\n        }\n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    addresses {\n                        addressType\n                        city\n                        countryCode\n                        countryName\n                        email\n                        firstName\n                        key\n                        lastName\n                        line1\n                        line2\n                        middleName\n                        name\n                        organization\n                        phone\n                        postalCode\n                        regionId\n                        regionName\n                        zip\n                    }\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                addresses {\n                    addressType\n                    city\n                    countryCode\n                    countryName\n                    email\n                    firstName\n                    key\n                    lastName\n                    line1\n                    line2\n                    middleName\n                    name\n                    organization\n                    phone\n                    postalCode\n                    regionId\n                    regionName\n                    zip\n                }\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    addresses {\n                        addressType\n                        city\n                        countryCode\n                        countryName\n                        email\n                        firstName\n                        key\n                        lastName\n                        line1\n                        line2\n                        middleName\n                        name\n                        organization\n                        phone\n                        postalCode\n                        regionId\n                        regionName\n                        zip\n                    }\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
								"variables": "{\n \n  \"id\": \"{{organizationId}}\",\n  \"userId\": \"{{userId}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Check cart by user ID\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart).to.not.eql(null);\r",
									"    pm.expect(data.data.cart).to.be.an(\"object\");\r",
									"    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Check available payment method\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
									"     pm.expect(data.errors).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Check available shipment method\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
									" pm.expect(data.errors).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Check dynamicProperties in cart\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
									"     pm.expect(data.errors).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Check items in cart\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.cart.items).to.not.empty\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Check dynamic properties for lineitems\", function () {\r",
									"    var data = pm.response.json();\r",
									"     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});\r",
									"pm.test(\"Check dynamic properties for payments\", function () {\r",
									"    var data = pm.response.json();\r",
									"     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
									"    var data = pm.response.json();\r",
									"     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Carts\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.data.carts.items).to.be.not.empty;\r",
									"    pm.expect(json.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query carts {\ncarts(storeId: \"{{storeId}}\") {\nitems {\nid\nname\ncustomerName\ncustomerId\n}\n\n}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "get all orders",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.order).to.not.eql(null);\r",
									"    pm.expect(data.data.order).to.be.an(\"object\");\r",
									"    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    number\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
								"variables": "{\n  \"id\": \"{{orderId}}\",\n  \"cultureName\": \"{{cultureName}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by short text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"purchase order number:test\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by html",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"html:<a>link</a>\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by decimal",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"decimal:3.00000\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by image",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"\\\"image\\\":\\\"link to image\\\"\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"datecreation:2021/07/24\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by long text",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"\\\"long text\\\":\\\"Test updated value text\\\"\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var data = pm.response.json();\r",
									"\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"integer:2\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders by bool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search orders by bool\", function () {\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.data.orders.items).to.be.not.empty;\r",
									"    pm.expect(data.errors).to.be.undefined;\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
								"variables": "{\n\"filter\": \"status:true\",\n\"cultureName\": \"en-US\"\n} "
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"get user\", function () {\r",
									"    var json = pm.response.json();\r",
									"    pm.expect(json.data.user).to.not.eql(null);\r",
									"    pm.expect(json.data.user).to.be.an(\"object\");\r",
									"    pm.expect(json.data.user.id).to.be.a(\"string\");\r",
									"    pm.expect(json.data.user.email).to.be.not.empty;\r",
									"    pm.expect(json.errors).to.be.undefined;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query user(\n$id: String\n$userName: String\n$email: String\n$loginProvider: String\n$providerKey: String\n) {\nuser(\nid: $id\nuserName: $userName\nemail: $email\nloginProvider: $loginProvider\nproviderKey: $providerKey\n) {\nid\nisAdministrator\nuserName\nemail\nstoreId\nuserName\nuserType\nroles{\nid\nname\ndescription\npermissions\n}\ncontact {\nid\nname\nfirstName\nlastName\nfullName\nname\nmemberType\nphones\naddresses{\nkey\naddressType\ncity\nfirstName\nlastName\nregionId\nregionName\n}\n}\n}\n}",
								"variables": "{\n//\"id\": \"9d30a8a0-9ecf-4dc7-b273-51f6739bec87\",\n//\"userName\": \"Maked2222\",\n\"email\": \"atz@virtoway.com\",\n\"loginProvider\":\"\",\n\"providerKey\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessTokenUrl",
				"value": "https://regression-platform.qa.govirto.com/connect/token",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "QAToken",
				"type": "string"
			},
			{
				"key": "password",
				"value": "store",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessToken",
				"value": "",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "password_credentials",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://qa-demovc3-admin.azurewebsites.net/graphql"
		},
		{
			"key": "storeId",
			"value": "Electronics"
		},
		{
			"key": "userId",
			"value": "5df8034f-ba2e-4051-a01f-23186b6fd712"
		},
		{
			"key": "currencyCode",
			"value": "USD"
		},
		{
			"key": "cultureName",
			"value": "en-US"
		},
		{
			"key": "cartName",
			"value": "default"
		},
		{
			"key": "filter",
			"value": "bool:true"
		},
		{
			"key": "categoryId",
			"value": "4b50b398ff584af9b6d69c082c94844b"
		},
		{
			"key": "contactId",
			"value": "71df1001-efeb-46e4-bafd-92f69da032df"
		},
		{
			"key": "orderId",
			"value": "ce1553ab-67f2-4c3c-8fbc-de485331a4bb"
		},
		{
			"key": "orderNumber",
			"value": "CO210628-00401"
		},
		{
			"key": "after",
			"value": "0"
		},
		{
			"key": "first",
			"value": "2"
		},
		{
			"key": "sort",
			"value": ""
		},
		{
			"key": "organizationId",
			"value": "3b85ef22-f9fa-43bc-83d1-cb6f1be4eb0f"
		},
		{
			"key": "productId",
			"value": "143e3eb3d1ee4a2bbf8fa0ecacfd1222"
		},
		{
			"key": "userName",
			"value": "admin"
		},
		{
			"key": "price",
			"value": "569.0"
		},
		{
			"key": "cartId",
			"value": "0d3256c8-de24-4a96-aee1-1923297f6f3c"
		},
		{
			"key": "cartType ",
			"value": "null"
		},
		{
			"key": "lineItemId",
			"value": "054e5622-64e4-4391-881d-3c19911f38cc"
		},
		{
			"key": "lineItemsComment",
			"value": "this text"
		},
		{
			"key": "secondCartId",
			"value": ""
		},
		{
			"key": "paymentId",
			"value": "b0e840a8-c340-4acb-8828-684f029cce25"
		},
		{
			"key": "shipmentId",
			"value": "1475d660-a11b-4c91-9525-3ed95bd43539"
		},
		{
			"key": "orderLineItemId",
			"value": "48876932-22e5-4624-af0f-7667d53b9753"
		},
		{
			"key": "orderPaymentId",
			"value": "dfb38a0c-b9ce-4e4d-b580-85dd80104653"
		},
		{
			"key": "orderShipmentId",
			"value": "5db3dd0f-a2c0-44bb-b100-22600b98e03b"
		},
		{
			"key": "paymentNumber",
			"value": "PI210628-00401"
		},
		{
			"key": "category_Id",
			"value": "53e239451c844442a3b2fe9aa82d95c8"
		},
		{
			"key": "propertyId",
			"value": "3851575f-f128-4c04-97a1-668d057b2eb4"
		},
		{
			"value": ""
		}
	]
}