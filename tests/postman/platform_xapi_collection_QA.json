{
  "info": {
    "_postman_id": "d7b26677-db76-4842-85de-998fb5705259",
    "name": "XAPI_QA_ENV",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "GetToken",
      "item": [
        {
          "name": "GetAdminToken",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    \r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Set admin token\", function () {\r",
                  "   \r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"AdminToken\", jsonData.access_token);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "1015ca9a-aa3c-4d7e-8301-632c9add6d80",
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {
              "content-type": true
            }
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              },
              {
                "key": "grand_type",
                "value": "",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "grant_type=password&scope=offline_access&username=admin&password=store",
              "options": {
                "raw": {
                  "language": "text"
                }
              }
            },
            "url": "{{adminurl}}/connect/token"
          },
          "response": []
        }
      ],
      "id": "387aaf42-456e-4842-a6f1-128b2b10761b"
    },
    {
      "name": "Contacts",
      "item": [
        {
          "name": "Assign user to organization (no permission)",
          "item": [
            {
              "name": "createOrganization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set organizationId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
                      "\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "1584bd72-7dd9-4749-841d-912f9e641124",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
                    "variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign\",\n\"addresses\": []\n}\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "createContact1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set contactId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "8a40e790-a5b6-422b-90f1-cb2db46283e4",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
                    "variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "add_user_1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "433c114f-fd3d-4f80-865d-a2d4745ccc78",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
                    "variables": "{\n\"command\":\n  {\n     \n    \"createdBy\": \"eXp16\",\n    \"email\": \"user11_Acc@mailto.plus\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check added user1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check user\", function () {\r",
                      "    var data = pm.response.json();\r",
                      " pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
                      "    pm.expect(data.errors).to.be.undefined;\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "7ad7677e-b7fb-4ed9-833b-ec35d371b00f",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "createContact 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set contactId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "7ddba594-4c85-4821-88a4-05bb5ca780e0",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
                    "variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "add_user_2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "e5baf0c1-2d28-4eff-b9f2-e5679442b38d",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
                    "variables": "{\n\"command\":\n  {\n \n    \"createdBy\": \"eXp16\",\n    \"email\": \"user223_Acc@mailto.plus\",\n    \"password\":\"{{userName2}}\",\n    \"userName\": \"{{userName2}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId2}}\"\n      \n  }\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check added user2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check user\", function () {\r",
                      "    var data = pm.response.json();\r",
                      " pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
                      "    pm.expect(data.errors).to.be.undefined;\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "9606bc75-ebed-4a6f-a12e-090e6b53022c",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Index Contact",
              "id": "a9106af4-2b51-494f-a635-a14f8520f70a",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}},{{contactId2}}\"]}]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/api/search/indexes/index"
              },
              "response": []
            },
            {
              "name": "Index Organization",
              "id": "44a9b59c-e6a6-4a3d-9720-71f97068862a",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/api/search/indexes/index"
              },
              "response": []
            },
            {
              "name": "Token_for_User1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set Token1\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"Token1\", jsonData.access_token\");\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "e13c80e4-8742-48b7-8754-58ab44685dcc",
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  },
                  {
                    "key": "grand_type",
                    "value": "",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
                  "options": {
                    "raw": {
                      "language": "text"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/connect/token"
              },
              "response": []
            },
            {
              "name": "Try to update Contact2 address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Access denied\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
                      "    console.log(jsonData.errors[0].message);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "  "
                    ]
                  }
                }
              ],
              "id": "1a829da2-bbd9-4cc1-b9d2-b4ff7aa3f533",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Token1}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId2}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Steven\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Checknot update address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Address wasn't add\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.contact.addresses).to.empty;\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "98e71368-bbf0-44e8-98c0-daf5f0c519df",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        addresses {email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n    }\r\n    }\r\n\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Try to update Contact2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Access denied\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
                      "    console.log(jsonData.errors[0].message);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "d1a24c3e-3069-4504-ae72-f84f671d94f1",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Token1}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"id\": \"{{contactId2}}\",\r\n    \"name\": \"UserA\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [],\r\n    \"fullName\": \"Contact22\",\r\n    \"firstName\": \"Contact22\",\r\n    \"lastName\": \"Contact22\"\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check not update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Contact wasn't update\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.contact.fullName).to.not.eql(\"Contact22\");\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "cb2a3ec2-cb62-4b96-a854-963283eb8d9c",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        \r\n    }\r\n    }\r\n\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Try to delete Contact2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Access denied\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.errors[0].message).to.be.not.empty;\r",
                      "    console.log(jsonData.errors[0].message);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "50e19a8e-07a6-4226-9e93-ff447a293e4e",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Token1}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}\r\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check delete",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"contact not deleted\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.contact.fullName).to.not.empty;\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "c0cb418c-6963-4996-bf51-ab12d7444a5a",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete users admin",
              "id": "61997e22-8370-4c62-9d3d-04182b6cf7ae",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete contact1 admin",
              "id": "44fa77db-99d1-4d8b-bac3-725761a3a511",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete contact2 admin",
              "id": "8d3f68a2-3756-498f-8d41-b788ec503d10",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete organization admin",
              "id": "33423bc9-a74a-4199-9fb0-7493c50aca20",
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
                  }
                },
                "url": {
                  "raw": "https://regression-platform.qa.govirto.com/api/members?ids={{organizationId1}}",
                  "protocol": "https",
                  "host": [
                    "regression-platform",
                    "qa",
                    "govirto",
                    "com"
                  ],
                  "path": [
                    "api",
                    "members"
                  ],
                  "query": [
                    {
                      "key": "ids",
                      "value": "{{organizationId1}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "d7ba9565-7cca-4d5d-a292-40088870f476",
          "auth": {
            "type": "bearer",
            "bearer": {
              "token": "{{AdminToken}}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "00da7581-1a80-42aa-b400-71f1545f6bc1",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1d35d3ae-b8bb-4cc3-830c-5b5e5a415d34",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Assign user to organization (permission)",
          "item": [
            {
              "name": "Add role \"organization manager\"",
              "id": "306ce77f-bdab-47c1-b341-1ba870416882",
              "request": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\"id\":\"{{roleId}}\",\"name\":\"{{roleName}}\",\"permissions\":[{\"id\":\"customer:read\",\"name\":\"customer:read\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:create\",\"name\":\"customer:create\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:access\",\"name\":\"customer:access\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:update\",\"name\":\"customer:update\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[{\"type\":\"AssociatedOrganizationsOnlyScope\",\"scope\":\"{{userId}}\"}],\"isChecked\":true},{\"id\":\"customer:delete\",\"name\":\"customer:delete\",\"groupName\":\"Customer\",\"assignedScopes\":[],\"availableScopes\":[],\"isChecked\":true}]}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/api/platform/security/roles"
              },
              "response": []
            },
            {
              "name": "createOrganization",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set organizationId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"organizationId1\", jsonData.data.createOrganization.id);\r",
                      "\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "2690d0b4-e599-4f16-bbf9-b49cd6700769",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
                    "variables": "{\n\"command\": {\n\"name\": \"ApiReg_Assign\",\n\"addresses\": []\n}\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "createContact1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set contactId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"contactId1\", jsonData.data.createContact.id);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "1505c1e1-cdbd-47b1-b68b-fbe01bfb65f9",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n\n}\n}",
                    "variables": "{\n\"command\": {\n\"name\": \"Contact1\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact1\",\n\"firstName\": \"Contact1\",\n\"lastName\": \"Contact1\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "add_user_1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "f8216e1c-7479-46f8-88f6-45402bdbf8da",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n    \n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
                    "variables": "{\n\"command\":\n  {\n     \n    \"createdBy\": \"eXp16\",\n    \"email\": \"user11_Acc@mailto.plus\",\n    \"password\":\"{{userName1}}\",\n    \"userName\": \"{{userName1}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId1}}\"\n      }\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check added user1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check user\", function () {\r",
                      "    var data = pm.response.json();\r",
                      " pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
                      "    pm.expect(data.errors).to.be.undefined;\r",
                      "});\r",
                      "pm.test(\"Set userId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"userId\", jsonData.data.contact.securityAccounts[0].id);\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "44947000-37e5-4297-a1e3-c00210388b25",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId1}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "add manager role to user1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "ef9c492a-a485-461e-8d33-95d56c02ad36",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{AdminToken}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation updateUser ($command: InputUpdateUserType!) {\r\n    updateUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n",
                    "variables": "{\"command\":{\r\n\"applicationUser\":{\r\n  \"userType\": \"Customer\",\r\n  \"roles\": [{   \r\n           \"name\":\"{{roleName}}\",\r\n           \"id\":\"{{roleId}}\",\r\n           \"permissions\":[]\r\n        }],\r\n\r\n  \"securityStamp\": \"RandomData\",\r\n  \"storeId\":\"Electronics\",\r\n  \"id\":\"{{userId1}}\",\r\n  \"email\": \"user11_Acc@mailto.plus\",\r\n  \"userName\":\"{{userName1}}\"\r\n\r\n}\r\n}\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "createContact 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set contactId\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"contactId2\", jsonData.data.createContact.id);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "7ba8dce0-2283-42d3-a21e-5ae29b977355",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
                    "variables": "{\n\"command\": {\n\"name\": \"Contact2\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"Contact2\",\n\"firstName\": \"Contact2\",\n\"lastName\": \"Contact2\",\n\"organizations\": \"{{organizationId1}}\"\n}\n}\n\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "add_user_2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "d9262528-96e2-4dfa-b66d-81aba2342805",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}\n\n",
                    "variables": "{\n\"command\":\n  {\n \n    \"createdBy\": \"eXp16\",\n    \"email\": \"user223_Acc@mailto.plus\",\n    \"password\":\"{{userName2}}\",\n    \"userName\": \"{{userName2}}\",\n    \"userType\": \"Customer\",\n    \"memberId\":\"{{contactId2}}\"\n      \n  }\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check added user2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Check user\", function () {\r",
                      "    var data = pm.response.json();\r",
                      " pm.expect(data.data.contact.securityAccounts).to.be.not.empty;\r",
                      "    pm.expect(data.errors).to.be.undefined;\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "46ea3253-bd9a-43be-ab65-b6a07c6c2345",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Index Contact",
              "id": "5c44c0d8-8a5f-4503-9223-ea3ad294b6d8",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId1}},{{contactId2}}\"]}]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/api/search/indexes/index"
              },
              "response": []
            },
            {
              "name": "Index Organization",
              "id": "a62c0f8f-8a44-4c89-8e17-ccca84ea7096",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/api/search/indexes/index"
              },
              "response": []
            },
            {
              "name": "Token_for_User1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Set Token1\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.collectionVariables.set(\"Token1\", jsonData.access_token);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "759bd842-62e9-4516-b2a1-5af862992a64",
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {
                  "content-type": true
                }
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  },
                  {
                    "key": "grand_type",
                    "value": "",
                    "type": "text",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "grant_type=password&scope=offline_access&username={{userName1}}&password={{userName1}}",
                  "options": {
                    "raw": {
                      "language": "text"
                    }
                  }
                },
                "url": "https://regression-platform.qa.govirto.com/connect/token"
              },
              "response": []
            },
            {
              "name": "Try to update Contact2 address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Address was add\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.updateMemberAddresses.addresses).to.not.empty;\r",
                      "});\r",
                      "\r",
                      "  "
                    ]
                  }
                }
              ],
              "id": "5f22968f-4a6e-4bd9-9118-8a1839b6061c",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Token1}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation updateMemberAddresses ($command: InputUpdateMemberAddressType!) {\r\n   updateMemberAddresses (command: $command) {\r\n       name\r\n       id\r\n        addresses { key city countryCode countryName email firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n   }\r\n}\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"memberId\": \"{{contactId2}}\",\r\n    \"addresses\": [{\r\n        \"addressType\": 1,\r\n        \"city\": \"Thousand oaks 25\",\r\n        \"countryCode\": \"USA\",\r\n        \"countryName\": \"United States\",\r\n        \"email\": \"alivemenone@gmail.com\",\r\n        \"firstName\": \"Stevewn\",\r\n        \"key\": \"3b6fddca-6024-4df9-9e2a-5f13329202cb\",\r\n        \"lastName\": \"Woodward\",\r\n        \"line1\": \"1888, colgate dr\",\r\n        \"name\": \"Steven Woodward  1888, colgate dr Thousand oaks California 91360 United States\",\r\n        \"postalCode\": \"91360\",\r\n        \"regionId\": \"CA\",\r\n        \"regionName\": \"California\"\r\n    }]\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check update address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Address was add\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.contact.addresses).to.not.empty;\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "7b1a29ef-6c7e-46fb-bf24-712acf12a3b2",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        addresses { firstName  lastName line1 line2 middleName name phone postalCode regionId regionName zip }\r\n    }\r\n    }\r\n\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Try to update Contact2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Contact updated\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.updateContact.fullName).to.eql(\"Contact22\");\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "2e145701-9f1f-4864-ae11-89823e0f3785",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Token1}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation updateContact ( $command: InputUpdateContactType!) {\r\n    updateContact (command: $command) {\r\n       fullName\r\n        id\r\n        lastName\r\n        name\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"id\": \"{{contactId2}}\",\r\n    \"name\": \"UserA\",\r\n    \"memberType\": \"Contact\",\r\n    \"addresses\": [],\r\n    \"fullName\": \"Contact22\",\r\n    \"firstName\": \"Contact22\",\r\n    \"lastName\": \"Contact22\"\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Contact updated\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.contact.fullName).to.eql(\"Contact22\");\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "0c974c99-575a-46e1-bbd3-59217e3648f1",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n        \r\n    }\r\n    }\r\n\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Try to delete Contact2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ]
                  }
                }
              ],
              "id": "efa4cb4d-527f-4739-8d47-7ef39445037c",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Token1}}"
                  }
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}\r\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Check delete",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"contact deleted\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData.data.contact).to.null;\r",
                      "});\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ]
                  }
                }
              ],
              "id": "20e8469c-22c1-4121-b27e-9cf037f388b2",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "query contact {\r\n    contact (id: \"{{contactId2}}\") {\r\n        fullName\r\n        id\r\n    securityAccounts{\r\n      userName\r\n      email\r\n    }\r\n    }\r\n}\r\n",
                    "variables": ""
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete users admin",
              "id": "69b56bdf-551e-4981-9d55-d93cf6ed17f2",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteUsers ($command: InputDeleteUserType!) {\r\n    deleteUsers (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n    }\r\n}\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"userNames\": [\r\n      \"{{userName1}}\",\"{{userName2}}\"\r\n    ]\r\n  }\r\n}\r\n"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete contact1 admin",
              "id": "01a4aba7-57da-4fc3-bc47-2691c6d298bb",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId1}}\"\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete contact2 admin",
              "id": "b3db683e-8c1f-43c0-97dd-86a9b08cad78",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
                  }
                },
                "url": "{{url}}"
              },
              "response": []
            },
            {
              "name": "Delete organization admin",
              "id": "c8b11479-bb08-4e46-9a68-a4834fee7e94",
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "graphql",
                  "graphql": {
                    "query": "mutation deleteContact ($command: InputDeleteContactType!) {\r\n    deleteContact (command: $command)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                    "variables": "{\r\n  \"command\": {\r\n    \"contactId\": \"{{contactId2}}\"\r\n  }\r\n}"
                  }
                },
                "url": {
                  "raw": "https://regression-platform.qa.govirto.com/api/members?ids={{organizationId1}}",
                  "protocol": "https",
                  "host": [
                    "regression-platform",
                    "qa",
                    "govirto",
                    "com"
                  ],
                  "path": [
                    "api",
                    "members"
                  ],
                  "query": [
                    {
                      "key": "ids",
                      "value": "{{organizationId1}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "id": "239eed07-6bf8-4243-9eab-3488f511bfd6",
          "auth": {
            "type": "bearer",
            "bearer": {
              "token": "{{AdminToken}}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "87d2c7f4-e46a-4dbc-b56c-2123b20543db",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "64b02875-db77-415c-9172-eaba04fd9ff5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "createContact",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Set contactId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"contactId\", jsonData.data.createContact.id);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "99035f3b-2cb3-4edc-bff6-fc94dbf39296",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createContact ($command: InputCreateContactType!) {\ncreateContact (command: $command) {\nfullName\nid\nlastName\nname\n}\n}",
                "variables": "{\n\"command\": {\n\"name\": \"{{contactName}}\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA\",\n\"firstName\": \"UserA\",\n\"lastName\": \"UserA\"\n}\n}\n\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "updateContact",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CheckId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateContact.id).to.eql(pm.collectionVariables.get(\"contactId\"));\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check changes\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateContact.fullName).to.eql(\"UserA111\");\r",
                  "    pm.expect(jsonData.data.updateContact.lastName).to.eql(\"UserB\");\r",
                  "    pm.expect(jsonData.data.updateContact.name).to.eql(\"UserA111\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Address is emppty\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateContact.addresses.items).to.be.empty;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ce49e6a5-03eb-44b5-8d78-82f5ef4b1b14",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateContact ( $command: InputUpdateContactType!) {\nupdateContact (command: $command) {\nfullName\nid\nlastName\nname\naddresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }}\n}\n}",
                "variables": "{\n\"command\": {\n\"id\": \"{{contactId}}\",\n\"name\": \"UserB\",\n\"memberType\": \"Contact\",\n\"addresses\": [],\n\"fullName\": \"UserA111\",\n\"firstName\": \"UserB\",\n\"lastName\": \"UserB\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "updateAddresses",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Address was add\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateContact.addresses.items).to.not.empty;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "9c781fb4-d60d-4544-aeaa-3ad819963fe5",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateContact ($command: InputUpdateContactType!) {\n    updateContact (command: $command) {\n         addresses{\n          items{\n          addressType\n          key\n          city\n          countryCode\n          countryName\n          email\n          firstName\n          lastName\n          id\n          line1\n          line2\n          middleName\n          name phone\n          postalCode\n          regionId\n          regionName\n          zip\n          }\n        }\n        }\n    }",
                "variables": "{\n\"command\": {\n\"id\":\"{{contactId}}\",\n\"firstName\":\"UserB\",\n\"lastName\":\"UserB\",\n\"addresses\": [{\n\"addressType\": 2,\n\"city\": \"1Thousand oaks 25\",\n\"countryCode\": \"USA\",\n\"countryName\": \"United States\",\n\"email\": \"alivemenone@gmail.com\",\n\"firstName\": \"Steven\",\n\"lastName\": \"Woodward\",\n\"line1\": \"1888, colgate dr\",\n\"name\": \"Steven Woodward 1888, colgate dr Thousand oaks California 91360 United States\",\n\"postalCode\": \"91360\",\n\"regionId\": \"CA\",\n\"regionName\": \"California\"\n}]\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Update contact dynamic property",
          "id": "87894167-ceeb-4848-aa0f-517856df138c",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname\r\n        dynamicProperties {\r\n          name value\r\n        }\r\n    }\r\n}",
                "variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"{{contactId}}\",\r\n    \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Decimal_0_0_0\",\r\n          \"value\": \"122.50000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_0_0\",\r\n          \"value\": \"Newtexthtml\"\r\n        },\r\n                {\r\n          \"name\": \"Married\",\r\n          \"value\": \"false\"\r\n        },\r\n        {\r\n         \"name\": \"Sex\",\r\n          \"value\": \"Male\"\r\n        },\r\n        {\r\n        \"name\": \"occupation\",\r\n        \"value\":\"Mining Engineer\"\r\n        }, \r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"aDefault\"\r\n        },            \r\n            {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": \"30\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_1_0_0\",\r\n          \"value\": \"22\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Integer_0_0_0\",\r\n          \"value\": \"22\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"html11\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"html12\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_Html_0_1_0\",\r\n          \"value\": \"html10\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Boolean_0_0_0\",\r\n          \"value\": \"True\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_DateTime_0_0_0\",\r\n          \"value\": \"08/01/2021 00:00:00\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": \"15.30000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Decimal_1_0_0\",\r\n          \"value\": \"17.50000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_0_0\",\r\n          \"value\": \"very loong text\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_0\",\r\n          \"value\": \"super_short\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_Image_0_0_0\",\r\n          \"value\": \"link to image\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_LongText_0_1_0\",\r\n          \"value\": \"this is loooong text for FR languages\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_0_1\",\r\n          \"value\": \"short_value1\"          \r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"value1V\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n         \"name\": \"CustomerModule_Contact_ShortText_0_1_1\",\r\n          \"value\": \"value2V\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"short_text value for en-US\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n          {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n          \"value\": \"short_text value for de-DE\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_0_1_0\",\r\n           \"value\": \"short_text value for fr-FR\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"valueV1\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_0_0\",\r\n          \"value\": \"valueV2\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"value22\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"value22\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_0\",\r\n          \"value\": \"value11\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Contact_ShortText_1_1_1\",\r\n          \"value\": \"88629653-094f-476e-8be7-50bca237e132\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        }\r\n  \t]\r\n  }\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Index Contact",
          "id": "17eda6b3-d7ce-44ff-ac27-b75d88372222",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{contactId}}\"]}]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminurl}}/api/search/indexes/index"
          },
          "response": []
        },
        {
          "name": "contacts by bool",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by bool\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "3acaffc3-7076-457d-8abf-61fe644d729a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Boolean_0_0_0:true\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by integer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by integer\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "bdeac7cf-7d18-4053-a1e2-bcf1b4c1a46d",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Integer_1_0_0:22\"\r\n      }\r\n\r\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by long text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by long text\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "e25f0fa4-ac50-43b0-8e25-322706746530",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_LongText_0_0_0\\\":\\\"very loong text\\\"\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by date",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by date\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "6f68e8fd-968d-43f9-953d-6df693a747e5",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"date:2021-07-28\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by image",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by image\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "fc332265-3ecc-499c-bdf5-0a208a14654f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_Image_0_0_0\\\":\\\"link to image\\\"\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by decimal",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by decimal\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "9115a880-73b3-4ca6-ae0e-3f0f1c19f5f8",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Decimal_0_0_0:122.50000\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by html",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by html\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "63507ad3-7492-47f9-9e38-ae6a39cbde18",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"CustomerModule_Contact_Html_0_1_0:html11\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts by short text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search contacts by short text\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d6b63103-890b-4672-a6c5-b7c43d104436",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Contact_ShortText_1_1_0\\\":\\\"value22\\\"\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Your test name\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.contact).to.not.eql(null);\r",
                  "    pm.expect(json.data.contact).to.be.an(\"object\");\r",
                  "    pm.expect(json.data.contact.id).to.be.a(\"string\");\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "4ca76ebb-07cb-4cc2-83f8-9133e3e48461",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contact ( $id: String!) {\n    contact (id: $id) {\n  id\n    dynamicProperties\n    {\n      dictionaryItem\n      {\n       id\n      label\n      }\n      name\n      value\n    }\n  }\n    }\n",
                "variables": "{\n  \"id\": \"{{contactId}}\"\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "contacts",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search orders\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.contacts.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "77649276-44ed-4833-ac5f-8faf67239ec0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query contacts($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\ncontacts(searchPhrase:$searchPhrase, sort: $sort, first: $first, after:$after){\r\ntotalCount items{\r\nid\r\nname\r\ndynamicProperties(cultureName: $cultureName) {\r\nname value valueType\r\ndynamicProperty {\r\nname label valueType\r\ndictionaryItems(cultureName: $cultureName){ items { label name }}\r\n}\r\ndictionaryItem {\r\nlabel name id\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"after\": \"0\",\r\n\"first\": 20,\r\n\"sort\": \"name:desc\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "deleteContact",
          "id": "b6709a0f-fafc-4652-99e2-5a2c416af91d",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation deleteContact ($command: InputDeleteContactType!) {\n    deleteContact (command: $command)\n}",
                "variables": "{\n  \"command\": {\n    \"contactId\": \"{{contactId}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "c8ea9980-2294-4b49-96ed-59ea7f24e8ad",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "d8858f7d-0588-4c08-b411-397b84f8d170",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2bfc518c-69bb-4b0c-a45d-6c1b7eac670a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Organizations",
      "item": [
        {
          "name": "createOrganization",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Set organizationId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"organizationId\", jsonData.data.createOrganization.id);\r",
                  "\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "817b2baa-77c9-451c-8df8-df2d56881ddc",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrganization ($command: InputCreateOrganizationType!) {\ncreateOrganization (command: $command) {\nid\nname\n}\n}",
                "variables": "{\n\"command\": {\n\"name\": \"OrganizationxApiReg123456\",\n\"addresses\": []\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "updateOrganization",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CheckId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateOrganization.id).to.eql(pm.collectionVariables.get(\"organizationId\"));\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check changes\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateOrganization.name).to.eql(\"OrganizationxApiReg_Updat2e1\");\r",
                  "\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "66d11514-1f4a-454e-a6b8-9c2de6796e0f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateOrganization ($after: String, $first: Int, $searchPhrase: String, $after1: String, $first1: Int, $searchPhrase1: String, $command: InputUpdateOrganizationType!) {\n    updateOrganization (command: $command) {\n        businessCategory\n        contacts (after: $after1, first: $first1, searchPhrase: $searchPhrase1) {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n\t\t\t\t\t\t\t\t\t\t}\n                    }\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n\t\t\t\t\t\t\t\t\t\titems{\n                    businessCategory\n                    contacts (after: $after, first: $first, searchPhrase: $searchPhrase) {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
                "variables": "{\n\"command\": {\n\"id\": \"{{organizationId}}\",\n\"name\": \"OrganizationxApiReg_Updat2e1\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Update_organizatiom_dynamic_property",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "d227811a-8914-4189-8962-8dfca1cd6bf9",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateMemberDynamicProperties($command: InputUpdateMemberDynamicPropertiesType!) {\r\n    updateMemberDynamicProperties(command: $command) {\r\n    \t\tname \r\n        dynamicProperties {\r\n          name value \r\n        }\r\n    }\r\n}",
                "variables": "{\r\n  \"command\": {\r\n   \"memberId\":\"{{organizationId}}\",\r\n    \"dynamicProperties\": [\r\n         {\r\n          \"name\": \"CustomerModule_Organization_Decimal_0_0_0\",\r\n          \"value\": \"112.00000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_0_0\",\r\n          \"value\": \"Org_texthtmlHHH1\"\r\n        }, \r\n        {\r\n          \"name\": \"Default shipping address\",\r\n          \"value\": \"aDefault1\"\r\n        },  \r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_0_0_0\",\r\n          \"value\": \"40001\"\r\n        },          \r\n            {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\": \"801\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Integer_1_0_0\",\r\n          \"value\": \"901\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"textHHHH001=en1\",\r\n          \"cultureName\":\"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"textHHHH002=de1\",\r\n          \"cultureName\":\"de-DE\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Html_0_1_0\",\r\n          \"value\": \"textHHHH003=fr1\",\r\n          \"cultureName\":\"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Boolean_0_0_0\",\r\n          \"value\": \"false\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_DateTime_0_0_0\",\r\n          \"value\": \"05/05/2021 11:00:01\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\r\n          \"value\": \"661.20000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Decimal_1_0_0\",\r\n          \"value\": \"551.50000\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_LongText_0_0_0\",\r\n          \"value\": \"ndkvncvkdvnjednvks\\nmdklvndekvn11\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_0\",\r\n          \"value\": \"Go_org1\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_Image_0_0_0\",\r\n          \"value\": \"https://regression-platform.qa.govirto.com/cms-content/assets/catalog/Camcorders/102320611.jpg\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_LongText_0_1_0\",\r\n          \"value\": \"this is long text for FR languages1\",\r\n                   \"cultureName\":\"fr-FR\"\r\n        },              \r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_0_1\",\r\n          \"value\": \"11111111122\"          \r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_1\",\r\n          \"value\": \"value00111\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n         \"name\": \"CustomerModule_Organization_ShortText_0_1_1\",\r\n          \"value\": \"value00211\",\r\n\t\t\t\t\t\"cultureName\": \"de-DE\"\r\n        },        \r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\r\n          \"value\": \"text value for en-US1\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_0_1_0\",\r\n           \"value\": \"text value for fr-FR1\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\r\n          \"value\": \"value11\"\r\n        },\r\n {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_0_0\",\r\n          \"value\": \"value21\"\r\n},\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"value21\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"value21\",\r\n\t\t\t\t\t\"cultureName\": \"fr-FR\"\r\n        },\r\n    {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_0\",\r\n          \"value\": \"value11\",\r\n\t\t\t\t\t\"cultureName\": \"en-US\"\r\n        },\r\n        {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"shortandmulti011\",\r\n\t\t    \"cultureName\": \"en-US\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"shortandmulti011\",\r\n\t\t    \"cultureName\": \"de-DE\"\r\n        },\r\n         {\r\n          \"name\": \"CustomerModule_Organization_ShortText_1_1_1\",\r\n          \"value\": \"shortandmulti011\",\r\n\t\t    \"cultureName\": \"fr-FR\"\r\n        }\r\n  \t]\r\n  }\r\n}"
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "Index Organization",
          "id": "70daee08-4cab-4db5-b29e-1d52570454eb",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[{\"documentType\":\"Member\",\"documentIds\":[\"{{organizationId}}\"]}]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminurl}}/api/search/indexes/index"
          },
          "response": []
        },
        {
          "name": "Organizations by bool",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by bool\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ab0b4dff-18c5-4b64-8f61-7780a1fa86c0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Boolean_0_0_0:false\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by integer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by integer\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "14bd2ed5-59cd-40e4-b5b3-05dfb08a4882",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n     \"searchPhrase\": \"CustomerModule_Organization_Integer_0_0_0:40001\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by long text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by long text\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c880f8c3-f460-46d3-a237-48f827d681e5",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"\\\"CustomerModule_Organization_LongText_0_0_0\\\":\\\"ndkvncvkdvnjednvks\\nmdklvndekvn11\\\"\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by date",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by date\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c5ac747e-09a9-4b16-8eea-bc87f80b4d03",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"\\\"CustomerModule_Organization_DateTime_0_0_0\\\":\\\"05/05/2021 11:00:01\\\"\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by image",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by image\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "95a98213-31d5-4e81-b0dd-85c84340420e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_Image_0_0_0\\\":\\\"https://regression-platform.qa.govirto.com/cms-content/assets/catalog/Camcorders/102320611.jpg\\\"\"\r\n}\r\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by decimal",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by decimal\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "81e241c3-81ba-4a6f-9020-0e4297cf62e1",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Decimal_0_0_0:112.00000\"\r\n\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by html",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by html\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "a9ebc58a-6d0d-48c1-bf4c-7bfab8819677",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"searchPhrase\": \"CustomerModule_Organization_Html_0_0_0:Org_texthtmlHHH1\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations by short text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search organizations by short text\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "2bef13c0-31db-4a32-96dc-992cb3728ce4",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n\"cultureName\": \"en-US\",\r\n\"searchPhrase\": \"\\\"CustomerModule_Organization_ShortText_0_0_0\\\":\\\"Go_org1\\\"\"\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Get organization\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.organization).to.not.eql(null);\r",
                  "    pm.expect(json.data.organization).to.be.an(\"object\");\r",
                  "    pm.expect(json.data.organization.id).to.be.a(\"string\");\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1a89ecbb-4e2b-4759-a418-3093d2f8c81f",
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "addTokenTo": "header",
                "accessTokenUrl": "https://localhost:5001/connect/token",
                "username": "admin",
                "password": "store",
                "tokenType": "Bearer"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
                "variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Organizations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get all organizations\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organizations.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "7409be03-639e-48d3-8395-00152a6bc4f8",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organizations($searchPhrase: String, $cultureName: String, $sort: String, $after: String, $first: Int){\r\n  organizations (searchPhrase:$searchPhrase, sort: $sort, first: $first, after: $after){ \r\n    totalCount items{\r\n      name id\r\n      dynamicProperties(cultureName: $cultureName) {\r\n        name value valueType\r\n        dynamicProperty {\r\n          name label valueType\r\n          dictionaryItems(cultureName: $cultureName){ items { label name }}\r\n        }\r\n        dictionaryItem {\r\n          label name id\r\n        }\r\n      }\r\n    } \r\n  }\r\n}",
                "variables": "{\r\n  \"cultureName\": \"en-US\",\r\n    \"after\": \"0\",\r\n    \"first\": 20,\r\n    \"sort\": \"name:desc\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "deleteOrganization",
          "id": "6f054283-f698-461a-bb01-83feda25f7b9",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://regression-platform.qa.govirto.com/api/organizations?ids={{organizationId}}",
              "protocol": "https",
              "host": [
                "regression-platform",
                "qa",
                "govirto",
                "com"
              ],
              "path": [
                "api",
                "organizations"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{organizationId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check after delete",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check organization sfter delete\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.organization).to.be.null\r",
                  "});"
                ]
              }
            }
          ],
          "id": "01eca15c-dcca-4287-9b1d-88df7813a70a",
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "addTokenTo": "header",
                "accessTokenUrl": "https://localhost:5001/connect/token",
                "username": "admin",
                "password": "store",
                "tokenType": "Bearer"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query organization ($id: String!, $userId: String) {\n    organization (id: $id, userId: $userId) {\n    dynamicProperties\n    {\n      value\n      valueType\n      name\n      dynamicProperty\n      {\n        valueType\n        id\n        label\n        displayOrder\n      dictionaryItems\n        {\n          items\n          {\n            id\n            name\n            label\n          }\n        }\n      }\n      dictionaryItem\n      {\n        id\n        label\n      name\n      }\n    }\n  \n        businessCategory\n        contacts  {\n            edges {\n                cursor\n                node {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizations {\n                        items{\n                        businessCategory\n                        description\n                        emails\n                        groups\n                        id\n                        memberType\n                        name\n                        outerId\n                        ownerId\n                        parentId\n                        phones\n                        seoObjectType\n                    }}\n                    organizationsIds\n                    outerId\n                    phones\n                    securityAccounts {\n                        accessFailedCount\n                        createdBy\n                        createdDate\n                        email\n                        emailConfirmed\n                        id\n                        isAdministrator\n                        lockoutEnabled\n                        lockoutEnd\n                        memberId\n                        modifiedBy\n                        modifiedDate\n                        normalizedEmail\n                        normalizedUserName\n                        passwordExpired\n                        permissions\n                        phoneNumber\n                        phoneNumberConfirmed\n                        photoUrl\n                        securityStamp\n                        storeId\n                        twoFactorEnabled\n                        userName\n                        userType\n                    }\n                }\n            }\n            items {\n                birthDate\n                firstName\n                fullName\n                id\n                lastName\n                memberType\n                middleName\n                name\n                organizationId\n                organizations {\n                    items{\n                    businessCategory\n                    contacts {\n                        totalCount\n                    }\n                    description\n                    emails\n                    groups\n                    id\n                    memberType\n                    name\n                    outerId\n                    ownerId\n                    parentId\n                    phones\n                    seoObjectType\n                }}\n                organizationsIds\n                outerId\n                phones\n                securityAccounts {\n                    accessFailedCount\n                    contact {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    createdBy\n                    createdDate\n                    email\n                    emailConfirmed\n                    id\n                    isAdministrator\n                    lockoutEnabled\n                    lockoutEnd\n                    memberId\n                    modifiedBy\n                    modifiedDate\n                    normalizedEmail\n                    normalizedUserName\n                    passwordExpired\n                    permissions\n                    phoneNumber\n                    phoneNumberConfirmed\n                    photoUrl\n                    roles {\n                        description\n                        id\n                        name\n                        normalizedName\n                        permissions\n                    }\n                    securityStamp\n                    storeId\n                    twoFactorEnabled\n                    userName\n                    userType\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n                hasPreviousPage\n                startCursor\n            }\n            totalCount\n        }\n        description\n        emails\n        groups\n        id\n        memberType\n        name\n        outerId\n        ownerId\n        parentId\n        phones\n        seoObjectType\n    }\n}",
                "variables": "{\n  \"id\": \"{{organizationId}}\"\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "04fd14a1-cc25-48e5-a97f-f86022c3fb34",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "e36bbaba-b99e-4186-945c-00ad217532f6",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4d1611c5-73d1-443c-b6dc-61f19fc96c60",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Cart",
      "item": [
        {
          "name": "carts",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Carts\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.carts.items).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"cartId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    pm.collectionVariables.set(\"cartId\",jsonData.data.carts.items[0].id);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "2c33ea3e-38af-495a-89d1-d0a028ea18bc",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query carts {\ncarts(storeId: \"{{storeId}}\") {\nitems {\nid\nname\ncustomerName\ncustomerId\n}\n\n}\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "clearCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"clearCart\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.clearCart).to.be.not.empty;\r",
                  "    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "3a2ee04f-e411-4f78-adda-83bab7d2de1f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "add items",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check items\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "52238054-06c5-4020-9d61-3c031c5265eb",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
                "variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{userId}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }   \r\n    ]\r\n  }\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "cartAfterAddItems",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/\r",
                  "pm.test(\"Set lineitemId\", function(){\r",
                  " var jasonData =pm.response.json();  \r",
                  "pm.collectionVariables.set(\"lineItemId\", jasonData.data.cart.items[0].id);\r",
                  "pm.collectionVariables.set(\"cartId\", jasonData.data.cart.id);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "da5b4569-7e01-4598-94e6-63ad4eff15c3",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "removeCartItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check after remove lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.removeCartItem).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.removeCartItem.items).to.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "a656ecbe-da2d-4538-8e84-20a7f9c904c4",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation removeCartItem ($command: InputRemoveItemType!) {\nremoveCartItem (command: $command) {\nid\nitems{\nid\nquantity\nproduct{\nid\n}\n}\n}\n}",
                "variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check additem\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.addItem).to.not.eql(null);     \r",
                  "pm.expect(jsonData.data.addItem.id).to.be.a(\"string\");    \r",
                  "pm.expect(jsonData.data.addItem.items[0]).to.be.an(\"object\");\r",
                  "pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Set lineitemId\", function(){\r",
                  " var jasonData =pm.response.json();  \r",
                  " pm.collectionVariables.set(\"lineItemId\", jasonData.data.addItem.items[0].id);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "9f04915c-7180-43dc-bac0-3971ff3ebbbf",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation addItem($command: InputAddItemType!) {\naddItem(command: $command) {\nid\nitems {\nid\nquantity\nlistPrice{\namount\n}\nnote\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userName}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"productId\": \"{{productId}}\",\n    \"quantity\": 5,\n    \"price\": 100.00,\n    \"comment\": \"{{comment}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "changeCartItemQuantity",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check after change qty\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.changeCartItemQuantity).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.changeCartItemQuantity.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.data.changeCartItemQuantity.items).to.not.empty\r",
                  "    pm.expect(data.data.changeCartItemQuantity.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "053d0dbb-e002-40d0-b29f-278e5b9adf8c",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation changeCartItemQuantity ($command: InputChangeCartItemQuantityType!) {\nchangeCartItemQuantity (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
                "variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"quantity\": 2\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "changeCartItemPrice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check after change price\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.changeCartItemPrice).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.changeCartItemPrice.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.data.changeCartItemPrice.items).to.not.empty\r",
                  "    pm.expect(data.data.changeCartItemPrice.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
                  "     pm.expect(data.data.changeCartItemPrice.items[0].listPrice.amount).to.exist\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "74b7e585-3f21-4221-abdd-6d4d4ee3f9ff",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation changeCartItemPrice($command: InputChangeCartItemPriceType!) {\nchangeCartItemPrice(command: $command) {\n    id\nitemsQuantity\ntotal {\namount\n}\nitems {\nid\nlistPrice{\namount\n}\nsalePrice{\namount\n}\nproduct {\nid\nprice {\nactual {\namount\n}\nlist {\namount\n}\nsale {\namount\n}\n}\n}\ndiscountTotal {\namount\n}\n}\n}\n}",
                "variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"price\": 6400\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "changeComment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Add comment\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.changeComment.comment).to.be.a(\"string\");     \r",
                  "pm.expect(jsonData.data.changeComment.id).to.be.a(\"string\");    \r",
                  "pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "231bffd7-10ca-41b5-b742-dd9baa38faaf",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation changeComment ($command: InputChangeCommentType) {\nchangeComment (command: $command) {\nid\nname\ncomment\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"comment\": \"Text\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "changeCartItemComment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check after change lineitems comment\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.changeCartItemComment).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.changeCartItemComment.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.data.changeCartItemComment.items).to.not.empty\r",
                  "    pm.expect(data.data.changeCartItemComment.items[0].id).equal(pm.collectionVariables.get(\"lineItemId\"))\r",
                  "     pm.expect(data.data.changeCartItemComment.items[0].note).equal(pm.collectionVariables.get(\"lineItemsComment\"))\r",
                  "    \r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ddf2e913-7ad0-4be6-bbf8-1f5e5eef6671",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation changeCartItemComment($command: InputChangeCartItemCommentType) {\nchangeCartItemComment(command: $command) {\nid\ncomment\nitems {\nid\nlistPrice {\namount\n}\nnote\n}\n}\n}",
                "variables": "{\n\"command\":{\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"lineItemId\": \"{{lineItemId}}\",\n\"comment\": \"{{lineItemsComment}}\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterAddItem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/"
                ]
              }
            }
          ],
          "id": "2ca8cdaf-9b26-4328-a558-eab54236dc6a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Set cartId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"cartId\", jsonData.data.cart.id);\r",
                  "});\r",
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "36d157a8-5e6e-4bd6-9015-15af73a07662",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic property to cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Add dynamicproperty to cart\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
                  "pm.expect(jsonData.data.updateCartDynamicProperties.id).to.be.a(\"string\");    \r",
                  "pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[0]).to.be.an(\"object\");\r",
                  "pm.expect(jsonData.data.updateCartDynamicProperties.dynamicProperties[3].value).to.be.an(\"string\");\r",
                  "pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "0536a086-33a6-4d54-b109-9a827ce23322",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateCartDynamicProperties($command: InputUpdateCartDynamicPropertiesType!) {\r\nupdateCartDynamicProperties(command: $command) {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n} ",
                "variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",  \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Boolean_0_0_0\",\r\n\"value\": \"false\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Decimal_0_0_0\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_ShoppingCart_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for lineitems in cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Add dynamicproperties for lineitems\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.updateCartDynamicProperties).to.not.eql(null);     \r",
                  "pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0]).to.be.an(\"object\");\r",
                  "pm.expect(jsonData.data.updateCartItemDynamicProperties.items[0].dynamicProperties[0].value).to.be.a(\"string\");\r",
                  "pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "dad2ffb4-a38b-4152-9429-bd41440cabd9",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateCartItemDynamicProperties($command: InputUpdateCartItemDynamicPropertiesType!) {\r\nupdateCartItemDynamicProperties(command: $command) {\r\nid\r\nitems {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"lineItemId\": \"{{lineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Boolean_0_0_0\",\r\n\"value\": \"false\"\r\n},{\r\n\"name\": \"CartModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Decimal_0_0_0\",\r\n\"value\": \"45.0\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"7\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterAddDynamicPropertiesLineItems",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/"
                ]
              }
            }
          ],
          "id": "bf9b90b7-86f1-4429-adc7-d982208beb3e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addOrUpdateCartPayment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"AddOrUpdatePayment\", function(){\r",
                  "    var jSonData = pm.response.json();\r",
                  "    pm.expect(jSonData.data.addOrUpdateCartPayment.id).to.not.eql(null);\r",
                  "    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).to.be.an(\"object\");\r",
                  "    pm.expect(jSonData.data.addOrUpdateCartPayment.payments[0]).not.empty;\r",
                  "    pm.collectionVariables.set(\"paymentId1\",jSonData.data.addOrUpdateCartPayment.payments[0].id);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "984d2bf9-9176-49c7-a386-df43c5522a82",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation addOrUpdateCartPayment($command: InputAddOrUpdateCartPaymentType!) {\naddOrUpdateCartPayment(command: $command) {\nid\npayments {\nid\nouterId\npaymentGatewayCode\nprice {\namount\n}\namount {\namount\n}\nbillingAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
                "variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": null,\n\"payment\": {\n\"id\": \"{{$randomUUID}}\",\n\"outerId\": \"paymentouterud_default_test_1\",\n\"paymentGatewayCode\": \"DefaultManualPaymentMethod\",\n\"billingAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"id\": \"KeyTest\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 1050,\n\"amount\": 1050\n}\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for payments in cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Add dynamicPropertiesPayment\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.updateCartPaymentDynamicProperties).to.not.eql(null);     \r",
                  "pm.expect(jsonData.data.updateCartPaymentDynamicProperties.id).to.be.a(\"string\");    \r",
                  "pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0]).to.be.an(\"object\");\r",
                  "pm.expect(jsonData.data.updateCartPaymentDynamicProperties.payments[0].dynamicProperties).to.be.not.empty;\r",
                  "pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ab1e4a97-57f7-4b98-8255-fa4e2834ce00",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateCartPaymentDynamicProperties($command: InputUpdateCartPaymentDynamicPropertiesType!) {\r\nupdateCartPaymentDynamicProperties(command: $command) {\r\nid\r\npayments {\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"paymentId\": \"{{paymentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},{\r\n\"name\": \"CartModule_Payment_Boolean_0_0_0\",\r\n\"value\": \"false\"\r\n},{\r\n\"name\": \"CartModule_Payment_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_Payment_Decimal_0_0_0\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_Payment_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_Payment_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_Payment_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Payment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterAddPaymentDynamicProperties",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "/*\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "*/"
                ]
              }
            }
          ],
          "id": "c95125fc-62dd-4cb8-b193-14557237f2f8",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addOrUpdateCartShipment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"AddOrUpdateShipment\", function(){\r",
                  "    var jSonData = pm.response.json();\r",
                  "    pm.expect(jSonData.data.addOrUpdateCartShipment.id).to.not.eql(null);\r",
                  "    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).to.be.an(\"object\");\r",
                  "    pm.expect(jSonData.data.addOrUpdateCartShipment.shipments[0]).not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.collectionVariables.set(\"shipmentId1\",jSonData.data.addOrUpdateCartShipment.shipments[0].id);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d8dc899f-e745-435f-bf4b-b898a5bdbf72",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation addOrUpdateCartShipment($command:InputAddOrUpdateCartShipmentType!) {addOrUpdateCartShipment(command: $command) {\nshipments {\nid\nshipmentMethodCode\nshipmentMethodOption\nfulfillmentCenterId\nprice{\namount\n}\ndeliveryAddress {\nid\ncity\ncountryCode\ncountryName\nemail\nfirstName\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\n}\n}\n}\n}",
                "variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{default}}\",\n\"userId\": \"{{userId}}\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"cartType\": \"null\",\n\"shipment\": {\n\"id\": \"{{$randomUUID}}\",\n\"fulfillmentCenterId\": \"142ba5568ae4454aad553ece41b9c3b5\",\n\"height\": 123,\n\"length\": 432,\n\"measureUnit\": \"mm\",\n\"shipmentMethodCode\": \"FixedRate\",\n\"shipmentMethodOption\": \"Ground\",\n\"volumetricWeight\": 151,\n\"weight\": 15643,\n\"weightUnit\": \"116\",\n\"width\": 114,\n\"deliveryAddress\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"KeyTest\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n},\n\"currency\": \"USD\",\n\"price\": 10\n}\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for shipments in cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Add CartShipmentDynamicProperties\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.updateCartShipmentDynamicProperties).to.not.eql(null);     \r",
                  "pm.expect(jsonData.data.updateCartShipmentDynamicProperties.id).to.be.a(\"string\");    \r",
                  "pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0]).to.be.an(\"object\");\r",
                  "pm.expect(jsonData.data.updateCartShipmentDynamicProperties.shipments[0].id).to.be.a(\"string\");\r",
                  "pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ae640801-341c-4113-be72-1b83cc1ae94f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateCartShipmentDynamicProperties($command: InputUpdateCartShipmentDynamicPropertiesType!) {\r\nupdateCartShipmentDynamicProperties(command: $command) {\r\nid\r\nshipments{\r\nid\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\ndictionaryItem {\r\nlabel\r\nname\r\nid\r\n}\r\n}\r\n}\r\n}\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"cartId\": \"{{cartId}}\",   \r\n\"storeId\": \"{{storeId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"currencyCode\": \"{{currencyCode}}\",\r\n\"cultureName\": \"{{cultureName}}\",\r\n\"cartName\": \"{{cartName}}\",\r\n\"shipmentId\":\"{{shipmentId1}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"Test 111updated value\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"2021-06-28\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Decimal_0_0_0\",\r\n\"value\": \"3.0\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Html_0_1_0\",\r\n\"value\": \"<a>link</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},\r\n{\r\n\"name\": \"CartModule_Shipment_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"CartModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"CartModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"CartModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterAddShipmentDynamicproperties",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Set total1\", function(){\r",
                  "    var json = pm.response.json();\r",
                  "pm.collectionVariables.set(\"total1\", json.data.cart.total.amount);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "b611bdfa-8252-4210-b715-486dd1453d86",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "validateCoupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check validateCoupon\", function(){\r",
                  "var jSon = pm.response.json();\r",
                  "pm.expect(jSon.data.validateCoupon).to.be.a(\"boolean\");\r",
                  "pm.expect(data.error).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "266b5d99-6daf-42bd-96de-6b23d535396f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation validateCoupon ($command: InputValidateCouponType!) {\n    validateCoupon (command: $command)\n    \n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": null,\n    \"coupon\": \"TestxApi\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addCoupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check AddCoupon\", function(){\r",
                  "var jSon = pm.response.json();\r",
                  "pm.expect(jSon.data.addCoupon).to.not.empty;\r",
                  "pm.expect(jSon.data.addCoupon.coupons[0]).to.be.an(\"object\");\r",
                  "pm.expect(jSon.data.addCoupon.coupons[0].code).to.be.a(\"string\");\r",
                  "pm.expect(jSon.data.addCoupon.coupons[0].isAppliedSuccessfully).to.be.equal(true);\r",
                  "pm.expect(data.error).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "cc2f3963-6c83-42d4-961c-00d32de70207",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation addCoupon($command: InputAddCouponType!) {\naddCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
                "variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"TestxApi\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "cartAfterAddCoupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check totals\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.cart.items.total).to.be.not.equal(\"total1\")\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "7b78b106-852d-42e2-b94e-932fe72adcf3",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\ndiscounts{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "removeCoupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check removeCoupon\", function(){\r",
                  "var json = pm.response.json();\r",
                  "pm.expect(json.data.removeCoupon).not.empty;\r",
                  "pm.expect(json.data.removeCoupon.discountTotal.amount).to.be.equal(0.0);\r",
                  "pm.expect(data.error).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "e6f36453-acd7-4bef-afee-e5dfa98d76e6",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation removeCoupon($command: InputRemoveCouponType!) {\nremoveCoupon(command: $command) {\nid\nname\ncustomerName\ncoupons {\ncode\nisAppliedSuccessfully\n}\ndiscounts{\ncoupon\n}\ndiscountTotal {\namount\n}\n}\n}",
                "variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n\"storeId\": \"{{storeId}}\",\n\"cartName\": \"{{cartName}}\",\n\"userId\": \"{{userId}}\",\n\"cartType\": \"null\",\n\"currencyCode\": \"{{currencyCode}}\",\n\"cultureName\":\"{{cultureName}}\",\n\"couponCode\": \"TestxApi\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "cartAfterRemoveCoupon",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});pm.test(\"Check dynamic properties for shipmets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check totals\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "var total1 = pm.collectionVariables.get(\"total1\");\r",
                  "pm.expect(jsonData.data.cart.total.amount).to.be.equal(total1);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "7ada1cff-fc24-4a2a-9205-f196a15d34af",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addOrUpdateCartAddress",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check addOrUpdateCartAddress \", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.addOrUpdateCartAddress).to.be.not.empty;\r",
                  "    pm.expect(json.data.addOrUpdateCartAddress.id).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "    pm.collectionVariables.set(\"cartAddress\",json.data.addOrUpdateCartAddress.addresses[0].id);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "2897c1da-4131-4f5a-a82a-5f8f9d4ac6b8",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation addOrUpdateCartAddress($command: InputAddOrUpdateCartAddressType!) {\naddOrUpdateCartAddress(command: $command) {\nid\naddresses {\naddressType\ncity\ncountryCode\ncountryName\nemail\nfirstName\nid\nlastName\nline1\nline2\nmiddleName\nname\norganization\nphone\npostalCode\nregionId\nregionName\nzip\nid\n}\n}\n}",
                "variables": "{\n\"command\": {\n\"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n\"address\": {\n\"city\": \"City 17\",\n\"countryCode\": \"RU\",\n\"countryName\": \"Russia\",\n\"email\": \"3333addressCart email test\",\n\"firstName\": \"First test name\",\n\"key\": \"{{$randomUUID}}\",\n\"lastName\": \"Last name test\",\n\"line1\": \"Address Line 1\",\n\"line2\": \"Address line 2\",\n\"middleName\": \"Test Middle Name\",\n\"name\": \"First name address\",\n\"organization\": \"OrganizationTestName\",\n\"phone\": \"88005553535\",\n\"postalCode\": \"111111\",\n\"regionId\": \"Test region\",\n\"regionName\": \"Region 15\",\n\"zip\": \"13413\",\n\"addressType\": 1\n}\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "removeCartAddress",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"removeCartAddress\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.removeCartAddress).to.be.not.empty;\r",
                  "    pm.expect(json.data.removeCartAddress.id).to.be.not.empty;\r",
                  "    pm.expect(json.data.removeCartAddress.addresses[0].id).to.be.a(\"string\");\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "e31a3c84-733a-4367-85dc-9421a0ffda60",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation removeCartAddress ($command: InputRemoveCartAddressType!) {\nremoveCartAddress (command: $command) {\nid\naddresses{\nid\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"addressId\": \"KeyTest\"\n      }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "clearShipments",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"clearShipments\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.clearShipments).to.be.not.empty;\r",
                  "    pm.expect(json.data.clearShipments.shipments).to.be.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "25e5ae75-946c-47b1-82a5-127e583f8400",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation clearShipments ($command: InputClearShipmentsType!) {\nclearShipments (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "removeShipment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"removeShipment\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.removeShipment).to.be.not.empty;\r",
                  "    pm.expect(json.data.removeShipment.shipments).to.be.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d6d3064c-73fe-49fd-bb56-871a09fb72c0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation removeShipment ($command: InputRemoveShipmentType!) {\nremoveShipment (command: $command) {\nid\nshipments{\nid\nshipmentMethodCode\nshipmentMethodOption\ndeliveryAddress{\nid\nline1\nline2\n}\n}\n}\n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"shipmentId\": \"shipmentID_1\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterClearShipment",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check items in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.items).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamic properties for lineitems\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.items[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check dynamic properties for payments\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.payments[0].dynamicProperties).to.not.empty\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "\r",
                  "});\r",
                  "pm.test(\"Check shipment after remove\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "     pm.expect(data.data.cart.shipments).to.be.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "23b6fada-ac3f-4a99-84dc-d5338d7c0ee4",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "clearPayments",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"clearPayments\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.clearPayments).to.be.not.empty;\r",
                  "    pm.expect(json.data.clearPayments.payments).to.be.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "fbc88aa2-96eb-4331-898c-5010ce31c9a2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation clearPayments ($command: InputClearPaymentsType!) {\nclearPayments (command: $command) {\nid\npayments{\nid\nouterId\namount{\namount\n}\nbillingAddress{\nline1\n}\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "clearCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"clearCart\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.clearCart).to.be.not.empty;\r",
                  "    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "5f63da5c-23d0-43e8-bac5-68a81684c257",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation clearCart ($command: InputClearCartType!) {\nclearCart (command: $command) {\nid\ntotal{\namount\n}\n}\n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{userId}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterClearCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Check dynamicProperties in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.dynamicProperties).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "507dd8d0-812c-4ffd-849a-b76f2d55a1fe",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "removeCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"RemoveCart\", function(){\r",
                  "    var jSonData = pm.response.json();\r",
                  "    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
                  "    pm.expect(data.error).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c28ce301-194c-4747-a463-c23acf56c5fc",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{cartId}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "afterremoveCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart after remove\", function(){\r",
                  "var jSonData = pm.response.json();\r",
                  "pm.expect(jSonData.data.cart.id).not.to.be.equal(pm.collectionVariables.get(\"cartId\"));\r",
                  "});"
                ]
              }
            }
          ],
          "id": "a2353463-c6f2-4e9a-8a2e-e2e2222390f1",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\ncart (\nstoreId:\"{{storeId}}\"\nuserId: \"{{userId}}\"\ncurrencyCode: \"{{currencyCode}}\"\ncultureName: \"{{cultureName}}\"\ncartName: \"{{cartName}}\"\n)\n{\nid\nitems\n{\n    id\n    name\n}\ncoupons{\n    code\n}\ncomment\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\nitems\n{\nid\nname\nproductId\nfulfillmentCenterId\nfulfillmentCenterName\ndynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n\nlistPrice {\namount\n}\n}\navailableShippingMethods {\ncode\noptionName\nlogoUrl\ncurrency {\ncode\n}\ntotal {\namount\n}\noptionDescription\nprice {\namount\n}\npriority\n}\navailablePaymentMethods {\ncode\ncurrency{\ncode\n}\nlogoUrl\nisAvailableForPartial\ntaxTotal{\namount\n}\npaymentMethodGroupType\nprice {\namount\n}\npriority\nisAvailableForPartial\n}\ntaxTotal {\namount\n}\ntotal{\n    amount\n}\npayments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n\nshipments\n{\n    id\n    dynamicProperties {\nname\nvalue\nvalueType\n  dictionaryItem{\n    id\n    name\n    label\n  }\n}\n}\n}\n}\n\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "c99951b5-ccbd-47b0-b0e7-e17be4c2205f",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "3920db51-d58f-4825-b81f-03d2107e3b63",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4a563129-7e48-4d6c-b707-3cf6cd80e70f",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Merge carts",
      "item": [
        {
          "name": "getCart1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Set cartId1, randomUser1\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"cartId1\", jsonData.data.cart.id);\r",
                  "    pm.collectionVariables.set(\"randomUser1\", jsonData.data.cart.customerId);\r",
                  "});\r",
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "037ac1ee-54ff-4646-897e-3f3e15ce80ae",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
                "variables": ""
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "getCart2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Set cartId2, randomUser2\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"cartId2\", jsonData.data.cart.id);\r",
                  "    pm.collectionVariables.set(\"randomUser2\", jsonData.data.cart.customerId);\r",
                  "});\r",
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "cf861293-517c-494e-ae10-089df1296d93",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addItemsToCart1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check items\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "c0a67f19-e423-4110-b93e-66ae2f5303ca",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
                "variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser1}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId1}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "addItemsTorCart2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check items\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "2a288f32-88a0-4530-8a34-b3bad5832a3a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
                "variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser2}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{cartId2}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"cbd8eab4f76b4e34b779d9c59dbc13fe\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"6e7a31c35c814fb389dc2574aa142b63\",\r\n        \"quantity\": 5\r\n    }]\r\n  }\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "mergeCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "\r",
                  "pm.test(\"Count number of items\", function () {\r",
                  "    var data = pm.response.json().data.mergeCart.items;\r",
                  "    pm.expect(data.length).to.equal(4);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "ff2612e1-5e6e-470c-9627-ff73ae7179d2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation mergeCart ($command: InputMergeCartType!) {\nmergeCart (command: $command) {\nid\nitems{\nid\nname\nquantity\n}\ntotal{\namount\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": 0,\n  \"query\": \"{{query}}\",\n  \"group\": \"\",\n  \"command\": {\n    \"cartId\": \"{{cartId1}}\",\n    \"storeId\": \"{{storeId}}\",\n    \"cartName\": \"{{cartName}}\",\n    \"userId\": \"{{randomUser1}}\",\n    \"currencyCode\": \"{{currencyCode}}\",\n    \"cultureName\": \"{{cultureName}}\",\n    \"cartType\": \"{{cartType}}\",\n    \"secondCartId\":\"{{cartId2}}\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "cartAfterMerge",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Count number of items\", function () {\r",
                  "    var data = pm.response.json().data.cart.items;\r",
                  "    pm.expect(data.length).to.equal(4);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "fb870702-d724-4e0e-9ae8-f1e3d7563ee9",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{randomUser1}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "9addbc6a-d4ff-4039-991f-760aa9362dc1",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "a1436630-5b68-44b5-ba5c-b75ab869263d",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "548617d7-2094-46e6-89f0-eb3c8b1ec10e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "CreateOrderFromCart",
      "item": [
        {
          "name": "Create product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Set ProductId\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.collectionVariables.set(\"ProductId\", jsonData.id);\r",
                  "pm.collectionVariables.set(\"Nameofproduct\", jsonData.name);\r",
                  "pm.collectionVariables.set(\"Code\", jsonData.code);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "2114e7d3-24ad-49bf-8fe0-b6cab33e313a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"Product1\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"isActive\": true,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/catalog/products"
          },
          "response": []
        },
        {
          "name": "Add price to the product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "aa989d88-c925-4e3c-a5b8-edf174cfaac1",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"productId\": \"{{ProductId}}\",\r\n  \"product\": {\r\n    \"code\": \"{{Code}}\",\r\n    \"name\": \"Product1\",\r\n    \"catalogId\": \"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n    \"categoryId\": \"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n    \"outline\": \"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n    \"path\": \"Cell phones\",\r\n    \"isBuyable\": true,\r\n    \"isActive\": true,\r\n    \"trackInventory\": true,\r\n    \"maxQuantity\": 0,\r\n    \"minQuantity\": 0,\r\n    \"productType\": \"Physical\",\r\n    \"startDate\": \"2021-10-13T11:15:17.8103888Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [],\r\n    \"images\": [],\r\n    \"assets\": [],\r\n    \"links\": [],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [\r\n      {\r\n        \"semanticUrl\": \"product1\",\r\n        \"objectId\": \"a9c8297d-ce0d-4ec6-99de-270105e80a98\",\r\n        \"objectType\": \"CatalogProduct\",\r\n        \"isActive\": true,\r\n        \"languageCode\": \"en-US\",\r\n        \"id\": \"3e03dc62-18c2-42e6-a220-cc95e042cf76\"\r\n      }\r\n    ],\r\n    \"reviews\": [],\r\n    \"associations\": [],\r\n    \"referencedAssociations\": [],\r\n    \"outlines\": [\r\n      {\r\n        \"items\": [\r\n          {\r\n            \"id\": \"4974648a41df4e6ea67ef2ad76d7bbd4\",\r\n            \"seoObjectType\": \"Catalog\",\r\n            \"name\": \"Electronics\",\r\n            \"hasVirtualParent\": false\r\n          },\r\n          {\r\n            \"id\": \"Cell-phones\",\r\n            \"seoObjectType\": \"Category\",\r\n            \"seoInfos\": [\r\n              {\r\n                \"semanticUrl\": \"cell-phones\",\r\n                \"objectId\": \"0d4ad9bab9184d69a6e586effdf9c2ea\",\r\n                \"objectType\": \"Category\",\r\n                \"isActive\": true,\r\n                \"languageCode\": \"en-US\",\r\n                \"id\": \"73642cc7f2e44d92af13e94c79c73456\"\r\n              }\r\n            ],\r\n            \"name\": \"Cell phones\",\r\n            \"hasVirtualParent\": false\r\n          },\r\n          {\r\n            \"id\": \"DDR-234304560\",\r\n            \"seoObjectType\": \"CatalogProduct\",\r\n            \"seoInfos\": [\r\n              {\r\n                \"semanticUrl\": \"product1\",\r\n                \"objectId\": \"a9c8297d-ce0d-4ec6-99de-270105e80a98\",\r\n                \"objectType\": \"CatalogProduct\",\r\n                \"isActive\": true,\r\n                \"languageCode\": \"en-US\",\r\n                \"id\": \"3e03dc62-18c2-42e6-a220-cc95e042cf76\"\r\n              }\r\n            ],\r\n            \"name\": \"Product1\",\r\n            \"hasVirtualParent\": false\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"2021-10-13T11:15:17.8142229Z\",\r\n    \"modifiedDate\": \"2021-10-13T11:15:17.8142229Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"a9c8297d-ce0d-4ec6-99de-270105e80a98\",\r\n    \"_priority\": 0\r\n  },\r\n  \"prices\": [\r\n    {\r\n      \"productId\": \"{{ProductId}}\",\r\n      \"list\": 999,\r\n      \"minQuantity\": 1,\r\n      \"currency\": \"USD\",\r\n      \"pricelistId\": \"934da94516a74f9ab4ec001343ac928a\",\r\n      \"name\": \"ElectronicsUSD\",\r\n      \"catalog\": \"Electronics virtual, Electronics\"\r\n    }\r\n  ]\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/products/{{ProductId}}/prices"
          },
          "response": []
        },
        {
          "name": "Add stock qty to the product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Add stock qty to the product\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.inStockQuantity).to.eql(25);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "087dbaef-576b-45d9-8398-4ad4e82de0e7",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"fulfillmentCenterId\": \"vendor-fulfillment\",\r\n  \"fulfillmentCenterName\": \"Los Angeles Branch\",\r\n  \"fulfillmentCenter\": {\r\n    \"name\": \"Los Angeles Branch\",\r\n    \"description\": \"<h3>Branch Hours</h3>\\n                            <table class=\\\"table\\\">\\n                                <tbody>\\n                                    <tr>\\n                                        <th class=\\\"day\\\">Day</th>\\n                                        <th><span class=\\\"hours\\\">Hours</span></th>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>MON</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>TUE</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>WED</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>THU</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>FRI</td>\\n                                        <td>7:30 AM - 5:00 PM</td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SAT</td>\\n                                        <td>\\n\\n                                            CLOSED\\n                                        </td>\\n                                    </tr>\\n                                    <tr>\\n                                        <td>SUN</td>\\n                                        <td>CLOSED</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\",\r\n    \"geoLocation\": \"\",\r\n    \"address\": {\r\n      \"addressType\": 0,\r\n      \"countryCode\": \"USA\",\r\n      \"countryName\": \"United States\",\r\n      \"city\": \"Los Angeles\",\r\n      \"postalCode\": \"90234\",\r\n      \"line1\": \"1232 Wilshire Blvd\",\r\n      \"regionName\": \"California\",\r\n      \"phone\": \"3232323232\"\r\n    },\r\n    \"createdDate\": \"2018-05-07T12:05:20.42Z\",\r\n    \"modifiedDate\": \"2021-10-07T12:38:49.2056388Z\",\r\n    \"createdBy\": \"unknown\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"vendor-fulfillment\"\r\n  },\r\n  \"productId\": \"{{ProductId}}\",\r\n  \"inStockQuantity\": 25,\r\n  \"reservedQuantity\": 0,\r\n  \"reorderMinQuantity\": 0,\r\n  \"preorderQuantity\": 0,\r\n  \"backorderQuantity\": 0,\r\n  \"allowBackorder\": false,\r\n  \"allowPreorder\": false,\r\n  \"inTransit\": 0,\r\n  \"status\": \"Disabled\",\r\n  \"createdDate\": \"0001-01-01T00:00:00Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/inventory/products/{{ProductId}}"
          },
          "response": []
        },
        {
          "name": "Get product prices",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Get product prices\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0].list).to.eql(999);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "0c5268b4-d3e3-46b1-8d1e-e98f9daec006",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/products/{{ProductId}}/prices"
          },
          "response": []
        },
        {
          "name": "getCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Set orderCart, randomUser3\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"orderCart\", jsonData.data.cart.id);\r",
                  "    pm.collectionVariables.set(\"randomUser3\", jsonData.data.cart.customerId);\r",
                  "});\r",
                  "pm.test(\"Check cart by user ID\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.cart.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available payment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availablePaymentMethods).to.not.empty;\r",
                  "     pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Check available shipment method\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart.availableShippingMethods).to.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "fd6def83-eaf6-438a-b144-63e25b3e95e8",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{$randomUUID}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n{\r\nid\r\ncustomerId\r\nitems\r\n{\r\n    id\r\n    name\r\n}\r\ncoupons{\r\n    code\r\n}\r\ncomment\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\nitems\r\n{\r\nid\r\nname\r\nproductId\r\nfulfillmentCenterId\r\nfulfillmentCenterName\r\ndynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n\r\nlistPrice {\r\namount\r\n}\r\n}\r\navailableShippingMethods {\r\ncode\r\noptionName\r\nlogoUrl\r\ncurrency {\r\ncode\r\n}\r\ntotal {\r\namount\r\n}\r\noptionDescription\r\nprice {\r\namount\r\n}\r\npriority\r\n}\r\navailablePaymentMethods {\r\ncode\r\ncurrency{\r\ncode\r\n}\r\nlogoUrl\r\nisAvailableForPartial\r\ntaxTotal{\r\namount\r\n}\r\npaymentMethodGroupType\r\nprice {\r\namount\r\n}\r\npriority\r\nisAvailableForPartial\r\n}\r\ntaxTotal {\r\namount\r\n}\r\ntotal{\r\n    amount\r\n}\r\npayments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n\r\nshipments\r\n{\r\n    id\r\n    dynamicProperties {\r\nname\r\nvalue\r\nvalueType\r\n  dictionaryItem{\r\n    id\r\n    name\r\n    label\r\n  }\r\n}\r\n}\r\n}}",
                "variables": ""
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "add items",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check items\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect(jsonData.data.addItemsCart.items[0,1]).to.be.not.empty;\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "12cacb64-d231-4733-9e7f-7ed909faef33",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ($command: InputAddItemsType!) {\r\n    addItemsCart (command: $command)        \r\n    {\r\n        id\r\n        items {\r\n            productId,\r\n            quantity\r\n        }\r\n    }\r\n}",
                "variables": "{\r\n  \"command\": {\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser3}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"\",\r\n    \"cartId\": \"{{orderCart}}\",\r\n    \"cartItems\": [{\r\n        \"productId\": \"ac8da6c50cef42ad97d6f1effe2abaee\",\r\n        \"quantity\": 2\r\n    },\r\n    {\r\n        \"productId\": \"e7eee66223da43109502891b54bc33d3\",\r\n        \"quantity\": 5\r\n    },\r\n    {\r\n        \"productId\": \"{{ProductId}}\",\r\n        \"quantity\": 3\r\n    }\r\n    ]\r\n  }\r\n}"
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "Check product price in cart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Check product price in cart\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.cart).to.not.eql(null);\r",
                  "    pm.expect(data.data.cart.items).to.not.empty;\r",
                  "    pm.expect(data.data.cart.items[0].product.id).equal(pm.collectionVariables.get(\"ProductId\"));\r",
                  "    pm.expect(data.data.cart.items[0].product.price.list.amount).to.be.equal(999);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "58db532a-e86f-43a4-b3ca-6e83aecac9cf",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\ncart (\r\nstoreId:\"{{storeId}}\"\r\nuserId: \"{{randomUser3}}\"\r\ncurrencyCode: \"{{currencyCode}}\"\r\ncultureName: \"{{cultureName}}\"\r\ncartName: \"{{cartName}}\"\r\n)\r\n  {\r\n    items{\r\n      product{\r\n      id\r\n      name\r\n      price{\r\n        list{\r\n          amount\r\n        }\r\n      }\r\n      }\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "createOrderFromCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CreateOrderFromCart\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.collectionVariables.set(\"orderid1\", json.data.createOrderFromCart.id);\r",
                  "    pm.expect(json.data.createOrderFromCart).to.be.not.empty;\r",
                  "    pm.expect(json.data.createOrderFromCart.id).to.be.a(\"string\");\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "df3b8290-3804-4b9e-8b37-8b1cf3ba6053",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createOrderFromCart ($command: InputCreateOrderFromCartType!) {\ncreateOrderFromCart (command: $command) {\nid\nitems{\nid\nname\nquantity\nfulfillmentCenterId\nfulfillmentCenterName\n}\ntotal{\namount\n}\ndiscountTotal{\namount\n}\ntaxTotal{\namount\n}\ntotal{\namount\n}\n}\n}",
                "variables": "{\n\"command\": {\n    \"cartId\": \"{{orderCart}}\"\n  }\n}"
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "checkOrder",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"checkOrder\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.order).to.not.eql(null);\r",
                  "    pm.expect(data.data.order).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.data.order.items[1].price.amount).to.equal(1500);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "74cec5ce-84d6-4d1d-834c-20e7019dbe48",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query order($id: String, $cultureName: String) {\r\n  order(id: $id, cultureName: $cultureName) {\r\n    id\r\n    number\r\n     dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    items {\r\n      id\r\n      name\r\n        price{\r\n        amount\r\n              }\r\n      dynamicProperties {\r\n        dictionaryItem {\r\n          id\r\n          name\r\n          label\r\n        }\r\n        dynamicProperty {\r\n          valueType\r\n          id\r\n          label\r\n          name\r\n        }\r\n      }\r\n    }\r\n    shipments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n    inPayments{\r\n        id\r\n    dynamicProperties {\r\n      name\r\n      value\r\n      valueType\r\n      dynamicProperty {\r\n        name\r\n        label\r\n        valueType\r\n      }\r\n      dictionaryItem {\r\n        label\r\n        name\r\n        id\r\n      }\r\n    }\r\n    }\r\n  }\r\n}\r\n",
                "variables": "{\r\n  \"id\": \"{{orderid1}}\",\r\n  \"cultureName\": \"en-US\"\r\n}"
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "clearCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"clearCart\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.clearCart).to.be.not.empty;\r",
                  "    pm.expect(json.data.clearCart.total.amount).to.be.equal(0.00);\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "223f6ce1-92b7-48bb-a3dd-0b302c5a0392",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation clearCart ($command: InputClearCartType!) {\r\nclearCart (command: $command) {\r\nid\r\ntotal{\r\namount\r\n}\r\n}\r\n}",
                "variables": "{\r\n  \"command\": {\r\n    \"cartId\": \"{{orderCart}}\",\r\n    \"storeId\": \"{{storeId}}\",\r\n    \"cartName\": \"{{cartName}}\",\r\n    \"userId\": \"{{randomUser3}}\",\r\n    \"currencyCode\": \"{{currencyCode}}\",\r\n    \"cultureName\": \"{{cultureName}}\",\r\n    \"cartType\": \"{{cartType}}\"\r\n  }\r\n}"
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "removeCart",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"RemoveCart\", function(){\r",
                  "    var jSonData = pm.response.json();\r",
                  "    pm.expect(jSonData.data.removeCart).to.be.equal(true);\r",
                  "    pm.expect(data.error).to.be.undefined;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "dd0452a0-3666-4fea-b95a-f407d0f16e28",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation removeCart ($command: InputRemoveCartType!) {\n    removeCart (command: $command)\n}",
                "variables": "{\n  \"command\": {\n    \"cartId\": \"{{orderCart}}\"\n  }\n}"
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "Delete a product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "79f67599-8f8c-46c0-ba80-512724b6700c",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{adminQA}}/api/catalog/products?ids={{ProductId}}",
              "host": [
                "{{adminQA}}"
              ],
              "path": [
                "api",
                "catalog",
                "products"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{ProductId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404 not found\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "99b72b63-fdae-4524-8cbd-b0ff871ef6b0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/catalog/products/{{ProductId}}"
          },
          "response": []
        }
      ],
      "id": "3f7c3d0b-76c0-4a7a-aeab-2818ac408c94",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "bb506cd2-c6b1-4fac-98e9-c6520548a556",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "6f24b38f-ac29-488b-af9f-97f22045ca00",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Order",
      "item": [
        {
          "name": "get all orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Orders\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.orders.items).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"orderId\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "\r",
                  "    pm.collectionVariables.set(\"orderId\",jsonData.data.orders.items[0].id);\r",
                  "    pm.collectionVariables.set(\"orderShipmentId\",jsonData.data.orders.items[0].shipments[0].id);\r",
                  "    pm.collectionVariables.set(\"orderPaymentId\",jsonData.data.orders.items[0].inPayments[0].id);\r",
                  "    pm.collectionVariables.set(\"orderLineItemId\",jsonData.data.orders.items[0].items[0].id);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "b380ee12-445d-42c0-ae31-3a1679d6fa6e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nitems{\r\n    id\r\n}\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\ninPayments{\r\n    id\r\n}\r\n\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Dynamic properties for order\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.updateOrderDynamicProperties.dynamicProperties).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "dba7f866-2ae1-4098-90d1-d6a422083848",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateOrderDynamicProperties($command: InputUpdateOrderDynamicPropertiesType!) {   updateOrderDynamicProperties(command: $command) {     \r\nid     \r\nnumber     \r\ndynamicProperties { \r\nname \r\nvalue \r\nvalueType\r\ndynamicProperty {\r\nname\r\nlabel\r\nvalueType\r\n }\r\ndictionaryItem {\r\nlabel \r\nname\r\nid\r\n}}   } }",
                "variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_CustomerOrder_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}    ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for shipment in order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Dynamic properties for shipment order\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.updateOrderShipmentDynamicProperties.shipments[0].dynamicProperties).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "18c00dc3-e116-4345-9105-f5e8723f940e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateOrderShipmentDynamicProperties($command: InputUpdateOrderShipmentDynamicPropertiesType!) {\r\n\r\n    updateOrderShipmentDynamicProperties(command: $command) {\r\n\r\n        number\r\n\r\n        shipments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"shipmentId\": \"{{orderShipmentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Shipment_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for payments in order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Dynamic properties for payment order\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.updateOrderPaymentDynamicProperties.inPayments[0].dynamicProperties).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "edfa8634-1273-451a-8c50-03cd021ba9a2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateOrderPaymentDynamicProperties($command: InputUpdateOrderPaymentDynamicPropertiesType!) {\r\n\r\n    updateOrderPaymentDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        number\r\n\r\n        inPayments {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dynamicProperty {\r\n\r\n                    name \r\n\r\n                    label \r\n\r\n                    valueType\r\n\r\n                } \r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"paymentId\":\"{{orderPaymentId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_Paymentln_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}   ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Add dynamic properties for order lineitem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Dynamic properties for lineitem order\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.updateOrderItemDynamicProperties.items[0].dynamicProperties).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "5023952e-402b-4121-a350-f75371011c57",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateOrderItemDynamicProperties($command: InputUpdateOrderItemDynamicPropertiesType!) {\r\n\r\n    updateOrderItemDynamicProperties(command: $command) {\r\n\r\n        id\r\n\r\n        items {\r\n\r\n            id\r\n\r\n            dynamicProperties {\r\n\r\n                name \r\n\r\n                value \r\n\r\n                valueType\r\n\r\n                dictionaryItem {\r\n\r\n                    label \r\n\r\n                    name \r\n\r\n                    id\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"orderId\": \"{{orderId}}\",\r\n\"lineItemId\":\"{{orderLineItemId}}\",\r\n\"dynamicProperties\": [\r\n{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_0_0\",\r\n\"value\": \"test short text value\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Boolean_0_0_0\",\r\n\"value\": \"true\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_DateTime_0_0_0\",\r\n\"value\": \"2021-03-30\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Decimal_0_0_0\",\r\n\"value\": \"3.65\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_0_0\",\r\n\"value\": \"<a>link</a>\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_1_0\",\r\n\"value\": \"<a>linkFR</a>\",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Html_0_1_0\",\r\n\"value\": \"<a>linkEN</a>\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Image_0_0_0\",\r\n\"value\": \"link to image\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_0_0_0\",\r\n\"value\": \"2\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"3\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_Integer_1_0_0\",\r\n\"value\": \"6\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_LongText_0_0_0\",\r\n\"value\": \"Test updated value text\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_LongText_0_1_0\",\r\n\"value\": \"Test updated value text FR \",\r\n\"cultureName\":\"fr-FR\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_0_1\",\r\n\"value\": \"478ad546-be22-4904-be0b-209e85233513\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_0_1_0\",\r\n\"value\": \"short text multilingual\",\r\n\"cultureName\":\"de-DE\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual11\",\r\n\"cultureName\":\"en-US\"\r\n},{\r\n\"name\": \"OrdersModule_LineItem_ShortText_1_1_0\",\r\n\"value\": \"multivalue and multilingual22\",\r\n\"cultureName\":\"en-US\"\r\n}  ]\r\n}\r\n}  "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "order",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get order by id\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.order).to.not.eql(null);\r",
                  "    pm.expect(data.data.order).to.be.an(\"object\");\r",
                  "    pm.expect(data.data.order.id).to.be.a(\"string\");\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "b6731653-3ef7-416e-a616-1e0517630c18",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query order($id: String, $cultureName: String) {\n  order(id: $id, cultureName: $cultureName) {\n    id\n    number\n     dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    items {\n      id\n      name\n      dynamicProperties {\n        dictionaryItem {\n          id\n          name\n          label\n        }\n        dynamicProperty {\n          valueType\n          id\n          label\n          name\n        }\n      }\n    }\n    shipments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n    inPayments{\n        id\n    dynamicProperties {\n      name\n      value\n      valueType\n      dynamicProperty {\n        name\n        label\n        valueType\n      }\n      dictionaryItem {\n        label\n        name\n        id\n      }\n    }\n    }\n  }\n}\n",
                "variables": "{\n  \"id\": \"{{orderId}}\",\n  \"cultureName\": \"en-US\"\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Index Order",
          "id": "8e6199ac-40c7-4d47-b615-e0bcfb300127",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[{\"documentType\":\"CustomerOrder\",\"documentIds\":[\"{{orderId}}\"]}]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminurl}}/api/search/indexes/index"
          },
          "response": []
        },
        {
          "name": "orders by short text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search order by shorttext\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders).to.not.eql(null);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "142023d7-ca40-415f-a790-35d749ca8b1a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_shorttext_0_0_0\\\":\\\"test short text value\\\"\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by html",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search order by html\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders).to.not.eql(null);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "22005d7a-513a-44ee-a701-9f02e1c37d03",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"ordersmodule_customerorder_html_0_0_0:<a>link</a>\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by decimal",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search order by decimal\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders).to.not.eql(null);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "b1822023-a32d-439a-a69a-1d0c4bc30e5e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"ordersmodule_customerorder_decimal_0_0_0:3.65000\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by image",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search order by decimal\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders).to.not.eql(null);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "04600b4d-113c-48b6-b5ee-d935e20c5ce2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_image_0_0_0\\\":\\\"link to image\\\"\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by date",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Your test name\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "5dfa5bdb-f2ce-459e-8246-0f29a789bc58",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"datecreation:2021/07/24\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by long text",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search order by long text\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders).to.not.eql(null);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "919b50fb-b80d-43d8-abff-2aace9d976e2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"\\\"ordersmodule_customerorder_longtext_0_0_0\\\":\\\"Test updated value text\\\"\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by integer",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search order by integer\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders).to.not.eql(null);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "2c8f4aa4-9077-427f-bf7e-89a912d6ed1a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"ordersmodule_customerorder_integer_1_0_0:6\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "orders by bool",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Search orders by bool\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "052cd2b1-7b31-4778-9266-ce775aab8cf9",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query orders ($filter: String, $sort: String, $cultureName: String, $userId: String) {\norders (filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\nitems {\nid\ndynamicProperties {\nname\nvalue\nvalueType\ndynamicProperty {\nname\nlabel\nvalueType\n}\ndictionaryItem {\nlabel\nname\nid\n}\n}\n}\npageInfo {\nendCursor\nhasNextPage\nhasPreviousPage\nstartCursor\n}\ntotalCount\n}\n}",
                "variables": "{\n\"filter\": \"ordersmodule_customerorder_boolean_0_0_0:true\",\n\"cultureName\": \"en-US\"\n} "
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "changeOrderStatus",
          "id": "0d73fb40-8ed4-4d56-b8e0-eea64b7132ae",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation changeOrderStatus ($command: InputChangeOrderStatusType!) {\n    changeOrderStatus (command: $command)\n}",
                "variables": "{\n  \"command\": {\n    \"orderId\": \"{{orderId}}\",\n    \"status\": \"Paid\"\n  }\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "changePaymentStatus from New > Paid",
          "id": "a3ba7913-7b0b-4eb6-8f58-a2ff4834ffc2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation processOrderPayment($command: InputProcessOrderPaymentType!) {\r\n  processOrderPayment(command: $command) {\r\n   newPaymentStatus\r\n    isSuccess\r\n    errorMessage\r\n  }\r\n}",
                "variables": "{\r\n\"command\": {\r\n\"orderId\": {{orderId}},\r\n\"paymentId\": {{orderPaymentId}},\r\n   \"bankCardInfo\": {\r\n      \"bankCardNumber\": \"4242424242424242\",\r\n      \"bankCardType\": \"Visa\",\r\n      \"bankCardMonth\": 11,\r\n      \"bankCardYear\": 22,\r\n      \"bankCardCVV2\": \"111\",\r\n      \"cardholderName\": \"Name1 Name2\"\r\n    }\r\n  }\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "payments",
          "id": "2f4bdf12-9b9d-4f8b-8ec6-24c58d5a3b0f",
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "addTokenTo": "header",
                "accessTokenUrl": "https://localhost:5001/connect/token",
                "username": "admin",
                "password": "store",
                "tokenType": "Bearer"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query payments ($after: String, $first: Int, $filter: String, $sort: String, $cultureName: String, $userId: String!) {\npayments (after: $after, first: $first, filter: $filter, sort: $sort, cultureName: $cultureName, userId: $userId) {\ntotalCount\nitems\n{\nid\norderId\ncustomerId\nstatus\nsum{\namount\n}\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"filter\": \"{{filter}}\",\n  \"sort\": \"{{sort}}\",\n  \"cultureName\": \"{{cultureName}}\",\n  \"userId\": \"{{userId}}\"\n}\n\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "confirmOrderPayment(Removed)",
          "id": "7dbae3bd-5b41-4fbf-9beb-77478cf348dd",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation confirmOrderPayment ($command: InputConfirmOrderPaymentType!) {\n    confirmOrderPayment (command: $command)\n}",
                "variables": "{\n\"command\": {\n\"payment\": {\n\"id\":\"{{orderPaymentId}}\",\n\"operationType\": \"\",\n\"number\": \"{{paymentNumber}}\",\n\"isApproved\": true,\n\"isCancelled\": true,\n\"cancelReason\": \"\",\n\"customerId\": \"{{userId}}\",\n\"orderId\": \"{{orderId}}\",\n\"sum\": \"100\",\n\"taxTotal\": \"120\",\n\"currency\": \"USD\",\n\"paymentStatus\": 02\n}\n}\n}\n\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "cancelOrderPayment(Removed)",
          "id": "118c65e8-2812-489b-a67e-98994472c0a8",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation cancelOrderPayment ($command: InputCancelOrderPaymentType!) {\n    cancelOrderPayment (command: $command)\n}",
                "variables": "{\n\"command\": {\n\"payment\": {\n\"id\":\"{{orderPaymentId}}\",\n\"operationType\": \"\",\n\"number\": \"{{paymentNumber}}\",\n\"isApproved\": true,\n\"isCancelled\": true,\n\"cancelReason\": \"\",\n\"customerId\": \"{{userId}}\",\n\"orderId\": \"{{orderId}}\",\n\"sum\": \"100\",\n\"taxTotal\": \"120\",\n\"currency\": \"USD\",\n\"paymentStatus\": 02\n}\n}\n}\n\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "sort orders by total",
          "id": "25181ce4-930f-4858-8731-68ba1ee23e04",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\norders(sort:\"total:asc\") {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "b3d2eed2-6ae8-4b7c-a85a-262ad2966e49",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "dd454f6f-82cd-45cd-850a-0770f32147fe",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "a9305067-3d98-49b5-9c83-069316feeca8",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "User",
      "item": [
        {
          "name": "createUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"CreateUser\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.createUser).to.not.empty;\r",
                  "    pm.expect(jsonData.data.createUser.succeeded).to.be.equal(true);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "56fbc107-7701-4e50-914a-4790597292d0",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\n    createUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n      \n    }\n}",
                "variables": "{\n\"command\": {\n\"createdBy\": \"eXp1\",\n\"email\": \"{{email}}\",\n\"password\":\"{{password}}\",\n\"userName\": \"{{userName1}}\",\n\"userType\": \"Customer\"\n}\n}\n\n"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "user",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get user\", function () {\r",
                  "    var json = pm.response.json();\r",
                  "    pm.expect(json.data.user).to.not.eql(null);\r",
                  "    pm.expect(json.data.user).to.be.an(\"object\");\r",
                  "    pm.expect(json.data.user.id).to.be.a(\"string\");\r",
                  "    pm.expect(json.data.user.email).to.be.not.empty;\r",
                  "    pm.expect(json.errors).to.be.undefined;\r",
                  "    pm.collectionVariables.set(\"userIdblock\", json.data.user.id);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "c06a4bdd-71e6-404c-a1fd-5cbf6de2496b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query user(\n  $id: String\n  $userName: String\n  $email: String\n  $loginProvider: String\n  $providerKey: String\n) {\n  user(\n    id: $id\n    userName: $userName\n    email: $email\n    loginProvider: $loginProvider\n    providerKey: $providerKey\n  ) {\n    id\n    isAdministrator\n        userName\n    email\n    storeId\n    userName\n    userType\n    roles{\n      id\n      name\n      description\n      permissions\n    }\n  }\n}",
                "variables": "{\n//\"id\": \"9d30a8a0-9ecf-4dc7-b273-51f6739bec87\",\n\"userName\": \"{{userName1}}\",\n//\"email\": \"eXp100@mail.com\",\n\"loginProvider\":\"\",\n\"providerKey\": \"\"\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "updateUser",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"updateUser\", function(){\r",
                  "\r",
                  "        var jsonData = pm.response.json();\r",
                  "        pm.expect(jsonData.data.updateUser).to.be.empty;\r",
                  "\r",
                  "});"
                ]
              }
            }
          ],
          "id": "b501fd94-4bcf-451c-ba65-6f1ac9365fe3",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateUser ($command: InputUpdateUserType!) {\n    updateUser (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
                "variables": "\n{\n\"command\":{\n\"userType\": \"Customer\",\n\"roles\": [],\n\"id\": \"{{userIdblock}}\",\n\"userName\": \"eXp1001@mail.com\",\n\"email\": \"_loGIN0101@gmail.com\",\n\"securityStamp\": \"RandomData\",\n\"storeId\":\"{{storeId}}\"\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "deleteUsers",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"deleteUsers\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.deleteUsers).to.not.empty;\r",
                  "    pm.expect(jsonData.data.deleteUsers.succeeded).to.be.equal(true);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "eaa061ee-0bf8-4ab0-a36c-e13f8de893ec",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation deleteUsers ($command: InputDeleteUserType!) {\n    deleteUsers (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
                "variables": "{\n\"command\": {\n\"userNames\": [\n\"{{userName1}}\"\n]\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "updateRole",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"updateRole\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateRole.succeeded).to.be.eql(true);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "589ef0a3-904a-4e80-bf81-3a4f524a91fd",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateRole ($command: InputUpdateRoleType!) {\n    updateRole (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
                "variables": "{\n\"command\":{\n    \"role\":\n    {\n\"id\": \"d1e0b7f9-32e4-4b2f-98c1-0406a4d48112\",\n\"description\":\"sdfdsfsdfsdf\",\n\"name\": \"CustomerUpdate_test111\",\n\"permissions\": [{\n\"name\": \"customer:update\",\n\"assignedScopes\": [{\n\"scope\": \"USERID\",\n\"type\": \"OnlyOrderResponsibleScope\"\n}]\n}]\n}\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "newUpdateRole",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"updateRole\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.updateRole.succeeded).to.be.eql(true);\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "a02b28e4-2647-4301-89d3-4f1642cc3d0e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation updateRole ($command: InputUpdateRoleType!) {\n    updateRole (command: $command) {\n        errors {\n            code\n            description\n        }\n        succeeded\n    }\n}",
                "variables": "{\n\"command\":{\n    \"role\":{\n\"id\": \"d1e0b7f9-32e4-4b2f-98c1-0406a4d48112\",\n\"description\":\"sdfdsfsdfsdf\",\n\"name\": \"CustomerUpdate_test111\",\n\"permissions\": [{\n\"name\": \"customer:update\",\n\"assignedScopes\": [{\n\"scope\": \"USERID\",\n\"type\": \"OnlyOrderResponsibleScope\"\n}]\n}]\n}\n}\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "d299b743-d143-4cba-860d-4b1975661fae",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "0d3de7e4-1caa-4718-b708-1ca8ba5bbb50",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "26474b27-4b71-4d1a-9944-e1b3c249616d",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Breadcrumbs",
      "item": [
        {
          "name": "Product does not contains category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product does not contains category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "68b33ed7-d818-415e-91e4-daae60b23a4f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Product contain one category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product does not contains category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d6563fbc-827d-4c03-826d-476d6d4ad679",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") \r\n { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Product contains several nested categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product does not contains category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "a539af47-6f59-4481-a2b9-aa2dda5b9655",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Variation. Product does not contains category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product does not contains category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "360b1dcc-e2e3-4441-974e-16e6c3697f30",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Variation. Product contain one category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product does not contains category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "fb9c9a4b-8f28-47fc-8241-f92175b14c54",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Variation. Parent product contains several nested categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Product does not contains category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.product.breadcrumbs).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "f3ee54da-50de-48ba-8f9c-ff267ff87d3b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": " query { product(id: \"cb8b439491444dad94030be5f551901c\", cultureName:\"{{cultureName}}\",storeId: \"{{storeId}}\") { id name code breadcrumbs {title seoPath typeName} variations{ id code } description { id languageCode reviewType content } descriptions{ id languageCode reviewType content }\r\nproperties{\r\nname\r\nvalue\r\nlabel\r\n}\r\nimages {\r\nurl\r\nrelativeUrl\r\ncultureName\r\n}\r\nseoInfo {\r\nname\r\nsemanticUrl\r\nmetaKeywords\r\nmetaDescription\r\n}\r\nprice {\r\npricelistId\r\nlist {\r\namount\r\n}\r\nsale {\r\namount\r\n}\r\ndiscountAmount {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "0fbb8782-e19c-4c03-a1e2-fd168e621383",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "457eac21-de40-472d-b3c5-f1493a03c065",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "f8ca4d05-9618-4426-8685-b58a9c32182e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Product",
      "item": [
        {
          "name": "Create product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Set ProductId\", function(){\r",
                  "    var jsonData = pm.response.json();\r",
                  "pm.collectionVariables.set(\"ProductId\", jsonData.id);\r",
                  "pm.collectionVariables.set(\"Nameofproduct\", jsonData.name);\r",
                  "pm.collectionVariables.set(\"Code\", jsonData.code);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "7349efb6-4502-4f0e-846c-1654040be9ca",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"code\": \"DDR-234304560\",\r\n    \"name\": \"NewProduct3\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"isActive\": true,\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"0001-01-01T00:00:00Z\",\r\n    \"productType\": \"Physical\",\r\n     \"reviews\": []\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/catalog/products"
          },
          "response": []
        },
        {
          "name": "Add to product few description (en-US, de-DE)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check review\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect (jsonData.reviews[0]).to.be.not.empty;\r",
                  "pm.expect (jsonData.reviews[0].content).to.be.a(\"String\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "627f05ff-e1b0-42bc-97bc-a8d7356a2a63",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"code\": \"{{Code}}\",\r\n    \"name\": \"{{Nameofproduct}}\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"f440c64e-68f8-40fe-9df6-f09ab8fc2c12\",\r\n    \"outline\": \"bb811c7d-5e43-48f0-b85c-373d39ab87c5\",\r\n    \"path\": \"First\",\r\n    \"isActive\": true,\r\n    \"productType\": \"Physical\",\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property\",\r\n            \"required\": false,\r\n            \"dictionary\": true,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a81ee40f-800b-43e4-98dd-d7199cf904be\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"9a42e81b-eb2b-4885-8d20-4501b444148f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"LongText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"d46f175e-bbbb-4ed8-b5d2-57fa7953fafa\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property2\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Category\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"407243f0-c126-4441-b352-931e4445c490\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"DateTime\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a33e4fb0-495a-4f2f-b2b2-59d54ce138a8\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property5\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": true,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"e77e4b74-8700-486e-85f7-a9018a775028\"\r\n        }\r\n    ],\r\n    \"seoObjectType\": \"CatalogProduct\",\r\n    \"seoInfos\": [],\r\n    \"reviews\": [\r\n                {\r\n            \"languageCode\": \"en-US\",\r\n            \"reviewType\": \"QuickReview\",\r\n            \"content\": \"Absolutly new content\"\r\n        },\r\n        {\r\n            \"languageCode\": \"de-DE\",\r\n            \"reviewType\": \"QuickReview\",\r\n            \"content\": \"Test\"\r\n        }\r\n    ],\r\n    \"isInherited\": false,\r\n    \"createdDate\": \"2021-10-11T16:35:25.9728931Z\",\r\n    \"modifiedDate\": \"2021-10-12T07:27:19.2991469Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{ProductId}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/catalog/products"
          },
          "response": []
        },
        {
          "name": "Add to product few seo (en-US, de-DE)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check SEO\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect (jsonData.seoInfos[0]).to.be.not.empty;\r",
                  "pm.expect (jsonData.seoInfos[0].semanticUrl).to.be.a(\"String\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "ce4013e0-7ce7-4494-a4fb-167050eec7ad",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"code\": \"{{Code}}\",\r\n    \"name\": \"{{Nameofproduct}}\",\r\n    \"catalogId\": \"{{catalogQA}}\",\r\n    \"categoryId\": \"{{categoryQA}}\",\r\n    \"outline\": \"bb811c7d-5e43-48f0-b85c-373d39ab87c5\",\r\n    \"path\": \"First\",\r\n    \"isActive\": true,\r\n    \"productType\": \"Physical\",\r\n    \"startDate\": \"0001-01-01T00:00:00Z\",\r\n    \"priority\": 0,\r\n    \"properties\": [\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"Multi\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": true,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"fr-FR\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"de-DE\"\r\n                },\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a9d63927-3b90-48f1-9006-fafc013c4a6f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property\",\r\n            \"required\": false,\r\n            \"dictionary\": true,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a81ee40f-800b-43e4-98dd-d7199cf904be\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"9a42e81b-eb2b-4885-8d20-4501b444148f\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property1\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"LongText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"d46f175e-bbbb-4ed8-b5d2-57fa7953fafa\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property2\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Category\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"407243f0-c126-4441-b352-931e4445c490\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property3\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Product\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fc79d38-60bd-49be-ba14-d5bb631ce3dd\"\r\n        },\r\n        {\r\n            \"isReadOnly\": false,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Variation\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"0fa78f60-13b3-4171-9344-2df47b251c56\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property4\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": false,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"DateTime\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"a33e4fb0-495a-4f2f-b2b2-59d54ce138a8\"\r\n        },\r\n        {\r\n            \"isReadOnly\": true,\r\n            \"isManageable\": true,\r\n            \"isNew\": false,\r\n            \"catalogId\": \"{{catalogQA}}\",\r\n            \"name\": \"new_property5\",\r\n            \"required\": false,\r\n            \"dictionary\": false,\r\n            \"multivalue\": true,\r\n            \"multilanguage\": false,\r\n            \"hidden\": false,\r\n            \"valueType\": \"ShortText\",\r\n            \"type\": \"Catalog\",\r\n            \"values\": [],\r\n            \"attributes\": [],\r\n            \"displayNames\": [\r\n                {\r\n                    \"languageCode\": \"en-US\"\r\n                }\r\n            ],\r\n            \"validationRules\": [],\r\n            \"isInherited\": true,\r\n            \"id\": \"e77e4b74-8700-486e-85f7-a9018a775028\"\r\n        }\r\n    ],\r\n  \"seoObjectType\": \"CatalogProduct\",\r\n  \"seoInfos\": [\r\n    {\r\n      \"isActive\": true,\r\n      \"semanticUrl\": \"new-product3\",\r\n      \"storeId\": \"Electronics\",\r\n      \"languageCode\": \"en-US\",\r\n      \"pageTitle\": \"prod3\",\r\n      \"metaDescription\": \"newdescription\",\r\n      \"metaKeywords\": \"product3\",\r\n      \"imageAltDescription\": \"altimage\"\r\n    },\r\n    {\r\n      \"isActive\": true,\r\n      \"semanticUrl\": \"product_A\",\r\n      \"storeId\": \"Electronics\",\r\n      \"languageCode\": \"de-DE\",\r\n      \"pageTitle\": \"product_A\",\r\n      \"metaDescription\": \"Test new description A\",\r\n      \"metaKeywords\": \"product_A\",\r\n      \"imageAltDescription\": \"altimage\"  \r\n    }\r\n  ],\r\n  \"isInherited\": false,\r\n    \"createdDate\": \"2021-10-11T16:35:25.9728931Z\",\r\n    \"modifiedDate\": \"2021-10-11T16:35:25.9728931Z\",\r\n    \"createdBy\": \"admin\",\r\n    \"modifiedBy\": \"admin\",\r\n    \"id\": \"{{ProductId}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/catalog/products"
          },
          "response": []
        },
        {
          "name": "Index product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check Index\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect (jsonData.errorCount).to.be.eql(0);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "b9ba903c-58c5-46f3-85fd-37cde034c5c4",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[\r\n    {\r\n        \"documentType\": \"Product\",\r\n        \"documentIds\": [\r\n            \"{{ProductId}}\"\r\n        ]\r\n    }\r\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/search/indexes/index"
          },
          "response": []
        },
        {
          "name": "Get product properties labels and descriptions (en-US)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check labels and descriptions (en-US)\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect (jsonData.data.product.description.languageCode).to.be.equal(\"en-US\");\r",
                  "pm.expect (jsonData.data.product.properties[0].label).to.be.equal(\"Brand-en\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "4620d35a-ed89-46bf-b981-fcb8eb07351b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  product(\r\n    id: \"{{ProductId}}\"\r\n    storeId: \"Electronics\"\r\n    cultureName: \"en-US\"\r\n    currencyCode: \"USD\")\r\n    {\r\n    id\r\n    code\r\n      description{\r\n        content\r\nreviewType\r\nlanguageCode\r\n}\r\n       properties\r\n    {\r\n      name\r\n      label\r\n      value\r\n      valueType\r\n      multivalue\r\n      id\r\n    }\r\n  }\r\n}\r\n",
                "variables": ""
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "Get product properties labels and descriptions (de-DE)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Check labels and descriptions (de-DE)\", function(){\r",
                  "var jsonData = pm.response.json();\r",
                  "pm.expect (jsonData.data.product.description.languageCode).to.be.equal(\"de-DE\");\r",
                  "pm.expect (jsonData.data.product.properties[0].label).to.be.equal(\"de\");\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "3ae0e954-b9b8-4d14-991f-2783976f1083",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  product(\r\n    id: \"{{ProductId}}\"\r\n    storeId: \"Electronics\"\r\n    cultureName: \"de-DE\"\r\n    currencyCode: \"USD\")\r\n    {\r\n    id\r\n    code\r\n      description{\r\n        content\r\nreviewType\r\nlanguageCode\r\n}\r\n   properties\r\n    {\r\n      name\r\n      label\r\n      value\r\n      valueType\r\n      multivalue\r\n      id\r\n    }\r\n  }\r\n}\r\n",
                "variables": ""
              }
            },
            "url": "{{urlQA}}"
          },
          "response": []
        },
        {
          "name": "Delete a product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  ""
                ]
              }
            }
          ],
          "id": "148359fd-e0f3-45d5-b8d8-5af42bf0583c",
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{adminQA}}/api/catalog/products?ids={{ProductId}}",
              "host": [
                "{{adminQA}}"
              ],
              "path": [
                "api",
                "catalog",
                "products"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{ProductId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get product",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404 not found\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "ce961ece-5f2e-4146-8b31-7c25df705ae4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{adminQA}}/api/catalog/products/{{ProductId}}"
          },
          "response": []
        }
      ],
      "id": "027748f7-c50c-4d88-a0f1-2ab165b6504a",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "c6e95c83-20d7-4a9a-800e-bbca0289527f",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "bbcf481e-fd35-4dae-b930-f4ba7be311a8",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Auth token",
      "item": [
        {
          "name": "Expired token > Run mutation with required token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  " pm.test(\"errors\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"errors\");\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ]
              }
            }
          ],
          "id": "290aba7e-d658-4555-880f-d1487603eea7",
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "addTokenTo": "header",
                "accessTokenUrl": "https://regression-platform.qa.govirto.com/connect/token",
                "username": "admin",
                "password": "store"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\r\n    createUser (command: $command) {\r\n        errors {\r\n            code\r\n            description\r\n        }\r\n        succeeded\r\n      \r\n    }\r\n}",
                "variables": " {\r\n\"command\": {\r\n\"createdBy\": \"eXp1\",\r\n\"email\": \"22eXp1@mail.com\",\r\n\"password\":\"eXp1@mail.com\",\r\n\"userName\": \"eXp122@mail.com\",\r\n\"userType\": \"Customer\"\r\n}\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Expired token > Run query with required token",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  " pm.test(\"errors\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"errors\");\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "13ba6581-f995-48f2-90de-3df404e6744e",
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "addTokenTo": "header",
                "accessTokenUrl": "https://regression-platform.qa.govirto.com/connect/token",
                "username": "admin",
                "password": "store"
              }
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Remove token > Run mutations",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  " pm.test(\"errors\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"errors\");\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "67953f7e-770c-451e-9d3f-e3eb6049697e",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\r\ncreateUser (command: $command) {\r\nerrors {\r\ncode\r\ndescription\r\n}\r\nsucceeded\r\n\r\n}\r\n}",
                "variables": "{\r\n\"command\": {\r\n\"createdBy\": \"eXp1\",\r\n\"email\": \"22eXp1@mail.com\",\r\n\"password\":\"eXp1@mail.com\",\r\n\"userName\": \"eXp132@mail.com\",\r\n\"userType\": \"Customer\"\r\n}\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Remove token > Run query",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  " pm.test(\"errors\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"errors\");\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "0a8467a3-5a04-4513-849e-0d3c1edbc960",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Correct token > Run mutation",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Correct token > Run mutation\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.createUser.errors).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ca92b80e-deae-4e7c-ab2a-1617b0dc01d6",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation createUser ($command: InputCreateUserType!) {\r\ncreateUser (command: $command) {\r\nerrors {\r\ncode\r\ndescription\r\n}\r\nsucceeded\r\n\r\n}\r\n}",
                "variables": "{\r\n\"command\": {\r\n\"createdBy\": \"eXp1\",\r\n\"email\": \"22eXp1@mail.com\",\r\n\"password\":\"eXp1@mail.com\",\r\n\"userName\": \"eXp122@mail.com\",\r\n\"userType\": \"Customer\"\r\n}\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Correct token > Run query",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Correct token > Run query\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.orders.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c1f1765f-12b9-4978-818d-153d1c4d3800",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\norders {\r\ntotalCount\r\nitems {\r\nid\r\nstatus\r\nnumber\r\ncreatedDate\r\nmodifiedDate\r\ncustomerId\r\ncustomerName\r\nshipments {\r\nid\r\nstatus\r\nshipmentMethodCode\r\nshipmentMethodOption\r\ntotal {\r\namount\r\n}\r\n}\r\naddresses {\r\nid\r\nfirstName\r\nlastName\r\nline1\r\ncountryName\r\ncountryCode\r\npostalCode\r\n}\r\ntotal {\r\namount\r\n}\r\nsubTotal {\r\namount\r\n}\r\ndiscountTotal {\r\namount\r\n}\r\n}\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "e6386a5d-bdef-4d57-83a1-f044a2eb620a",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "6a86401f-6ae3-4e3e-9609-3615bdb94240",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "9685b422-a4a8-4fa0-9a8c-455825010967",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "queries",
      "item": [
        {
          "name": "me",
          "id": "5adcf614-f5bd-4973-b964-d6e370cc08a4",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query me  {\n    me {\n        accessFailedCount\n        contact {\n            addresses {\n                items{\n                addressType\n                city\n                countryCode\n                countryName\n                email\n                firstName\n                key\n                lastName\n                line1\n                line2\n                middleName\n                name\n                organization\n                phone\n                postalCode\n                regionId\n                regionName\n                zip\n            }}\n            birthDate\n            firstName\n            fullName\n            id\n            lastName\n            memberType\n            middleName\n            name\n            organizationId\n            organizations {items{\n                addresses {items{\n                    addressType\n                    city\n                    countryCode\n                    countryName\n                    email\n                    firstName\n                    key\n                    lastName\n                    line1\n                    line2\n                    middleName\n                    name\n                    organization\n                    phone\n                    postalCode\n                    regionId\n                    regionName\n                    zip\n                }}}\n                items\n                contacts  {\n                    edges {\n                        cursor\n                    }\n                    items {\n                        birthDate\n                        firstName\n                        fullName\n                        id\n                        lastName\n                        memberType\n                        middleName\n                        name\n                        organizationId\n                        organizationsIds\n                        outerId\n                        phones\n                    }\n                    pageInfo {\n                        endCursor\n                        hasNextPage\n                        hasPreviousPage\n                        startCursor\n                    }\n                    totalCount\n                }\n                description\n                emails\n                groups\n                id\n                memberType\n                name\n                outerId\n                ownerId\n                parentId\n                phones\n                seoObjectType\n            }\n            organizationsIds\n            outerId\n            phones\n            securityAccounts {\n                accessFailedCount\n                contact {\n                    birthDate\n                    firstName\n                    fullName\n                    id\n                    lastName\n                    memberType\n                    middleName\n                    name\n                    organizationId\n                    organizationsIds\n                    outerId\n                    phones\n                }\n                createdBy\n                createdDate\n                email\n                emailConfirmed\n                id\n                isAdministrator\n                lockoutEnabled\n                lockoutEnd\n                memberId\n                modifiedBy\n                modifiedDate\n                normalizedEmail\n                normalizedUserName\n                passwordExpired\n                permissions\n                phoneNumber\n                phoneNumberConfirmed\n                photoUrl\n                roles {\n                    description\n                    id\n                    name\n                    normalizedName\n                    permissions\n                }\n                securityStamp\n                storeId\n                twoFactorEnabled\n                userName\n                userType\n            }\n        }\n        createdBy\n        createdDate\n        email\n        emailConfirmed\n        id\n        isAdministrator\n        lockoutEnabled\n        lockoutEnd\n        memberId\n        modifiedBy\n        modifiedDate\n        normalizedEmail\n        normalizedUserName\n        passwordExpired\n        permissions\n        phoneNumber\n        phoneNumberConfirmed\n        photoUrl\n        roles {\n            description\n            id\n            name\n            normalizedName\n            permissions\n        }\n        securityStamp\n        storeId\n        twoFactorEnabled\n        userName\n        userType\n    }\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "role",
          "id": "c607618e-6452-421e-9208-e6d254e9f685",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query role ($roleName: String!) {\n    role (roleName: $roleName) {\n        description\n        id\n        name\n        normalizedName\n        permissions\n    }\n}",
                "variables": "{\n  \"roleName\": \"Organization maintainer\"\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "90c8bc53-940c-4fcf-96c9-d095b7b9aec0"
    },
    {
      "name": "mutations",
      "item": [
        {
          "name": "send notification",
          "id": "023d7f91-7999-4654-9815-23c5ec01c422",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ($command: InputSendVerifyEmailType){\r\nsendVerifyEmail(command: $command)\r\n}",
                "variables": "{\r\n\"command\": {\r\n\"email\": \"{atz@virtoway.com}\"\r\n}\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "0a2a11fa-50d9-4738-a2fe-9c13d341ba57"
    },
    {
      "name": "Properties",
      "item": [
        {
          "name": "get properties for category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ceda11ef-fef9-4c9b-8bff-e82a054a7f1d",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"{{category_Id}}\", cultureName:\"de-DE\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "get properties for specific category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for specific category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.properties.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "6c24aa98-b34e-452e-8a3a-c98cdcd3478a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperties (storeId:\"{{storeId}}\", filter:\"categoryId:53e239451c844442a3b2fe9aa82d95c8\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    \r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "get one property with dictionary items for specific culture",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get one property with dictionary items for specific culture\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.property.propertyDictItems.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c2a36db5-5d6b-4e75-875d-d212e003e182",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperty (id:\"{{propertyId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\npropertyDictItems\r\n{\r\nitems\r\n{\r\nvalue\r\n}\r\n}\r\n}\r\n} \r\n\r\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "get properties with dictionary, cultureName, name and types",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties with dictionary,cultureName, name and types\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.properties.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "160bc694-f8f1-49e8-be6d-7422dc44c913",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\", filter:\"keyword:Brand\", types:[PRODUCT, VARIATION])\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Check meta information about dynamic property",
          "id": "2c2c0c16-70ef-47bb-abdb-0d051b299ab9",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
                "variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "9caeef3d-3bfc-40f3-a466-442a257fd8f2",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "bef45a22-acea-4e4c-82e6-41bfbe3896fd",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d85e2199-cdf2-466d-ab82-fd8dd107e8e0",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Catalog",
      "item": [
        {
          "name": "get properties with dictionary, cultureName, name and types",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties with dictionary,cultureName, name and types\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.properties.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "3e7fe3a9-4628-43c1-acc3-89992b257e0a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\", filter:\"keyword:Brand\", types:[PRODUCT, VARIATION])\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "get one property with dictionary items for specific culture",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get one property with dictionary items for specific culture\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.property.propertyDictItems.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "45a9949e-2749-4aa2-b2c6-a36e6438ed70",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperty (id:\"{{propertyId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\npropertyDictItems\r\n{\r\nitems\r\n{\r\nvalue\r\n}\r\n}\r\n}\r\n} \r\n\r\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "get properties for specific category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for specific category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.properties.items).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "4f283153-618e-49b3-8278-c5fef3393d38",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperties (storeId:\"{{storeId}}\", filter:\"categoryId:53e239451c844442a3b2fe9aa82d95c8\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    \r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "get properties for category",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "65208573-b8ab-49cf-b682-50c95cc9b30b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"{{category_Id}}\", cultureName:\"de-DE\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get property with Multilvalue type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "29cfc7ac-02ab-41da-88e9-0e3fa8ccc2fb",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}\r\n\r\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get property with Multilanguage type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties multi\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Body matches string\", function () {\r",
                  "    var text = JSON.stringify(pm.response.json());\r",
                  "    pm.expect(text.to.include(\"\\\"multivalue\\\": false\"));\r",
                  "});\r",
                  "pm.test(\"Your test name\", function () {\r",
                  "    var jsonData = JSON.stringify( pm.response.json());\r",
                  "    var multivalueF = \"\\\"multivalue\\\": false\"\r",
                  "    var jsonText = pm.response.text() \r",
                  "    console.log(jsonData )\r",
                  "    console.log(multivalueF)\r",
                  "    pm.expect(jsonData.to.include(multivalueF))\r",
                  "   \r",
                  "})"
                ]
              }
            }
          ],
          "id": "f6a680ca-4149-44c4-bbb1-d8ea3e94301c",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\ncategory (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n{\r\nname\r\nproperties\r\n\r\n{\r\ntype\r\nname\r\nvalue\r\nmultivalue\r\n}\r\n}\r\n}\r\n\r\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get property with dictionary and Multilanguage type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "a0f5a44d-b363-434f-8122-3c2db272190a",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproperties (storeId:\"{{storeId}}\", cultureName:\"{{cultureName}}\")\r\n{\r\n  items\r\n  {\r\n    name\r\n    type\r\n    id\r\n    multivalue\r\n    propertyDictItems\r\n    {\r\n     totalCount\r\n      items\r\n      {\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get property with Multilanguage and Multivalue type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "74d998c5-d323-4379-a976-3e74b5692259",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get Dictionary&Multivalue&Multilanguage type",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"get properties for category\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.data.category.properties).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c60601ef-ed63-467e-a532-f864469a92fb",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  category (storeId:\"{{storeId}}\" id:\"53e239451c844442a3b2fe9aa82d95c8\", cultureName:\"{{cultureName}}\")\r\n  {\r\n    name\r\n    properties\r\n    {\r\n      name\r\n      value\r\n    }\r\n  }\r\n}\r\n\r\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by name:asc",
          "id": "670d529d-b5e5-45f3-a80f-8f87f1621550",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"name:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n\n}}}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"name:asc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by name:desc",
          "id": "f1360e8e-7682-4002-9f91-c30fc1a51dd2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"name:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\nname\n\n}}}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"name:desc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by price:asc",
          "id": "0028f916-1f73-446f-a8f7-e1618be90788",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"price:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"price:asc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by price:desc",
          "id": "29b66697-dbf7-4a28-8f19-d0dae73b2745",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"price:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"price:desc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by createdDate:asc",
          "id": "8c77d13f-6a7a-4fe0-a91e-4b50a39c25d7",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"createdDate:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"createdDate:asc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by createdDate:desc",
          "id": "fc7599f8-06aa-468d-bfb8-78ff7c53841d",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"createdDate:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"createdDate:desc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by priority:asc Copy",
          "id": "47e48294-f6e8-4190-ae80-a3fababc5d2b",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"priority:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"priority:asc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by priority:desc",
          "id": "6f57f44f-a4f7-440a-a93b-213c0a03abf5",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"priority:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"priority:desc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by score:asc",
          "id": "b733d16b-0e4d-4f17-b13c-86713b75a0bf",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"score:asc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"score:asc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "products sort by score:desc",
          "id": "491c7f9d-74ae-41af-8983-8a1c4181be63",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\nproducts(\nquery: \"\"\nstoreId: \"{{storeId}}\"\nsort:\"score:desc\"\nfirst: 20\n) {\ntotalCount\nitems {\nid\ncode\nname\n}\n}\n}",
                "variables": "{\n  \"after\": \"{{after}}\",\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"score:desc\",\n  \"productIds\": [ \n  ]\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Your test name\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "8043618d-529d-458c-a14a-33900f3dfffe",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\n    categories ( storeId:\"Electronics\", cultureName:\"fr-FR\") {\n      items\n    {\n      id\n      name\n      properties\n      {\n        id\n        value\n        multivalue\n        label\n        propertyDictItems\n        {\n          items\n          {\n            id\n            value\n          }\n        }\n      }}\n      }}",
                "variables": "{\n  \"after\": {{after}},\n  \"first\": {{first}},\n  \"storeId\": \"{{storeId}}\",\n  \"cultureName\": \"{{cultureName}}\",\n  \"userId\": \"{{userId}}\",\n  \"currencyCode\": \"{{currencyCode}}\",\n  \"filter\": \"{{filter}}\",\n  \"fuzzy\": true,\n  \"fuzzyLevel\": 0,\n  \"facet\": \"\",\n  \"sort\": \"\"\n }"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "product",
          "id": "7e905d72-e948-4786-b243-51548fbf4098",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\nproduct(id: \"{{productId}}\", cultureName: \"de-DE\",storeId: \"{{storeId}}\") {\nid\nname\ncode\nvariations{\nid\ncode\n}\ndescription {\nid\nlanguageCode\nreviewType\ncontent\n}\ndescriptions{\nid\nlanguageCode\nreviewType\ncontent\n}\n\nproperties{\nname\nvalue\nlabel\n}\nimages {\nurl\nrelativeUrl\ncultureName\n}\nassets {\nid\nname\ncultureName\n}\nseoInfo {\nname\nsemanticUrl\nmetaKeywords\nmetaDescription\n}\nprice {\npricelistId\nlist {\namount\n}\nsale {\namount\n}\ndiscountAmount {\namount\n}\n}\n}\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "product description",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Description not empty\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.product.descriptions).to.be.not.empty;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "fba7153b-2581-4243-804a-0ff6e962ff85",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\n  product(\n    id: \"{{productId}}\"\n    storeId: \"{{storeId}}\"\n    cultureName: \"{{cultureName}}\"\n    currencyCode: \"{{currencyCode}}\")\n    {\n    id\n    code\n    descriptions\n    {\n      content\n      reviewType\n      languageCode\n    }\n  }\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "category",
          "id": "e1e688dd-a597-402d-a7ec-e7a9a6afb138",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\ncategory(id: \"{{categoryId}}\", storeId: \"{{storeId}}\") {\nname\ncode\n}\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Check meta information about dynamic property Contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Items not empty\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.dynamicProperties.items).to.be.not.empty;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "c6415d2a-2ea2-47ef-83dc-54fd5e0aa843",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
                "variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Contact\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Check meta information about dynamic property Organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Items not empty\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data.dynamicProperties.items).to.be.not.empty;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d47f8fdc-7a7e-4851-97ff-53be548424af",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query dynamicProperties($filter: String!, $cultureName: String, $dictionaryFilter: String, $dictionaryCultureName: String){\r\ndynamicProperties(filter: $filter, cultureName: $cultureName){\r\ntotalCount\r\nitems{\r\nobjectType\r\nname\r\ndictionaryItems(filter:$dictionaryFilter cultureName: $dictionaryCultureName ) {\r\ntotalCount\r\nitems\r\n{\r\nlabel\r\nname\r\nid\r\n}\r\n\r\n  }\r\n  }\r\n}\r\n}",
                "variables": "{\r\n\"filter\": \"objectType:VirtoCommerce.CustomerModule.Core.Model.Organization\",\r\n\"cultureName\": \"en-US\",\r\n\"dictionaryFilter\": \"keyword:\",\r\n\"dictionaryCultureName\": \"de-DE\"\r\n}"
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "New Request",
          "id": "70582fc5-2e9e-4d47-ae6b-4750c4941abe",
          "request": {
            "method": "GET",
            "header": [],
            "url": null
          },
          "response": []
        }
      ],
      "id": "4a2e0651-f5aa-4877-90eb-f32cb2387f9f",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "b749281c-f1b1-466c-88da-5229099e1ffa",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "aa8c2a29-6515-4521-9221-d92f4b35aed1",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Facet search",
      "item": [
        {
          "name": "get facet",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get facet\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"__outline\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "8d0306a4-940a-44f0-90e6-99e8f1ebc7ab",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"__outline\", storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n}\r\n}\r\n\r\n",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get few terms facet (products)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get few terms facet (products)\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Color\");\r",
                  " pm.expect(data.data.products.term_facets[1].terms).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "7cbfa62d-3c38-4d6d-9b55-b68f27cbffa4",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Brand Color\", filter:\"\" storeId: \"{{storeId}}\") {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get few terms facet (filter by color)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get few terms facet (filter by color)\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " \r",
                  " pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Color\");\r",
                  " pm.expect(data.data.products.term_facets[1].terms).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "df41cbef-6992-4baa-888c-ffbec78cf711",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Color Brand\", filter:\"Color:Black\" storeId: \"{{storeId}}\") \r\n{\r\n  \r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get few terms facet (filter by Brand)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get few terms facet (filter by Brand)\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " \r",
                  " pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Color\");\r",
                  " pm.expect(data.data.products.term_facets[1].terms).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "dbd3a3b5-88a4-4c2a-9adb-1c40e111706d",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Color Brand\", filter:\"Color:Black Brand:Microsoft\"  storeId: \"{{storeId}}\") {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get facet with some languages",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get facet with some languages\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"multivalue_multilingual\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "cb1f3745-a83c-49ff-95a3-4c991a15731d",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n    products(facet: \"multivalue_multilingual\", cultureName:\"{{cultureName}}\"  storeId: \"{{storeId}}\") {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get active facet (filter: single word)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get active facet (filter: single word)\", function () {\r",
                  "    var data = pm.response.json();\r",
                  "  pm.expect(data.data.products.items).to.be.not.empty;\r",
                  "  pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Brand\");\r",
                  "  pm.expect(data.data.products.term_facets[1].terms[0].term).to.be.equal(\"Asus\");\r",
                  "  pm.expect(data.data.products.term_facets[3].name).to.be.equal(\"Color\");\r",
                  "  pm.expect(data.data.products.term_facets[3].terms).to.be.not.empty;\r",
                  "  pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "710d8207-f28a-44b2-af38-a28a0896ce94",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  products(storeId: \"{{storeId}}\", filter: \"color:Black, Red brand:Asus\") {\r\n    totalCount\r\n    items {\r\n      id\r\n      name\r\n    }\r\n\r\n    term_facets {\r\n      name\r\n      terms {\r\n        term\r\n        isSelected\r\n        count\r\n      }\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get active facet (filter: words with spaces)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get active facet (filter: words with spaces)\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[1].name).to.be.equal(\"Brand\");\r",
                  "  pm.expect(data.data.products.term_facets[1].terms[0].term).to.be.equal(\"Samsung\");\r",
                  "  pm.expect(data.data.products.term_facets[3].name).to.be.equal(\"Color\");\r",
                  "  pm.expect(data.data.products.term_facets[3].terms[2].term).to.be.equal(\"Gold Platinum\");\r",
                  "  pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1044aebb-8a00-46d2-af22-d82fb9741d50",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\n  products(\r\n    storeId: \"{{storeId}}\"\r\n    filter: \"color:\\\"Gold Platinum\\\" brand:Samsung\"\r\n  ) {\r\n    totalCount\r\n    items {\r\n      id\r\n      name\r\n    }\r\n    term_facets {\r\n      name\r\n      terms {\r\n        term\r\n        isSelected\r\n        count\r\n      }\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get inactive facet BLOCKED",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get inactive facet\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets).to.be.empty;\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "1b83594c-512a-4dff-b48b-d756f3a7b129",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Deep\", filter:\"\",  storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm }\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get active facet \"price:[TO 100)\"",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get active facet price:[TO 100)\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
                  "\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "d85a800b-6aa8-427e-83e7-d03306a34f93",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"price.USD:[TO 100)\", filter:\"\"  storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\n  range_facets\r\n  {\r\n    name\r\n    ranges\r\n    {\r\n      count\r\n      includeTo\r\n      includeFrom\r\n      min\r\n      to\r\n      max\r\n    }\r\n  }\r\n  filter_facets\r\n  {\r\n    name\r\n    \r\nfacetType\r\n  \r\n  }\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get active facet \"price:[100 TO 200]\"",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get active facet price:[100 TO 200]\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
                  "\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "f505a99c-dfe0-4951-9afb-4320bb8076e2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"price.USD:[100 TO 200]\", filter:\"\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get facets \"price:[0 TO 100),[600 TO 1000]\"",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"price:[0 TO 100),[600 TO 1000]\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
                  "\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "e2d76892-0de4-408e-8c11-0c9dd9873de7",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"price.USD:[0 TO 100),[600 TO 1000])\", filter:\"\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get product's facet \"category.path\" Blocked",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get product's facet category.path\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "66ba2cbc-26fa-4ec0-ab2c-601064d841f2",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Camcorder Type\", filter:\"Camcorder.path:4974648a41df4e6ea67ef2ad76d7bbd4/45d3fc9a913d4610a5c7d0470558c4b2\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n} ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get produt's facet \"properties.{propertyName}\"",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get produt's facet properties.{propertyName}\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  "  pm.expect(data.data.products.term_facets[0].name).to.be.equal(\"Brand\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "deb6661c-407b-4cdc-98b6-e5a54304ca7f",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"properties.Brand\", filter:\"properties.Brand:LG\" storeId: \"{{storeId}}\")\r\n {\r\n  items\r\n  {id\r\n  name}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}  ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get terms and range facets.",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get terms and range facets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "4dcb57a0-c550-4dad-b620-2eee3c907baf",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"properties.Brand\", filter:\"properties.Brand:LG\" storeId: \"{{storeId}}\") {\r\nitems\r\n{id\r\nname}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}   ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Get few range facets",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Get few range facets\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;\r",
                  "\r",
                  "    pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "2005f902-2d53-4236-8dd8-53ebe6a24983",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"price.USD:[TO 100), [600 TO 1000]\", filter:\"\" storeId: \"{{storeId}}\") {\r\nitems\r\n{id\r\nname}\r\nterm_facets {\r\nfacetType\r\nname\r\nterms {\r\ncount\r\nterm\r\n\r\n}\r\n}\r\nrange_facets\r\n{\r\nname\r\nranges\r\n{\r\ncount\r\nincludeTo\r\nincludeFrom\r\nmin\r\nto\r\nmax\r\n}\r\n}\r\nfilter_facets\r\n{\r\nname\r\n\r\nfacetType\r\n\r\n}\r\n}\r\n}   ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Label for facet with some languages",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Label for facet with some languages\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets[0].label).to.be.a(\"String\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets).to.be.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "390b8337-8c10-429a-9b62-efe5a0150107",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Brand\",cultureName:\"de-DE\" storeId: \"{{storeId}}\") {\r\nterm_facets {\r\nfacetType\r\nname\r\n  label\r\nterms {\r\n  label\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n  pageInfo\r\n  {\r\n    startCursor\r\n    endCursor\r\n    hasNextPage\r\n    hasPreviousPage\r\n  }\r\n  totalCount\r\n}\r\n}  ",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Label for term",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Label for term\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.term_facets[0].label).to.be.a(\"String\");\r",
                  " pm.expect(data.data.products.term_facets[0].terms).to.be.not.empty;\r",
                  " pm.expect(data.data.products.term_facets[0].terms[0].label).to.be.a(\"String\");\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "55b008e9-99c6-49c8-a069-7e65e84dd328",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "{\r\nproducts(facet: \"Color\",cultureName:\"de-DE\" storeId: \"Electronics\") {\r\nterm_facets {\r\nfacetType\r\nname\r\n  label\r\nterms {\r\n  label\r\ncount\r\nterm\r\nlabel\r\n}\r\n}\r\n  pageInfo\r\n  {\r\n    startCursor\r\n    endCursor\r\n    hasNextPage\r\n    hasPreviousPage\r\n  }\r\n  totalCount\r\n}\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        },
        {
          "name": "Query without \"facet\"",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Query without facet\", function () {\r",
                  "    var data = pm.response.json();\r",
                  " pm.expect(data.data.products.items).to.be.not.empty;  \r",
                  " pm.expect(data.data.products.term_facets[0]).to.be.not.empty;\r",
                  " pm.expect(data.errors).to.be.undefined;\r",
                  "});"
                ]
              }
            }
          ],
          "id": "ecb9e447-c514-4065-b46b-29188f2eca50",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query {\r\n  products(\r\n    storeId: \"Electronics\"\r\n    cultureName: \"en-US\"\r\n    sort: \"priority\"\r\n    facet: \"\"\r\n  ) {\r\n    items {\r\n      name\r\n    }\r\n    term_facets {\r\n      name\r\n    }\r\n        range_facets\r\n    {\r\n      name\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      hasNextPage\r\n      hasPreviousPage\r\n      startCursor\r\n      endCursor\r\n    }\r\n  }\r\n}",
                "variables": ""
              }
            },
            "url": "{{url}}"
          },
          "response": []
        }
      ],
      "id": "1ccf56fa-62a7-4638-83ed-ec9df08c783e",
      "auth": {
        "type": "bearer",
        "bearer": {
          "token": "{{AdminToken}}"
        }
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "db467761-45f2-496c-a563-b29feb2707a1",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "c4359d84-a098-48e7-a2c4-930895af056c",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": {
      "accessTokenUrl": "https://regression-platform.qa.govirto.com/connect/token",
      "tokenName": "QAToken",
      "password": "store",
      "username": "admin",
      "tokenType": "",
      "accessToken": "",
      "challengeAlgorithm": "S256",
      "grant_type": "password_credentials",
      "addTokenTo": "header",
      "client_authentication": "header"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "fcbb44a7-d111-41e1-988f-c3df8196573c",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "1adec71c-8e84-4ba5-a4e4-e4effc27090d",
        "type": "text/javascript",
        "exec": [
          "/*pm.test(\"Error message\", function () {",
          "",
          "    if(pm.response.json().errors[0].message !=\"\")",
          "    {",
          "    console.log(jsonData.errors[0].message);",
          "    }",
          "});*/"
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "87b05e6a-f9e0-4a42-8bf0-dfa36000095b",
      "key": "url",
      "value": "https://regression-platform.qa.govirto.com/graphql\n"
    },
    {
      "id": "5a385a53-3dd4-49a4-b0cc-2917631a2d3e",
      "key": "adminurl",
      "value": "https://regression-platform.qa.govirto.com"
    },
    {
      "id": "0d51dc6b-eafc-46bc-80e6-c07664df218a",
      "key": "storeId",
      "value": "Electronics"
    },
    {
      "id": "f0ca829e-d7bf-4b4e-b8e8-8f3ff77418c4",
      "key": "userId",
      "value": "787585c5-8240-4617-8bf9-30c07201a17a"
    },
    {
      "id": "d59f6a61-307d-46e3-87c6-159f63cb2efe",
      "key": "currencyCode",
      "value": "USD"
    },
    {
      "id": "219c408b-df7a-4b1a-ab68-0de3e9c3c518",
      "key": "cultureName",
      "value": "en-US"
    },
    {
      "id": "7926a30b-7acb-4eaa-b246-227d7cf08eef",
      "key": "cartName",
      "value": "default"
    },
    {
      "id": "583a2611-15f5-4ec8-9a19-11d8c4f87fa8",
      "key": "filter",
      "value": "bool:true"
    },
    {
      "id": "ed6f0127-085a-49e9-aef7-9615a9cb46d8",
      "key": "categoryId",
      "value": "4b50b398ff584af9b6d69c082c94844b"
    },
    {
      "id": "d0cd0a31-dff3-40e2-9d94-7decd20f6f86",
      "key": "contactId",
      "value": "71df1001-efeb-46e4-bafd-92f69da032df"
    },
    {
      "id": "0114e59d-5a19-469c-8558-41e111a50245",
      "key": "orderId",
      "value": "ce1553ab-67f2-4c3c-8fbc-de485331a4bb"
    },
    {
      "id": "5fe47e3e-9f26-4373-a33b-576db2d566c1",
      "key": "orderNumber",
      "value": "CO210628-00401"
    },
    {
      "id": "25b7eb4c-a906-4859-9451-f229b3729cdb",
      "key": "after",
      "value": "0"
    },
    {
      "id": "b40a013d-fe12-4532-af02-bcc21d6e14e5",
      "key": "first",
      "value": "2"
    },
    {
      "id": "d9ba74ff-2a3a-489d-a377-f4d59c0253d3",
      "key": "sort",
      "value": ""
    },
    {
      "id": "ee100dd0-b927-4278-b4c9-d54e16c002ea",
      "key": "organizationId",
      "value": "3b85ef22-f9fa-43bc-83d1-cb6f1be4eb0f"
    },
    {
      "id": "d7d0e54c-2547-4e1c-8108-01e5dfc3eadd",
      "key": "productId",
      "value": "143e3eb3d1ee4a2bbf8fa0ecacfd1222"
    },
    {
      "id": "f2533ada-28cc-4bc1-b279-b697e97158d6",
      "key": "userName",
      "value": "admin"
    },
    {
      "id": "39e61024-ba8b-4c84-b81c-569f16b4b19c",
      "key": "price",
      "value": "569.0"
    },
    {
      "id": "433c65a3-be72-4b94-9af6-43de9601aa52",
      "key": "cartId",
      "value": "961a0f8c-3451-4255-84c9-382516e73e3d"
    },
    {
      "id": "116d4029-73b7-436c-96f7-45ced0190f9b",
      "key": "cartType ",
      "value": "null"
    },
    {
      "id": "1a640f71-6af9-4cd8-93d4-c448907d950f",
      "key": "lineItemId",
      "value": "7a2e595a-8d06-487e-b1c5-878c12e9774a"
    },
    {
      "id": "dcbef661-e46c-43e4-bf18-2c4e614fffe1",
      "key": "lineItemsComment",
      "value": "this text"
    },
    {
      "id": "30a756e3-fca4-49ea-8f7d-3cd0f124b694",
      "key": "secondCartId",
      "value": ""
    },
    {
      "id": "ad238053-6df6-4f69-80fa-2aad6df30f82",
      "key": "paymentId",
      "value": "b0e840a8-c340-4acb-8828-684f029cce25"
    },
    {
      "id": "65d0b987-d95e-4e43-90d8-058a7a7e4122",
      "key": "shipmentId",
      "value": "1475d660-a11b-4c91-9525-3ed95bd43539"
    },
    {
      "id": "adebfbc1-8aa3-4ee4-b8e9-7db0c22e825f",
      "key": "orderLineItemId",
      "value": "48876932-22e5-4624-af0f-7667d53b9753"
    },
    {
      "id": "afcbe53b-4d5b-4c27-81bf-1efdec8bc8a0",
      "key": "orderPaymentId",
      "value": "dfb38a0c-b9ce-4e4d-b580-85dd80104653"
    },
    {
      "id": "43687db0-514f-4247-9968-35340b53d727",
      "key": "orderShipmentId",
      "value": "5db3dd0f-a2c0-44bb-b100-22600b98e03b"
    },
    {
      "id": "6c6f57e6-152d-4660-97d2-9f16fc2c7611",
      "key": "paymentNumber",
      "value": "PI210628-00401"
    },
    {
      "id": "212747f3-9cd0-4ad9-a466-2ed527001287",
      "key": "category_Id",
      "value": "53e239451c844442a3b2fe9aa82d95c8"
    },
    {
      "id": "e149603b-2da2-4d8e-94b1-1ecfa51cfc11",
      "key": "propertyId",
      "value": "3851575f-f128-4c04-97a1-668d057b2eb4"
    },
    {
      "id": "59fe695c-4e04-4b75-b5cc-e30c191bd3f3",
      "key": "total1",
      "value": ""
    },
    {
      "id": "79d855b3-acce-4cd5-8e55-4430607b95cb",
      "key": "email",
      "value": "eXp1@mail.com"
    },
    {
      "id": "d417c384-0a19-4877-9983-c7f8a4db759f",
      "key": "password",
      "value": "eXp1@mail.com"
    },
    {
      "id": "6d399d81-f827-4f4c-b930-8901c5eca5a9",
      "key": "userName1",
      "value": "eXp121122@mail.com"
    },
    {
      "id": "dc37ddc2-5af7-4364-adf4-081c975320ef",
      "key": "userIdblock",
      "value": ""
    },
    {
      "id": "423631fa-1f91-429e-b35d-6649a74ddf5e",
      "key": "paymentId1",
      "value": ""
    },
    {
      "id": "5f54a520-f7d8-467d-b577-b60a31f9d917",
      "key": "shipmentId1",
      "value": ""
    },
    {
      "id": "8187df43-1b76-495f-b85f-741a43f2b382",
      "key": "cartAddress",
      "value": ""
    },
    {
      "id": "926a6ed6-7b00-4b0d-8b4e-7b5400d41ed7",
      "key": "cartId1",
      "value": ""
    },
    {
      "id": "3fabc2d7-48b1-4e8f-835d-16b0cfb4842b",
      "key": "randomUser1",
      "value": ""
    },
    {
      "id": "f3a82b36-5968-42f9-9268-4c81fa187cda",
      "key": "cartId2",
      "value": ""
    },
    {
      "id": "498198e9-2f6e-451c-ad07-5c95aa2734e0",
      "key": "randomUser2",
      "value": ""
    },
    {
      "id": "cf24f43c-d04a-44e7-827c-a04f9118e0db",
      "key": "orderCart",
      "value": ""
    },
    {
      "id": "71b75351-3956-4451-bd4d-727f1b6a8beb",
      "key": "randomUser3",
      "value": ""
    },
    {
      "id": "e4e78a1d-2f0a-4b10-995b-1f98289c6280",
      "key": "Token1",
      "value": ""
    },
    {
      "id": "2676c8f9-18e7-4ccb-a1bd-2da5e9545dbb",
      "key": "contactId2",
      "value": ""
    },
    {
      "id": "b90d4244-fff8-4a25-a3db-423938cd40e9",
      "key": "contactId1",
      "value": ""
    },
    {
      "id": "858788e7-a860-4809-a043-7a193ed32712",
      "key": "userName1",
      "value": "User_Assign_1"
    },
    {
      "id": "7faedb76-1aba-4737-98f5-b7aa4b4e925e",
      "key": "AdminToken",
      "value": ""
    },
    {
      "id": "83cfdb38-4b05-4b92-b272-dee00ff94cc0",
      "key": "userName2",
      "value": "User_Assign_2"
    },
    {
      "id": "de36ef89-4b4f-4b4e-89ed-86044d9597a2",
      "key": "organizationId1",
      "value": ""
    },
    {
      "id": "cc8b79c0-7bc2-4125-9159-1cbb8c431bfd",
      "key": "ProductId",
      "value": ""
    },
    {
      "id": "918e75a9-772c-4a15-9659-358c9ee237e7",
      "key": "Nameofproduct",
      "value": ""
    },
    {
      "id": "4ba238fb-1770-48d1-96b8-6f152326d544",
      "key": "Code",
      "value": ""
    },
    {
      "id": "3c4cc8ca-a4bc-4d95-93ea-1ae72c621d6b",
      "key": "AdminToken",
      "value": ""
    },
    {
      "id": "feb59cfd-83d0-4612-87c6-e3f755e1e80a",
      "key": "orderid1",
      "value": ""
    },
    {
      "id": "c6144f51-383a-4d0b-9d72-f9444dc86999",
      "key": "urlQA",
      "value": "https://vcplatform-platform.qa.govirto.com/graphql"
    },
    {
      "id": "71ce780d-1a4f-4414-b356-ed35e2048977",
      "key": "adminQA",
      "value": "https://vcplatform-platform.qa.govirto.com"
    },
    {
      "id": "5fb4b9fa-0cb6-40f9-a28f-13e0da82e449",
      "key": "catalogQA",
      "value": "4974648a41df4e6ea67ef2ad76d7bbd4"
    },
    {
      "id": "32b84f44-0993-4c91-b179-b31bc3862d2f",
      "key": "categoryQA",
      "value": "0d4ad9bab9184d69a6e586effdf9c2ea"
    },
    {
      "id": "26e53bc2-4ec9-4fb4-8a79-db62aecd0c9a",
      "key": "userId1",
      "value": ""
    },
    {
      "id": "46c8d78e-ac06-4853-bbb6-8728b525e9e9",
      "key": "roleId",
      "value": "12345678901"
    },
    {
      "id": "6523e95d-a46c-4388-9102-4b15858b5bc4",
      "key": "roleName",
      "value": "organization manager"
    }
  ]
}
