# This is a basic workflow that is manually triggered

name: Module CI

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    
jobs:
# The type of runner that the job will run on
  # build_package:
        
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - name: Install VirtoCommerce.GlobalTool
  #     run: dotnet tool install --global VirtoCommerce.GlobalTool
    
  #   - name: Install dotnet-sonarscanner
  #     run: dotnet tool install --global dotnet-sonarscanner
    
  #   - uses: mvktsk/github-actions/vc-module-ci@master
  #     with: 
  #       token: ${{ secrets.SONAR_TOKEN }}

  ci:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NUGET_KEY: "" #${{ secret.NUGET_KEY }}
      BLOB_SAS: ${{ secrets.BLOB_CONNECTION_STRING }}

    steps:
      - uses: actions/checkout@v2

      - name: Install VirtoCommerce.GlobalTool
        run: dotnet tool install --global VirtoCommerce.GlobalTool

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      # - name: changelog
      #   uses: scottbrenner/generate-changelog-action@master
      #   id: Changelog
      #   env:
      #     REPO: ${{ github.repository }}
      
      # - name: print changelog
      #   shell: pwsh
      #   run: Write-Output ${{ steps.Changelog.outputs.changelog }}

      - name: Add version suffix
        # if: ${{ github.ref=='refs/heads/dev' }}
        shell: pwsh
        run: |
          $commitNumber = git rev-list --count '${{ github.ref }}'.Replace('refs/heads/', '')
          Write-Output "alpha.$($commitNumber)"
          # vc-build ChangeVersion -CustomVersionSuffix "alpha.$($commitNumber)"

      - name: SonarCloud Begin
        shell: pwsh
        env:
          PULL_REQUEST_TITLE: ${{ github.event.pull_request.title }}
        run: |
          $REPO_NAME = $env:GITHUB_REPOSITORY.Replace('VirtoCommerce/', '')
          $BRANCH='${{ github.ref }}'.Replace('refs/heads', '')
          $PROJECT_KEY=$env:GITHUB_REPOSITORY.Replace('/', '_')
          $CMD="dotnet sonarscanner begin /k:$($PROJECT_KEY)"
          $CMD="$($CMD) /o:'virto-commerce'"
          $CMD="$($CMD) /d:sonar.cs.opencover.reportsPaths='$PWD/.tmp/coverage.xml'"
          $CMD="$($CMD) /d:sonar.host.url='https://sonarcloud.io'"
          $CMD="$($CMD) /d:sonar.login='${{ secrets.SONAR_TOKEN }}'"
          $CMD = "$($CMD) /d:sonar.branch='$($BRANCH)'"
          if ('${{ github.event_name }}' -eq 'pull_request' ) {
            $CMD="$($CMD) /d:sonar.pullrequest.base='$('${{ github.event.pull_request.base.ref }}')'"
            $CMD="$($CMD) /d:sonar.pullrequest.branch='$($env:PULL_REQUEST_TITLE)'"
            $CMD="$($CMD) /d:sonar.pullrequest.key=${{ github.event.number }}"
          }
          pwsh -command $CMD

      - name: Build
        run: vc-build Compile

      - name: Unit Tests
        run: vc-build Test -skip

      - name: SonarCloud End
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Packaging
        run: vc-build Compress -skip Clean+Restore+Compile+Test
      
      - name: Publish Nuget
        if: ${{ github.ref=='refs/heads/dev' || github.ref=='refs/heads/master' }}
        shell: pwsh
        run: |
          & vc-build PublishPackages -ApiKey $env:NUGET_KEY -skip Clean+Restore+Compile+Test
          if($LASTEXITCODE -ne 0 -or $LASTEXITCODE -ne 409)
          {
              exit 1
          }
      
      - name: Publish Github PreRelease and Update modules.json
        # if: ${{ github.ref=='refs/heads/dev' }}
        shell: pwsh
        run: |
          $orgName = $env:GITHUB_REPOSITORY.split("/")[0]
          $BRANCH="${{ github.ref }}".Replace('refs/heads', '')
          $blobUrl = "https://vc3prerelease.blob.core.windows.net/packages$($env:BLOB_SAS)"
          $artifactFileName =  Get-ChildItem artifacts/*.zip -Name
          $artifactRelativePath = "artifacts/$($artifactFileName)"
          Write-Output $artifactFileName
          $downloadUrl = "https://vc3prerelease.blob.core.windows.net/packages/$($artifactFileName)"
          # azcopy10 copy $artifactRelativePath $blobUrl
          Write-Output $downloadUrl
          # & vc-build PublishModuleManifest -CustomModulePackageUri "$($downloadUrl)"
          # if($LASTEXITCODE -ne 0 -or $LASTEXITCODE -ne 423)
          # {
          #     exit 1
          # }
      
      - name: Publish Github Release and Update modules.json
        #if: ${{ github.ref=='refs/heads/master'}}
        shell: pwsh
        run: |
          $orgName = $env:GITHUB_REPOSITORY.split("/")[0]
          $BRANCH='${{ github.ref }}'.Replace('refs/heads/', '')
          $releaseBranchArg = "-ReleaseBranch $BRANCH"
          $releaseNotesArg = ""
          Write-Output "vc-build Release -GitHubUser $orgName -GitHubToken $($env:GITHUB_TOKEN) $releaseBranchArg $releaseNotesArg -skip Clean+Restore+Compile+Test"
          # if($LASTEXITCODE -ne 0 -or $LASTEXITCODE -ne 422)
          # {
          #     exit 1
          # }
          # & vc-build PublishModuleManifest
          # if($LASTEXITCODE -ne 0 -or $LASTEXITCODE -ne 423)
          # {
          #     exit 1
          # }

      - name: Parse Jira Keys from Commit
        id: jira_keys
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Push Build Info to Jira
        if: ${{ env.CLOUD_INSTANCE_BASE_URL != 0 && env.CLIENT_ID != 0 && env.CLIENT_SECRET != 0 && env.BUILD_STATE != 0 && steps.jira_keys.outputs.jira-keys != '' && always() }}
        id: push_build_info_to_jira
        uses: HighwayThree/jira-upload-build-info@master
        env:
          CLOUD_INSTANCE_BASE_URL: ${{secrets.CLOUD_INSTANCE_BASE_URL}}
          CLIENT_ID: ${{secrets.CLIENT_ID}}
          CLIENT_SECRET: ${{secrets.CLIENT_SECRET}}
        with:
          cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          build-number: ${{ github.run_number }}
          build-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          build-state: "${{ env.BUILD_STATE }}"
          build-url: '${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}'
          update-sequence-number: '${{ github.run_id }}'
          last-updated: '${{github.event.head_commit.timestamp}}'
          issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
          commit-id: '${{ github.sha }}'
          repo-url: '${{ github.event.repository.html_url }}'
          build-ref-url: '${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}'
